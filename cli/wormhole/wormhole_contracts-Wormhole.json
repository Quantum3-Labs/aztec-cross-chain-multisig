{
  "transpiled": true,
  "noir_version": "1.0.0-beta.11+5b65f9637e85a4177692c3190cb35ea678fb15e9-aztec",
  "name": "Wormhole",
  "functions": [
    {
      "name": "_assert_is_owner",
      "is_unconstrained": true,
      "custom_attributes": ["public", "internal"],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "4111885691990129848": {
            "error_kind": "string",
            "string": "Function _assert_is_owner can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16994898036605678414": {
            "error_kind": "string",
            "string": "caller is not owner"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBEJwAABAMnAgEEACcCAgQAHwoAAQACgEQlAAAAPyUAAABAKAIAAQSARCcCAgQAOw4AAgABJiUAAACoHgIAAQAeAgACADMqAAEAAgADJwIBAQEkAgADAAAAaSUAAADRHgIAAQEeAgACAAoqAQIDJAIAAwAAAIUlAAAA4ycCAQAILwoAAQACHgIAAQEKKgIBAyQCAAMAAACnJQAAAPUmKACABAR4AA0AAACABIADJACAAwAAANAqAQABBfeh86+lrdTKPAQCASYqAQABBb4eP/8+pPb6PAQCASYqAQABBTkQWkBMFTy4PAQCASYqAQABBevaAbix3XNOPAQCASY=",
      "debug_symbols": "tVbbbusgEPwXnv0Au8CCf6WKIidxKkuWE7n2kY4i/3uX1vhSCVS16YsZwAw77ID2IS71aXw9Nt319ibKl4c49U3bNq/H9nauhubW8ehDyPCxXpS6EKRFSdxwT8lCOOJWFcLDZ6ukjMAw4AVKhREKIIw4BiAjcDNAFCVgAG4GmvcBGwDvBGG50TOwEMA0FSJGeRz6ug5BbsJmMfeqr7tBlN3YtoX4V7Xjx09v96r7aIeq51lWUXcXbpnw2rR1QFOxrpbppQoNwrxcobW0UChpdyQqQyJh4ZAaNhS4o4AMBXlnIwd5bxYS2mvBNAcCSjdzMAad4shK8T6GoZRPSjFPkGL/WopxS1ZcOisuTUHkIgU5nQzCZ4SglioKQa1/K0RBWkjO5gCLEsVna9M2z5nUby6LN1omxeRdSmZNrU+SZOWgglUOQlrOM4yqnuHU72cHdVJOjoT0ahPStKbYfFGTtSvB4la/eQyd279kmUDYXY4iiSTpUicCKkci13sjZdpqkPErv+1mITHofpQb0m6xGhkpU8cK+gkXB8wfX5ydSQw/IFs1B+5V56bf1Q5TYOub6tTWc/c6dufN7PD/Hmdi7XHvb+f6MvZ1YFoLkFBHvKAq0B5CMcEdjYU2hyls/Q4="
    },
    {
      "name": "_publish_message",
      "is_unconstrained": true,
      "custom_attributes": ["public", "internal"],
      "abi": {
        "parameters": [
          {
            "name": "nonce",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          },
          {
            "name": "payloads",
            "type": {
              "kind": "array",
              "length": 8,
              "type": {
                "kind": "array",
                "length": 31,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            },
            "visibility": "private"
          },
          {
            "name": "consistency",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 64
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16930197311201387584": {
            "error_kind": "string",
            "string": "Function _publish_message can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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"
    },
    {
      "name": "compute_vaa_hash_unconstrained",
      "is_unconstrained": true,
      "custom_attributes": ["utility"],
      "abi": {
        "parameters": [
          {
            "name": "body_bytes",
            "type": {
              "kind": "array",
              "length": 1860,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "body_length",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "public"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1004672304334401604": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3206131020419630384": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3738765135689704617": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "10676044680617262041": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "11732781666457836689": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14101993474458164081": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15200354114977654233": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "15760694058516861966": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17226037485472400844": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "17610130137239148460": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": ""
    },
    {
      "name": "expire_guardian_set",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "tZnbbhs5DIbfxde5kHgQpbxKURRp6hYGDCdwkwUWRd59SY1I21mM4DrtTfKZnvmHpCiRtn9tvm2/vv74sjt8f/q5uf/0a/P1uNvvdz++7J8eH152Twe1/tok+1Pb5p7uNo0296L/9FVOd5ucRCErZBgAyYEVWAHVAnYxskMbQOTgFnYLu6WggwwQcCgDanawR+jTIZUBOTn4W+AWcAu6BcmhDiB0kAEMDv6Ikh0s5GbQBgg51AEVHGRAyw7jdkzJISxDEDM6DEEEt7BFgQbk0AYUtxS3iFvMsQ7m2AIywBxboCxA5hiQATnUAVYAHXoyiwLb7WLADm1AX9MOMqCvaQd7loZDNTnwgOaWNiyckoNbsluy6qCWBAM4tAG2yh0oObCDXaNLyYwOMsBWuYPYXWBADnWA5RDRQAaYqwbFXO2QR3oLgMNYgtI3iAElh5H5wtmBlzyXnkyDnswOMqBnTJdA+i7QrEpPSwdyqAMAHMZaCOYlh4Ijq0LJwS3sFnZLcUtxi+QlqyIyoJLDWAtpI/M1JQda8lyttDpYaS1QBtjORTYwHY209jU1IHCQAeYYVgU7JbAZsEMb0NBBFmgJHPShpA9tlsMFeAC4BdyCbkG3kFtsKdHOTkvdAuRQBxR9KIGBDLAcEhuUAdUt/Ug2sEOZqoFZmh3LlruF7MAYFDYoTrbUjJ3UxsXIjjzLl5I4WfkN4iB9GktvAiNpOVUICpsdI9zvsHOkkzoTpHps12XLLy5UnACDqlNf6oWaE4WN4jqGoNAr8YwS91ZcdouSOPWjbyEO0juKNRnIY6dk8M2jFDbLaekd0HK6EIXNdlCB3h+T38HFyQ9GpeokFNScathqXNfCl+Z6vZMM8nt7w+gRIXi8iDmIgzxeZI8NCwSFTTw2FI8Xa9iqx4stfAn/KGGQx0F+RCm5zwRhg7gOISj0KAX1e9/e7jY+zHx5OW63NsucTTc68zw/HLeHl8394XW/v9v887B/7Rf9fH449P8vD0d9V/OwPXzT/yr4fbffGr3dne5O67dq/qw59Ns1b0VCIqdyIZInIglCIxGcSeCFBEwkpNXiGtIah4hcxoLrGlo8qQ4NZaA1jWkorbkbuqtWQ+E/EEr526FwjVWp66tS1yVEqktoe1x1ok0CQUrZA0GijwaiZ9lqILMy14mEXUOHkpMIv3NjUqOF2Mu8cDrzQ+qlxqRG86k0Wg0FJL5UoHUFKs2zQZLzSYN/wwt2L+Asjv95MSlQIZsXl8rQafikkeVSQya1EemkXEIB4J3CpD5Be6EHAqmta0wqlME3PGO6TaGJl0Xm2+KA6k7oxodVDZidoAzeB/SDqtyoUeL049pu09BuHg0F6roGz6oLorjKTQqNfLvrAHuTwkVTK+vrCpN1JSpen9rzT35oY7k+nUSRTr5xWTEqVLHepPEnQskYFaqj8G07RXIcXTLZr0h/V0ObSMRSpN6mIYKnOWF916N8dKfMFK7bKTOFa3cKpQ+X1zSd7XTwNFhP57TFs8RZXpBWWzxNmmsRdD+0uvLZuHIZC81KtFI0tnq2LLnW60ce/YLmNPIUXBt5aNLmgU8Fpsy4Nr7RrM+DJI5hVmBV5PpoZDWa64dA4jUNnojo+ekVopMtrq4M51lCcm6REP1IvJYQnvZqjKmY+WwOLOk3HNEPBidH0up0zpNaxUwc0WT9knNVhGezIMWBisxn2+b957/ZUZZ8aRrceBgWT0cT/uhxOlGYji5XRTFVuCqKK8en9wqf9eXD4+548TvMm0kddw9f99vx8vvr4fHs3Zd/n/0d/x3n+fj0uP32etya0unHHP3zCRPe6Yfez/a9nL6ERnfQmr3M9q6OXIjp85s58x8="
    },
    {
      "name": "get_owner",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgEEACcCAgQAHwoAAQACgEQlAAAARSUAAABGLgIAAYBEKAIAAgSARCcCAwQBOw4AAwACJiUAAAB/HgIAAQAeAgACADMqAAEAAgADJwIBAQEkAgADAAAAbyUAAACoJwIBAAgvCgABAAItCgIBJigAgAQEeAANAAAAgASAAyQAgAMAAACnKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEm",
      "debug_symbols": "tZTbbsMgDIbfhetccMb0VaqqSltaRUJJRJNJU5V3n+lCDpPgZttNbEP48A/GL3Jzl/Fxbtp79ySH44tcQuN98zj77loPTdfi6IvQ+DGKHGRFAAODBiNGK2IFWoYWvi2jenYYQ0dHJ47oaapIgp6H4FxkbnbBvfs6uHYgh3b0viIftR/fPz37un3boQ44i5u69oYWgffGu+hN1bqa5pcyoQSflzOhtVkQmPYOwgoQyhcGlXyDEDsELyCMBZ0Yxlq1QMxei8gzBBcUZgb6XOYYRSnWpjQYs1kp6g+k6P+WomC5FcjfCuQRxkBCGJDZJGxBiJCUJSFCyt8KYTwvpFTmoO1SomDY+lLUjzR4SYvhixS7eSkAe0apRqkGkyDUUMiehyxB6HqolEqahRTKFB++WiBKwP5mThjV1ybsut4UaaGpL97N4X1sr5vZ4bNPM6lr9qG7utsYXCStrZPh98hlxe0p9kMMBK0EP01x6y8="
    },
    {
      "name": "get_provider",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "structs::Provider",
            "fields": [
              {
                "name": "chain_id",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 16
                }
              },
              {
                "name": "evm_chain_id",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 16
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBGJwAABAMnAgEEACcCAgQAHwoAAQACgEQlAAAASyUAAABMLgIAAYBELgIAAoBFKAIAAwSARCcCBAQCOw4ABAADJiUAAAGRHgIAAgAeAgADADMqAAIAAwAEJwICAQEkAgAEAAAAdSUAAAG6JwICAAAtCAEDJwIEBAcACAEEAScDAwQBACIDAgQtCgQFLQ4CBQAiBQIFLQ4CBQAiBQIFLQ4CBQAiBQIFLQ4CBQAiBQIFLQ4CBQAiBQIFLQ4CBS0IAQIAAAECAS0OAwInAgMEACcCBAQGJwIFAAEnAgYEAS0KAwEjAAAA8QwqAQQDJAIAAwAAAUUjAAABAy0LAgEAKgEGAy0LAwInAgMEAgAqAQMFLQsFBBwKAgMDHAoDAQAcCgECAxwKBAMDHAoDAQAcCgEDAy0KAgEtCgMCJhwKAQMAACoFAwcvCgAHAAMtCwIHLgIAB4ADKACABAQAByUAAAHMLgiABQAIACIIAgkAKgkBCi0OAwotDggCACoBBgMtCgMBIwAAAPEoAIAEBHgADQAAAIAEgAMkAIADAAABuSoBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJi4BgAOABgsAgAYAAoAHJACABwAAAecjAAAB8i4AgAOABSMAAAJZLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAAkUuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAAhQoAYAFBAABAwCABgACgAYjAAACWSY=",
      "debug_symbols": "tZbbjuIwDED/Jc99SJyLHX5lhFCBMqpUFdSBlVaIf1+nE7d0pVS7zMwLPXHpiR2H0Ls6Nvvb+67tT+cPtXm7q/3Qdl37vuvOh/rannuO3pVOH2TUxlWKgtpgpSKPjOZr5KuplNEugwEBZPAMAAIhgzUCEnEScRLxWsAJxAzBClAGlClQJiURkgijCKMXyELQViALYcwnMIyTcsEwThoTUIZx0hEwA0kkTQrAkNbpE3LEaiMgESMR4MTAMlhOFVyCFOE0bMoHfAL/mY/1RoAyjBmOkHO26AQkQvIdSjnj41EpafXuOjRN6vRT73lHXOqh6a9q09+6rlK/6u42funjUvfj9VoPfJe3QtMf+crCU9s1iR7V/LQuP2qst5Af5w0RcFIYHRYSsyLRMDm0gyeFXShgRYGRgjgwRj9JcFmLLTssWE3ZwQyu5FgtJUZJw5hYLMV/Qynhp0vxNHWFyl2hsgKRRIHkiknElUKs00YKsc59tRA+z4qFrG1zNMFMPeGuTBL/VxqwVgvCVEp8+qUQLR1re1QHQpFo1FRcD1eWQCSUahLDi5JIsyTG1ySR7CRhS1Gyvib4tCZgixJa6zACTh1GN//qrDX/YSE9W3iVixbQ32JZ2/YG5qPouZ7w7/2xWk8SZvtSk/nBdPvLkvkg0NrpkgRWjlb+s/KTxFtaniZbHtWHdli8Pz2SbWjrfdfk4enWH57uXn9f5I68f12G86E53oYmmeaXMP54i7ri/4VteufiEZmKQhqYNMCK4vaR8vgD"
    },
    {
      "name": "get_receiver_address",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgEEACcCAgQAHwoAAQACgEQlAAAARSUAAABNLgIAAYBEKAIAAgSARCcCAwQBOw4AAwACKACAQwQAAyYlAAABkR4CAAIAHgIAAwAzKgACAAMABCcCAgEBJAIABAAAAHYlAAABuh4CAAIGJwIDAAAtCAEEJwIFBAQACAEFAScDBAQBACIEAgUtCgUGLQ4DBgAiBgIGLQ4DBgAiBgIGLQ4DBi0IAQMAAAECAS0OBAMnAgQEACcCBQAJJwIGBAEtCgQBIwAAANcNIgABgEMABCQCAAQAAAFFIwAAAOwtCwMBACoBBgQtCwQDJwIEBAIAKgEEBi0LBgUBIgABgEMABi0LBgQcCgMGBBwKBgEAHAoBAwUMKgIDARYKAQIcCgEDABwKAgEABCoDBQIEKgEEAwAqAgMBJhwKAQQAACoFBAcvCgAHAAQtCwMHLgIAB4ADKACABAQABCUAAAHMLgiABQAIACIIAgkAKgkBCi0OBAotDggDACoBBgQtCgQBIwAAANcoAIAEBHgADQAAAIAEgAMkAIADAAABuSoBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJi4BgAOABgsAgAYAAoAHJACABwAAAecjAAAB8i4AgAOABSMAAAJZLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAAkUuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAAhQoAYAFBAABAwCABgACgAYjAAACWSY=",
      "debug_symbols": "tZbbbtswDIbfxde+IEVJpPIqRVGkqVsEMJLATQYMRd59VGoqTgcJW9bd2L8o6zMpUoeP7mV4Pr09bXev+/du9fDRPU/bcdy+PY37zfq43e/U+tFBfojrVr7vhLsV913SFkLfIWgnYhZhFkgmREVQ4bIlZSGzIGeCZ+HN4s0SzBLiLCKYCCbSLNibsF+IDZcZ6FBHOfXZkQKdeui8Al3MIphIswjehFkizYLRRB4lKgRMZEv+V1IL5V+kYGLmEHgTZkGzoFlcHuVUUOZQFtmik0le/04+i/AZBQU0IbO4uHoRaRZ5fj6FWcS+yfPj8HzuO0v603EahpzzRRVobRzW07A7dqvdaRz77sd6PF0+ej+sd5f3cT1pr07wsHvRtwJft+OQ1bm/job6UKSQg74MR4qRCwIh3kCwAQFXGODdAkE3CNdAcJJoDE4pFAjfxkJ1BjkCmRmqna8xmqGkZG4gpmoo4RtCif87lCAlK1LPitQRzGIIFl91IjUCIQ9ogZD3/xoIunogrTIXlJJXcYQFEr640ahRYiyhMNHVD+ZbRqNGXWBva0V1oOp8+FZ1MIRSHezqkGY00ZdoJNajaZSpj8ky45du/Mbghh8Qhc0RYJBqMI1CdUnYcpO1uxNSwsk63QdJQgWilCqkPSe8mJN6gl0rwZJsG6LkrmcDxS+MRrkiel+WXlwwBG8ZjWqVZOdTglAnNHbUKJZbBq4SmoXKwVadF/DVQnWNpGAKZVtPiwojhL9hhMIQqDLaC7ccUSSuvnCptR8mhOKHjws/wh9XOgG44ggA3bVcdCD6b4BcDxkAD9XLQ2tTDXqrM0gguT2pHrW13mynm1v6OdOm7fp5HObm62m3WfQefx6sx275h2m/GV5O05BJ16u+Ph70rNXrx2O+2GuLUy8+NzB3hV748Zz9+AU="
    },
    {
      "name": "get_scheduled_receiver_address",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "tuple",
            "fields": [
              {
                "kind": "struct",
                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 64
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBGJwAABAMnAgEEACcCAgQAHwoAAQACgEQlAAAASyUAAABTLgIAAYBELgIAAoBFKAIAAwSARCcCBAQCOw4ABAADKACAQwQAAyYlAAABZh4CAAIAHgIAAwAzKgACAAMABCcCAgEBJAIABAAAAHwlAAABjycCAgAALQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS0OAgUAIgUCBS0OAgUAIgUCBS0OAgUtCAECAAABAgEtDgMCJwIDBAAnAgQACScCBQQBLQoDASMAAADYDSIAAYBDAAMkAgADAAABGiMAAADtLQsCAQAqAQUDLQsDAgEiAAGAQwAELQsEAxwKAgQEHAoEAQAcCgECBS0KAwEmHAoBAwAAKgQDBi8KAAYAAy0LAgYuAgAGgAMoAIAEBAAEJQAAAaEuCIAFAAcAIgcCCAAqCAEJLQ4DCS0OBwIAKgEFAy0KAwEjAAAA2CgAgAQEeAANAAAAgASAAyQAgAMAAAGOKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmLgGAA4AGCwCABgACgAckAIAHAAABvCMAAAHHLgCAA4AFIwAAAi4uAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAACGi4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAB6SgBgAUEAAEDAIAGAAKABiMAAAIuJg==",
      "debug_symbols": "tZbdbuIwEEbfxde5GP+PeZUKoQChihQFlMJKK8S770zXE5JKtrRse0OOHXzisb9Yuatjt7+97/rxdP5Qm7e72k/9MPTvu+F8aK/9eaTeuwL+QVQb16hk1SbShVoaGqUhEGgCrQVSBuMIAkPKYK0AZnDS46THS4+PGYIWCBkiCHgBeQTKcMxCo3kUTdlYFiKBI6GxDCGDBwHMEAyBZ4gZIvewEBlYiHyLhYl6LDDw8NQoC+bvsyxgBu0zGBAIGawWkB4n/3G8hvh4NEp2ZHeduo43ZLFFtHGXdurGq9qMt2Fo1K92uH3+6ePSjp/XazvRXZpjNx7pSsJTP3RMj+Y5GspDtfXW5OHahhBnBWVgJdEVCZjZAc4sFHalMBVFTBjEEVPysySua7FlhzW0L9lBbFzJUS0lJZkGZb5Yiv+GUsJPl+Jx3hUs7wqWFTGiKCK64iRSpRAKvZZCKPf/W4g25UJqMafZO3GgQ5wl/ss0Khl12vvscDou3hTilaOSUReS1OKisWWHq6wpBIyyphABi2taSSkdalE2htm8KJnLYU6vSRLaWUKWoqS+JnGxJouV/SqphRWTvLg2medpasPaYWpJ08+g6bBwoF47KoHHJCd6Al82VKIaUPY2QiwaqkGNXs50h+CKQTWVTdHJzwdhWiTMavgXh58dCEVHLWEWwKQ5HGBfiikN1O4bJM/jEMBBSWJqMfXWzxJvcX2mbqnVHvpp9bH3YNvUt/uhy83TbTws7l5/X+SOfCxepvOhO96mjk3PL0b6eYup0QBb/lDkFjTRc0NzIzQRtw+exx8="
    },
    {
      "name": "get_scheduled_token_address",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "tuple",
            "fields": [
              {
                "kind": "struct",
                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 64
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBGJwAABAMnAgEEACcCAgQAHwoAAQACgEQlAAAASyUAAABTLgIAAYBELgIAAoBFKAIAAwSARCcCBAQCOw4ABAADKACAQwQAAyYlAAABZh4CAAIAHgIAAwAzKgACAAMABCcCAgEBJAIABAAAAHwlAAABjycCAgAALQgBAycCBAQEAAgBBAEnAwMEAQAiAwIELQoEBS0OAgUAIgUCBS0OAgUAIgUCBS0OAgUtCAECAAABAgEtDgMCJwIDBAAnAgQADScCBQQBLQoDASMAAADYDSIAAYBDAAMkAgADAAABGiMAAADtLQsCAQAqAQUDLQsDAgEiAAGAQwAELQsEAxwKAgQEHAoEAQAcCgECBS0KAwEmHAoBAwAAKgQDBi8KAAYAAy0LAgYuAgAGgAMoAIAEBAAEJQAAAaEuCIAFAAcAIgcCCAAqCAEJLQ4DCS0OBwIAKgEFAy0KAwEjAAAA2CgAgAQEeAANAAAAgASAAyQAgAMAAAGOKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmLgGAA4AGCwCABgACgAckAIAHAAABvCMAAAHHLgCAA4AFIwAAAi4uAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAACGi4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAB6SgBgAUEAAEDAIAGAAKABiMAAAIuJg==",
      "debug_symbols": "tZbdjtowEEbfJde5GP+PeZUVQgHCKlIUUBYqVYh378zWY5KtbKl0e0OOHXzisb9YuTfHfn973w3T6fzRbN7uzX4exnF4343nQ3cdzhP13hvgH8RmY9smmmYT6EItBW2jwBMoAqUEYgJtCTxDTGCMACaw0mOlx0mPCwm8EvAJAgg4AXkEynBMQq14FE1ZGxYigSWhNgw+gQMBTOA1gWMICQL3sBAZWIh8i4WRegww8PDYNgb072cZwATKJdAg4BMYJSA9Vv5jeQ3x8Wgb2ZHdde573pDFFtHGXbq5n67NZrqNY9v86Mbb558+Lt30eb12M92lOfbTka4kPA1jz/Ron6OhPFQZZ3Qaroz3ISsoAyuJqkhAZwdYvVCYlUJXFCGiF0eI0WVJWNdiyg6jaV+Sg1jbkqNaSowyDcp8sRT3DaX4/12Kw7wrWN4VLCtCQFEEtMVJxEohFHolhVDu/7UQpcuF1GKODnNE0WuTJe7LNCoZtcq55LAqLN4U4pWjklHro9Riw2IafzhsZU3BY5A1hQBYXNNKSulQC7IxzPpFSS6HOb4miWiyhCxFSX1NwmJNFiv7VVILK0Z5cU3Uz9PU+LVD15KmrM1h9QsHqrWjEniMcqJHcGVDJaoeZW8DhKKhGtTg5IWxCLYYVF3ZFBVdPgjjImFGwd84XHYgFB21hBkAHXM4wLwUUxqo7DdInschgIWSRNdi6ozLEmdwfaZuqdUdhnn1sfdg2zx0+7FPzdNtOizuXn9e5I58LF7m86E/3uaeTc8vRvp5C7FVAFv+UOQWtMFxQ3HDtwG3D57HLw=="
    },
    {
      "name": "get_token_address",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
            "fields": [
              {
                "name": "inner",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgEEACcCAgQAHwoAAQACgEQlAAAARSUAAABNLgIAAYBEKAIAAgSARCcCAwQBOw4AAwACKACAQwQAAyYlAAABkR4CAAIAHgIAAwAzKgACAAMABCcCAgEBJAIABAAAAHYlAAABuh4CAAIGJwIDAAAtCAEEJwIFBAQACAEFAScDBAQBACIEAgUtCgUGLQ4DBgAiBgIGLQ4DBgAiBgIGLQ4DBi0IAQMAAAECAS0OBAMnAgQEACcCBQANJwIGBAEtCgQBIwAAANcNIgABgEMABCQCAAQAAAFFIwAAAOwtCwMBACoBBgQtCwQDJwIEBAIAKgEEBi0LBgUBIgABgEMABi0LBgQcCgMGBBwKBgEAHAoBAwUMKgIDARYKAQIcCgEDABwKAgEABCoDBQIEKgEEAwAqAgMBJhwKAQQAACoFBAcvCgAHAAQtCwMHLgIAB4ADKACABAQABCUAAAHMLgiABQAIACIIAgkAKgkBCi0OBAotDggDACoBBgQtCgQBIwAAANcoAIAEBHgADQAAAIAEgAMkAIADAAABuSoBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJi4BgAOABgsAgAYAAoAHJACABwAAAecjAAAB8i4AgAOABSMAAAJZLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAAkUuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAAhQoAYAFBAABAwCABgACgAYjAAACWSY=",
      "debug_symbols": "tZbbbtswDIbfxde+oERKpPIqRVGkqVsEMJLATQYMRd59VGoqTgcJW9bd2L8o6zMpUoeP7mV4Pr09bXev+/du9fDRPU/bcdy+PY37zfq43e/U+tFBfojvVtR3wt2K+y5py0HfOdBO57IIs3BoQlQEFT5bUhYyC/QmeBZkFjJLMEuIs4hgIphIs2AyYb8QGy4z0Dsd5dVnjwr06qEnBfqYRTCRZhHIhFkizoKdiTxKVAiYyJb8r6QWzL9IwcTMQSATZnFmcWbxeZRXgZmDWWSLTiaS/h0pi/AZBQZnQmZxcfUi0izy/HwKs4h9k+fHu/O57yzpT8dpGHLOF1WgtXFYT8Pu2K12p3Hsux/r8XT56P2w3l3ex/WkvTrBw+5F3wp83Y5DVuf+OhrqQx2GHPRluMMYuSAcxBuIa0DAFwaQXyDwBuEbCE4SjcEphQLh21iwzkCPIDNDtacaoxlKSuaGc6kaSviGUOL/DiVIyYrUsyJ1BLMYgoWqTqRGIEjgLBAk+tdAnK8H0ipzuc6narqWefjiRqNGkV0JhRGvfjDfMho16gOTrRXVAavzQa3qYAilOtjXIc1oIpVoJNajaZQpxWSzSks3fmNwww+IwuYIMEg1mEah+iRsucna3wkp4WSd7oMkwQJRShXSnhNezEk9wb6VYEm2DWHy17MB4xdGo1ydIypLLy4Y4m4ZjWqVZOdTglAnNHbUKJZbBq4SmoXKwVYdCVC1UH0jKS6Fsq2nRYWhg79hhMIQqDLaC7ccUSi+vnCxtR8mB8UPigs/wh9XOgL44ggA3rVcdKCjb4BcDxkAgurlobWpBr3VGSSg3J5Uj9pab7bTzS39nGnTdv08DnPz9bTbLHqPPw/WY7f8w7TfDC+nacik61VfHw961ur14zFf7LXFqRfKDZe7Qi/8eM5+/AI="
    },
    {
      "name": "guardian_set_expired",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBGJwAABAMnAgIEAScCAwQAHwoAAgADgEQdAIBEgEQELgiARAABJQAAAFIlAAAAWi4CAAGARSgCAAIEgEUnAgMEATsOAAMAAigAgEMEAAMmJQAABbAeAgACAB4CAAMAMyoAAgADAAQnAgIBASQCAAQAAACDJQAABdkcCgEDACcCAQAALQgBBCcCBQQEAAgBBQEnAwQEAQAiBAIFLQoFBi0OAQYAIgYCBi0OAQYAIgYCBi0OAQYrAgAFAAAAAAAAAAACAAAAAAAAAAAtCAEGJwIHBAUACAEHAScDBgQBACIGAgctCgcILQ4BCAAiCAIILQ4BCAAiCAIILQ4BCAAiCAIILQ4FCC0IAQUAAAECAS0OBAUtCAEEAAABAgEtDgYELQgBBwAAAQIBJwIIBAAtDggHLQgBCQAAAQIBJwIKAQAtDgoJJwILACQnAgwEASQCAAoAAAGrIwAAAWQtCAENJwIOBAQACAEOAScDDQQBACINAg4tCg4PLQ4LDwAiDwIPLQ4BDwAiDwIPLQ4BDy0ODQUtDgYELQ4MBy0OCgkjAAACQC0KCAYjAAABtA0iAAaAQwANJAIADQAABSQjAAAByS0LBQYtCwQNLQsJDi0LDQ8AIg8CDy0ODw0tCAEPJwIQBAUACAEQAScDDwQBACINAhAnAhEEBAAiDwISPw8AEAASLgIABoADKACABAQABCUAAAXrLgiABQANACoNDBAtDgsQLQ4NBS0ODwQtDgwHLQ4OCSMAAAJALQsFBi0LBAstCwkNCioNCg4kAgAOAAACYicCDwQAPAYPASQCAAoAAAKqIwAAAm8nAg0EAi4CAAaAAygAgAQEAAQlAAAF6y4IgAUADgAqDg0PLQ4DDy0ODgUtDgsELQ4NBy0OCgkjAAADPy0KCAYjAAACsw0iAAaAQwALJAIACwAABJgjAAACyC0LBQYtCwQLLQsJDS0LCw4AIg4CDi0ODgstCAEOJwIPBAUACAEPAScDDgQBACILAg8nAhAEBAAiDgIRPw8ADwARLgIABoADKACABAQABCUAAAXrLgiABQALACoLDA8tDgMPLQ4LBS0ODgQtDgwHLQ4NCSMAAAM/LQsJBgoqBgoLJAIACwAAA1knAg0EADwGDQEtCggDIwAAA2INIgADgEMABiQCAAYAAAQMIwAAA3ctCwUDLQsEBi0LBwgtCwYLACILAgstDgsGLQgBCycCDQQFAAgBDQEnAwsEAQAiBgINJwIOBAQAIgsCDz8PAA0ADy0OAwUtDgsELQ4IBy0OAgkAKgsMAy0LAwIKKgIBAwoqAwoBJAIAAQAAA+glAAAGeS8KAAIAARwKAQMFHAoDAgAcCgIBBR4CAAIGDCoBAgMtCgMBJi0LBQYtCwQILQsHCy0LCQ0MKgMLDiQCAA4AAAQuIwAABIoAIggCDwAqDwMQLQsQDgAiBgIQACoQAxEtCxEPACoODxAuAgAIgAMoAIAEBAAFJQAABesuCIAFAA4AIg4CDwAqDwMRLQ4QES0OBgUtDg4ELQ4LBy0ODQkjAAAEigAqAwwGLQoGAyMAAANiLQsFCy0LBA0tCwcOLQsJDwwqBg4QJAIAEAAABLojAAAFFgAiDQIRACoRBhItCxIQACILAhIAKhIGEy0LExEAKhAREi4CAA2AAygAgAQEAAUlAAAF6y4IgAUAEAAiEAIRACoRBhMtDhITLQ4LBS0OEAQtDg4HLQ4PCSMAAAUWACoGDAstCgsGIwAAArMtCwUNLQsEDi0LBw8tCwkQDCoGDxEkAgARAAAFRiMAAAWiACIOAhIAKhIGEy0LExEAIg0CEwAqEwYULQsUEgAqERITLgIADoADKACABAQABSUAAAXrLgiABQARACIRAhIAKhIGFC0OExQtDg0FLQ4RBC0ODwctDhAJIwAABaIAKgYMDS0KDQYjAAABtCgAgAQEeAANAAAAgASAAyQAgAMAAAXYKgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmLgGAA4AGCwCABgACgAckAIAHAAAGBiMAAAYRLgCAA4AFIwAABnguAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAGZC4BgAqACC4EgAiACwEAgAoAAoAKAQCACwACgAsjAAAGMygBgAUEAAEDAIAGAAKABiMAAAZ4JioBAAEFAtxuJ4B2Ep08BAIBJg==",
      "debug_symbols": "tZnbbhs5DIbfxde5kERSlPoqi6JwU7cwYDiBmyywKPLuS2r0y3YWI3id9ib5TI/+4UmHGf/afNt9ff3xZX/8/vRz8+mvX5uvp/3hsP/x5fD0uH3ZPx3N+msT/E+VzSd+2MRgn9T/2+cYDCIZRIfSIeUOFA3EwSzJL+YIkA4SALBkWPKw1A5KgNKhJIB2qH4Lu3uKCZA7JHyVYCFYCBYOAAbUDkKA0iHjFlk7qIdcHaRDCQAGlA6VALoAhQjIHSIsUQC1Q2IALOJRkEHLYQPpoLAoLAUWd2yB0sEdW0AX4JAAfgtrBI4BwIDSoSUzG4gPt27hHAECqB1aTRuUDq2m1SF3aDVt0C0SIgCWCEuEJZkOBYfSgaSDV3mB3EEiwK+JDrVDJoB2UB+VDDyHCzDA72WJEs+hQ3ZXF8gdUk9vTj3hmXoJcpsgDXopsyRAr0VuyWQHAdQOLZkOLWNWAm2zQB1yhxQADOiZVyKALjlUjoCeVRVYBJYMS4ZFYVFdsqqFOtQA6LUoIQJ6LYq3lue5eGstUDq0mjr4zCVxcB2LtLSaNigdfMI2cMeoGPgqQeZY8fwsIIC6QA0EKB08hxwdcgdfSRaAhWAhWBgWhsVLSeqQO/g8XYABdlO2RqpeygXMZ7ZIq8+LBWBpi7K0VdmEJDQybUlOPiM6DZs7Lm2Eey7ZiXp2YmgpXIgHFZC7L23t98XEM2MkoDJsPhekjSgVVIetmp74dRGJNqog93ShFAcpiNKgYeNxHcugoSfjHnmM1b482Y4VBvGgAqo2IntOU+xTxkhAadh8HuW28flCvBANG5le9twnJozgCpIMwhIZl82kkaZBw1bGdWX4UoZexT0oYCxFxEspDOJBiJcI8ZIgNhLcY9lSFkJslBEv6bAp4qUyfBn+UUW8HOIgxMZYrIyGLY3rkgyCHmPFisxt7NvbwwaHly8vp93Ozy4Xpxk74zxvT7vjy+bT8fVweNj8vT28tot+Pm+P7f/L9mTfWh52x2/23wS/7w87p7eH8+iwPtSy5ltBG245yjokYshXInEiEtLQCJwuJOhKIk0ktJYMDbXFYojodSy0rkGJQukaxonXNKah1Ao3bFathiK/IZT8p0ORMqpS1qtS1iVUCyS08KoTdRII2eRBIMT80UBs3VoNZNbm2fZ5aOQSyhCRd25MejSzoM2zhAs/tFxrTHo0nlujnp0glmsFXlew0yiywRrjWUP+hxcCL9JFHP/xYtKgyn46XDqDy3nhoajXGjrpjZFOjnkopPROYdKfyZ6gEEgKdV1j0qGSMOGFwn0KVdEWUe6Lw3ZFxEEXFXmvkWYrqCTsA1FY79TIY/WTUu/ToDA0bMNe15BZd6XRXPkuhepHzaZQ5T4frja1vF7XNKkrc0Z/Ml/Md9tYbk8n80in3FlWGh1qWO7S+B2hRBodGrncN1M0jqVLJ/OV+M9qxJxHLFnLfRqqdD4nrM960o/OlJnCbTNlpnDrTOHw4faaprOeF56a1tM53eJFx1puLzpWt3iebK72YgN+WHfFi+PKdSw8a9HCY2MrF2WxJ747jzwprB15eHYOJU3j9FZ11Q+ebfMhFySV7HG8rB0BucxEwvkcGezhf1Vkdhi1l2pDROxd4qrIPBy9CCfRmojMjrR59Ii9Oj5PGXtyvb2+5fzklgvXtfrKpFeTnBcQY1kPhmcPKxpkPKxMMjKLxo4e50O+6MX0lduXsoDC2Luu+xbDjGxUlY8upxOF6dHlpiimCjdFcePx6b3CZ/u4fdyfrn53eXOp03779bDrH7+/Hh8vvn355xnf4Heb59PT4+7b62nnSucfb+zPXxTowR56P/s7OPuYKj+kWv1j9G/Nc+uzz2/uzL8="
    },
    {
      "name": "init",
      "is_unconstrained": true,
      "custom_attributes": ["public", "initializer"],
      "abi": {
        "parameters": [
          {
            "name": "chain_id",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 16
            },
            "visibility": "private"
          },
          {
            "name": "evm_chain_id",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 16
            },
            "visibility": "private"
          },
          {
            "name": "owner",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "receiver_address",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_address",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": ""
    },
    {
      "name": "parse_vaa_unconstrained",
      "is_unconstrained": true,
      "custom_attributes": ["utility"],
      "abi": {
        "parameters": [
          {
            "name": "bytes",
            "type": {
              "kind": "array",
              "length": 2000,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "actual_length",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "tuple",
            "fields": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              },
              {
                "kind": "array",
                "length": 13,
                "type": {
                  "kind": "array",
                  "length": 66,
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 8
                  }
                }
              },
              {
                "kind": "array",
                "length": 1860,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "visibility": "public"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1004672304334401604": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3206131020419630384": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3738765135689704617": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "10676044680617262041": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "11732781666457836689": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14101993474458164081": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15200354114977654233": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "15760694058516861966": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17226037485472400844": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "17610130137239148460": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": ""
    },
    {
      "name": "process_message",
      "is_unconstrained": true,
      "custom_attributes": ["utility"],
      "abi": {
        "parameters": [
          {
            "name": "message_ciphertext",
            "type": {
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec",
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 17,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "len",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "message_context",
            "type": {
              "kind": "struct",
              "path": "aztec::messages::processing::message_context::MessageContext",
              "fields": [
                {
                  "name": "tx_hash",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "unique_note_hashes_in_tx",
                  "type": {
                    "kind": "struct",
                    "path": "std::collections::bounded_vec::BoundedVec",
                    "fields": [
                      {
                        "name": "storage",
                        "type": {
                          "kind": "array",
                          "length": 64,
                          "type": {
                            "kind": "field"
                          }
                        }
                      },
                      {
                        "name": "len",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "first_nullifier_in_tx",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "recipient",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1004672304334401604": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3206131020419630384": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3738765135689704617": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "10676044680617262041": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "11732781666457836689": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14101993474458164081": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15200354114977654233": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "15760694058516861966": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17226037485472400844": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "17610130137239148460": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "TL3LsjS7jpz5LnvcgyRAXHhepQeyVl9kZVamMmtJo3p5rQAIuk+0P1edn45gBDwjI5G5/vOf/+f//a//67/9l3/77//ff/yPf/71f/7nP//1//+3f//3f/tv/+Xf/+P//r/+57/9x3//+//9z39+3/8T559/6f/xT/4J//vP+udf+fcf+edf6/f3X/37r/z9d//9d//91/751/cf7/9E/yf//o/fvz393/O7/133v3L/q/e/+/7X7n/9/jfuf+965663fr+BNSADOrAHbMAHYiAHZuU1K69Zec3Ka1Zes/KaldesvGblNSuvWVlmZZmVZVaWWVlmZZmVZVaWWVlmZZmVdVbWWVlnZZ2VdVbWWVlnZZ2VdVbWWXnPyntW3rPynpX3rLxn5T0r71l5z8p7VrZZ2WZlm5VtVrZZ2WZlm5VtVrZZ2WZln5V9VvZZ2Wdln5X9b2X5feADMZAD50L8BtaADOjAHpiVY1aOb+X1QQ6cC1+vNawBGdCBb+X9wbdyfuADMZAD58LXeg1/K6t8IAM6sAf+Vlb9wAdi4Fv527GvBz+QrwcbvpXPBzKgA3vABnwgBnLgXPh6sGFWXrPympXXrPz14F4f+EAM5MC58PVgwxqQAR3YA7OyzMoyK8usLLOyzso6K+usrLOyzso6K+usrLOyzso6K+9Zec/Ke1b+enDrB3vABnwgBnLgXPh6sGENyMCsbLOyzco2K9usbLOyzco+K/us7LOyz8o+K/us7LOyz8o+K/usHLNyzMoxK8esHLNyzMoxK8esHLNyzMo5K+esnLNyzso5K+esnLNyzso5K+esfGblMyufWfnMymdWPrPymZXPrHxm5XNX1t9vYA3IgA7sARvwgRjIgW/lv6bWrwcb1oAM6MAesAEfiIEcmJVlVpZZWWbl6sHzwR6wgb+VbX8QAzlwLnw92LAGZEAH9oANzMo6K+usrLPyvomkew3IgA7sARvwgRjIgZt1arOyzco2K9us/PWgxQc24AMxkAPnwteDDWtABnRgVvZZ2Wdln5V9Vv560P5eSvTrwYY1IAM6sAdswAdiIAdm5ZyVc1bOWfnrQbcP9oAN+EAM5MC58PVgwxqQgVn5zMpnVj6z8pmVz6x87sr79xtYAzKgA3vABnwgBnJgVl6z8pqV16y8ZuU1K69Zec3Ka1Zes/KalWVWlllZZmWZlWVWlllZZmWZlWVWlllZZ2WdlXVW1llZZ2WdlXVW1llZZ2WdlfesvGflPSvvWXnPyntW3rPynpX3rLxnZZuVbVa2WdlmZZuVbVa2WdlmZZuVbVb2WdlnZZ+VfVb2WdlnZZ+VfVb2Wdln5ZiVY1aOWTlm5ZiVY1aOWTlm5ZiVY1bOWTln5ZyVpwf39OCeHtzTg3t6cE8P7unBPT24pwf39OCeHtzTg3t6cE8P7unBPT24pwdtetCmB2160KYHbXrQpgdtetCmB2160KYHbXrQpgdtetCmB2160KYHbXrQpgdtetCmB2160KYHbXrQpgdtetCmB2160KYHbXrQpgdtetCmB2160KYHbXrQpgdtetCmB2160KYHbXrQpgdtetCmB2160KYHbXrQpgdtetCmB2160KYHbXrQpgdtetCmB2160KYHbXrQpgdtetCmB2160KYHbXrQpgdtetCmB2160KYHbXrQpgdtetCmB2160KYHbXrQpgdtetCmB2160KYHbXrQpgdtetCmB2160KYHbXrQpgdtetCmB2160KYHbXrQpgdtetCmB2160KYHfXrQpwd9etCnB3160KcHfXrQpwd9etCnB3160KcHfXrQpwd9etCnB3160KcHfXrQpwd9etCnB3160KcHfXrQpwd9etCnB3160KcHfXrQpwd9etCnB3160KcHfXrQpwd9etCnB3160KcHfXrQpwd9etCnB3160KcHfXrQpwd9etCnB3160KcHfXrQpwd9etCnB3160KcHfXrQpwd9etCnB3160KcHfXrQpwd9etCnB3160KcHfXrQpwd9etCnB3160KcHfXrQpwd9etCnB3160KcHfXrQpwd9etCnB3160KcHfXrQpwd9etCnB3160KcHfXrQpwd9etCnB2N6MKYHY3owpgdjejCmB2N6MKYHY3owpgdjejCmB2N6MKYHY3owpgdjejCmB2N6MKYHY3owpgdjejCmB2N6MKYHY3owpgdjejCmB2N6MKYHY3owpgdjejCmB2N6MKYHY3owpgdjejCmB2N6MKYHY3owpgdjejCmB2N6MKYHY3owpgdjejCmB2N6MKYHY3owpgdjejCmB2N6MKYHY3owpgdjejCmB2N6MKYHY3owpgdjejCmB2N6MKYHY3owpgdjejCmB2N6MKYHY3owpgdjejCmB2N6MKYHY3owpgdjejCmB2N6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"
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4111885691990129848": {
            "error_kind": "string",
            "string": "Function _assert_is_owner can only be called internally"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5389888835557273632": {
            "error_kind": "string",
            "string": "insufficient fee"
          },
          "10492081608786484886": {
            "error_kind": "fmtstring",
            "length": 27,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "16930197311201387584": {
            "error_kind": "string",
            "string": "Function _publish_message can only be called internally"
          },
          "16994898036605678414": {
            "error_kind": "string",
            "string": "caller is not owner"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": ""
    },
    {
      "name": "publish_message_in_private",
      "is_unconstrained": false,
      "custom_attributes": ["private"],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          },
          {
            "name": "payloads",
            "type": {
              "kind": "array",
              "length": 8,
              "type": {
                "kind": "array",
                "length": 31,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            },
            "visibility": "private"
          },
          {
            "name": "message_fee",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "consistency",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "include_by_timestamp",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 64
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                          "fields": [
                            {
                              "name": "request",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                                "fields": [
                                  {
                                    "name": "pk_m",
                                    "type": {
                                      "kind": "struct",
                                      "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                      "fields": [
                                        {
                                          "name": "x",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "y",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "is_infinite",
                                          "type": {
                                            "kind": "boolean"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "sk_app",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app_generator",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "note_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 5,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                          "fields": [
                            {
                              "name": "call_context",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::call_context::CallContext",
                                "fields": [
                                  {
                                    "name": "msg_sender",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "contract_address",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "function_selector",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "is_static_call",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "returns_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "start_side_effect_counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "end_side_effect_counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                                "fields": [
                                  {
                                    "name": "msg_sender",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "contract_address",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "is_static_call",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  },
                                  {
                                    "name": "calldata_hash",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 2,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                                "fields": [
                                  {
                                    "name": "recipient",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "content",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                          "fields": [
                            {
                              "name": "log",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::log::Log",
                                "fields": [
                                  {
                                    "name": "fields",
                                    "type": {
                                      "kind": "array",
                                      "length": 18,
                                      "type": {
                                        "kind": "field"
                                      }
                                    }
                                  },
                                  {
                                    "name": "length",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "note_hash_counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 1,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::log_hash::LogHash",
                                "fields": [
                                  {
                                    "name": "value",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "length",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1004672304334401604": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3206131020419630384": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3738765135689704617": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "4456244908619624852": {
            "error_kind": "string",
            "string": "Preimage mismatch"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7136043998373234005": {
            "error_kind": "string",
            "string": "Field failed to decompose into specified 40 limbs"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          },
          "10676044680617262041": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "11732781666457836689": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14101993474458164081": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15200354114977654233": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "15760694058516861966": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17226037485472400844": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "17610130137239148460": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "verification_key": "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\nAAAFiSRi70jt/BTMpcaOrm4="
    },
    {
      "name": "publish_message_in_public",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [
          {
            "name": "nonce",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 64
            },
            "visibility": "private"
          },
          {
            "name": "payloads",
            "type": {
              "kind": "array",
              "length": 8,
              "type": {
                "kind": "array",
                "length": 31,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            },
            "visibility": "private"
          },
          {
            "name": "message_fee",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 128
            },
            "visibility": "private"
          },
          {
            "name": "consistency",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "token_nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 64
          },
          "visibility": "public"
        },
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5389888835557273632": {
            "error_kind": "string",
            "string": "insufficient fee"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "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"
    },
    {
      "name": "set_guardian1",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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ACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQtClxXIwAADOMMKlcBAiQCAAIAAAz2IwAADPUmHApXAgAAKlYCAwAiVAIEACoEVwUtCwUCMAoAAgADACpXYAItCgJXIwAADOMtC1laLQtYXy0LW2EtC11iDCpXYWMkAgBjAAANRCMAAA2gACJfAmQAKmRXZS0LZWMAIloCZQAqZVdmLQtmZAAqY2RlLgIAX4ADKACABAQABSUAAA8BLgiABQBjACJjAmQAKmRXZi0OZWYtDlpZLQ5jWC0OYVstDmJdIwAADaAAKldgWi0KWlcjAAAHoC0LWV8tC1hhLQtbYi0LXWMMKlpiZCQCAGQAAA3QIwAADiwAImECZQAqZVpmLQtmZAAiXwJmACpmWmctC2dlACpkZWYuAgBhgAMoAIAEBAAFJQAADwEuCIAFAGQAImQCZQAqZVpnLQ5mZy0OX1ktDmRYLQ5iWy0OY10jAAAOLAAqWmBfLQpfWiMAAAbxLQtZYS0LWGItC1tjLQtdZAwqWmNlJAIAZQAADlwjAAAOuAAiYgJmACpmWmctC2dlACJhAmcAKmdaaC0LaGYAKmVmZy4CAGKAAygAgAQEAAUlAAAPAS4IgAUAZQAiZQJmACpmWmgtDmdoLQ5hWS0OZVgtDmNbLQ5kXSMAAA64ACpaYGEtCmFaIwAABfIoAIAEBHgADQAAAIAEgAMkAIADAAAO7ioBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJi4BgAOABgsAgAYAAoAHJACABwAADxwjAAAPJy4AgAOABSMAAA+OLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAD3ouAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAD0koAYAFBAABAwCABgACgAYjAAAPjiYqAQABBQLcbieAdhKdPAQCASY=",
      "debug_symbols": "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"
    },
    {
      "name": "set_guardian10",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBICZJwAABAMnAlYEVScCVwQAHwoAVgBXgEQdAIBEgEQCHQCARYBFAh0AgEaARgIdAIBHgEcCHQCASIBIAh0AgEmASQIdAIBKgEoCHQCAS4BLAh0AgEyATAIdAIBNgE0CHQCAToBOAh0AgE+ATwIdAIBQgFACHQCAUYBRAh0AgFKAUgIdAIBTgFMCHQCAVIBUAh0AgFWAVQIdAIBWgFYCHQCAV4BXAh0AgFiAWAIdAIBZgFkCHQCAWoBaAh0AgFuAWwIdAIBcgFwCHQCAXYBdAh0AgF6AXgIdAIBfgF8CHQCAYIBgAh0AgGGAYQIdAIBigGICHQCAY4BjAh0AgGSAZAIdAIBlgGUCHQCAZoBmAh0AgGeAZwIdAIBogGgCHQCAaYBpAh0AgGqAagIdAIBrgGsCHQCAbIBsAh0AgG2AbQIdAIBugG4CHQCAb4BvAh0AgHCAcAIdAIBxgHECHQCAcoByAh0AgHOAcwIdAIB0gHQCHQCAdYB1Ah0AgHaAdgIdAIB3gHcCHQCAeIB4Ah0AgHmAeQIdAIB6gHoCHQCAe4B7Ah0AgHyAfAIdAIB9gH0CHQCAfoB+Ah0AgH+AfwIdAICAgIACHQCAgYCBAh0AgIKAggIdAICDgIMCHQCAhICEAh0AgIWAhQIdAICGgIYCHQCAh4CHAh0AgIiAiAIdAICJgIkCHQCAioCKAh0AgIuAiwIdAICMgIwCHQCAjYCNAh0AgI6AjgIdAICPgI8CHQCAkICQAh0AgJGAkQIdAICSgJICHQCAk4CTAh0AgJSAlAIdAICVgJUCHQCAloCWAh0AgJeAlwIdAICYgJgELgiARAABLgiARQACLgiARgADLgiARwAELgiASAAFLgiASQAGLgiASgAHLgiASwAILgiATAAJLgiATQAKLgiATgALLgiATwAMLgiAUAANLgiAUQAOLgiAUgAPLgiAUwAQLgiAVAARLgiAVQASLgiAVgATLgiAVwAULgiAWAAVLgiAWQAWLgiAWgAXLgiAWwAYLgiAXAAZLgiAXQAaLgiAXgAbLgiAXwAcLgiAYAAdLgiAYQAeLgiAYgAfLgiAYwAgLgiAZAAhLgiAZQAiLgiAZgAjLgiAZwAkLgiAaAAlLgiAaQAmLgiAagAnLgiAawAoLgiAbAApLgiAbQAqLgiAbgArLgiAbwAsLgiAcAAtLgiAcQAuLgiAcgAvLgiAcwAwLgiAdAAxLgiAdQAyLgiAdgAzLgiAdwA0LgiAeAA1LgiAeQA2LgiAegA3LgiAewA4LgiAfAA5LgiAfQA6LgiAfgA7LgiAfwA8LgiAgAA9LgiAgQA+LgiAggA/LgiAgwBALgiAhABBLgiAhQBCLgiAhgBDLgiAhwBELgiAiABFLgiAiQBGLgiAigBHLgiAiwBILgiAjABJLgiAjQBKLgiAjgBLLgiAjwBMLgiAkABNLgiAkQBOLgiAkgBPLgiAkwBQLgiAlABRLgiAlQBSLgiAlgBTLgiAlwBULgiAmABVJQAABJAlAAAEmCgCAAEEgJknAgIEADsOAAIAASgAgEMEAAMmJQAADsYeAgBWAB4CAFcAMyoAVgBXAFgnAlYBASQCAFgAAATBJQAADu8cClVXACcCVQAALQgBWCcCWQQEAAgBWQEnA1gEAQAiWAJZLQpZWi0OVVoAIloCWi0OVVoAIloCWi0OVVorAgBZAAAAAAAAAAACAAAAAAAAAAAtCAFaJwJbBAUACAFbAScDWgQBACJaAlstCltcLQ5VXAAiXAJcLQ5VXAAiXAJcLQ5VXAAiXAJcLQ5ZXC0IAVkAAAECAS0OWFktCAFYAAABAgEtDlpYLQgBWwAAAQIBJwJcBAAtDlxbLQgBXQAAAQIBJwJeAQAtDl5dJwJfABonAmAEASQCAF4AAAXpIwAABaItCAFhJwJiBAQACAFiAScDYQQBACJhAmItCmJjLQ5fYwAiYwJjLQ5VYwAiYwJjLQ5VYy0OYVktDlpYLQ5gWy0OXl0jAAAGfi0KXFojAAAF8g0iAFqAQwBhJAIAYQAADjojAAAGBy0LWVotC1hhLQtdYi0LYWMAImMCYy0OY2EtCAFjJwJkBAUACAFkAScDYwQBACJhAmQnAmUEBAAiYwJmPw8AZABmLgIAWoADKACABAQABCUAAA8BLgiABQBhACphYGQtDl9kLQ5hWS0OY1gtDmBbLQ5iXSMAAAZ+LQtZWi0LWF8tC11hCiphXmIkAgBiAAAGoCcCYwQAPAZjASQCAF4AAAboIwAABq0nAmEEAi4CAFqAAygAgAQEAAQlAAAPAS4IgAUAYgAqYmFjLQ5XYy0OYlktDl9YLQ5hWy0OXl0jAAAHfS0KXFojAAAG8Q0iAFqAQwBfJAIAXwAADa4jAAAHBi0LWVotC1hfLQtdYS0LX2IAImICYi0OYl8tCAFiJwJjBAUACAFjAScDYgQBACJfAmMnAmQEBAAiYgJlPw8AYwBlLgIAWoADKACABAQABCUAAA8BLgiABQBfACpfYGMtDldjLQ5fWS0OYlgtDmBbLQ5hXSMAAAd9LQtdWgoqWl5fJAIAXwAAB5cnAmEEADwGYQEtClxXIwAAB6ANIgBXgEMAWiQCAFoAAA0iIwAAB7UtC1laLQtYXy0LW2EtC19iACJiAmItDmJfLQgBYicCYwQFAAgBYwEnA2IEAQAiXwJjJwJkBAQAImICZT8PAGMAZS0OWlktDmJYLQ5hWy0OVl0AKmJgWC0LWFYKKlZVWAoqWF5VJAIAVQAACCYlAAAPjxwKAVUAHAoCAQAcCgMCABwKBAMAHAoFBAAcCgYFABwKBwYAHAoIBwAcCgkIABwKCgkAHAoLCgAcCgwLABwKDQwAHAoODQAcCg8OABwKEA8AHAoREAAcChIRABwKExIAHAoUEwAcChUUABwKFhUAHAoXFgAcChgXABwKGRgAHAoaGQAcChsaABwKHBsAHAodHAAcCh4dABwKHx4AHAogHwAcCiEgABwKIiEAHAojIgAcCiQjABwKJSQAHAomJQAcCicmABwKKCcAHAopKAAcCiopABwKKyoAHAosKwAcCi0sABwKLi0AHAovLgAcCjAvABwKMTAAHAoyMQAcCjMyABwKNDMAHAo1NAAcCjY1ABwKNzYAHAo4NwAcCjk4ABwKOjkAHAo7OgAcCjw7ABwKPTwAHAo+PQAcCj8+ABwKQD8AHApBQAAcCkJBABwKQ0IAHApEQwAcCkVEABwKRkUAHApHRgAcCkhHABwKSUgAHApKSQAcCktKABwKTEsAHApNTAAcCk5NABwKT04AHApQTwAcClFQABwKUlEAHApTUgAcClRTAC0IAVQnAlgEVQAIAVgBJwNUBAEAIlQCWC0KWFktDlVZACJZAlktDgFZACJZAlktDgJZACJZAlktDgNZACJZAlktDgRZACJZAlktDgVZACJZAlktDgZZACJZAlktDgdZACJZAlktDghZACJZAlktDglZACJZAlktDgpZACJZAlktDgtZACJZAlktDgxZACJZAlktDg1ZACJZAlktDg5ZACJZAlktDg9ZACJZAlktDhBZACJZAlktDhFZACJZAlktDhJZACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQtClxXIwAADOMMKlcBAiQCAAIAAAz2IwAADPUmHApXAgAAKlYCAwAiVAIEACoEVwUtCwUCMAoAAgADACpXYAItCgJXIwAADOMtC1laLQtYXy0LW2EtC11iDCpXYWMkAgBjAAANRCMAAA2gACJfAmQAKmRXZS0LZWMAIloCZQAqZVdmLQtmZAAqY2RlLgIAX4ADKACABAQABSUAAA8BLgiABQBjACJjAmQAKmRXZi0OZWYtDlpZLQ5jWC0OYVstDmJdIwAADaAAKldgWi0KWlcjAAAHoC0LWV8tC1hhLQtbYi0LXWMMKlpiZCQCAGQAAA3QIwAADiwAImECZQAqZVpmLQtmZAAiXwJmACpmWmctC2dlACpkZWYuAgBhgAMoAIAEBAAFJQAADwEuCIAFAGQAImQCZQAqZVpnLQ5mZy0OX1ktDmRYLQ5iWy0OY10jAAAOLAAqWmBfLQpfWiMAAAbxLQtZYS0LWGItC1tjLQtdZAwqWmNlJAIAZQAADlwjAAAOuAAiYgJmACpmWmctC2dlACJhAmcAKmdaaC0LaGYAKmVmZy4CAGKAAygAgAQEAAUlAAAPAS4IgAUAZQAiZQJmACpmWmgtDmdoLQ5hWS0OZVgtDmNbLQ5kXSMAAA64ACpaYGEtCmFaIwAABfIoAIAEBHgADQAAAIAEgAMkAIADAAAO7ioBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJi4BgAOABgsAgAYAAoAHJACABwAADxwjAAAPJy4AgAOABSMAAA+OLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAD3ouAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAD0koAYAFBAABAwCABgACgAYjAAAPjiYqAQABBQLcbieAdhKdPAQCASY=",
      "debug_symbols": "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"
    },
    {
      "name": "set_guardian11",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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ACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQtClxXIwAADOMMKlcBAiQCAAIAAAz2IwAADPUmHApXAgAAKlYCAwAiVAIEACoEVwUtCwUCMAoAAgADACpXYAItCgJXIwAADOMtC1laLQtYXy0LW2EtC11iDCpXYWMkAgBjAAANRCMAAA2gACJfAmQAKmRXZS0LZWMAIloCZQAqZVdmLQtmZAAqY2RlLgIAX4ADKACABAQABSUAAA8BLgiABQBjACJjAmQAKmRXZi0OZWYtDlpZLQ5jWC0OYVstDmJdIwAADaAAKldgWi0KWlcjAAAHoC0LWV8tC1hhLQtbYi0LXWMMKlpiZCQCAGQAAA3QIwAADiwAImECZQAqZVpmLQtmZAAiXwJmACpmWmctC2dlACpkZWYuAgBhgAMoAIAEBAAFJQAADwEuCIAFAGQAImQCZQAqZVpnLQ5mZy0OX1ktDmRYLQ5iWy0OY10jAAAOLAAqWmBfLQpfWiMAAAbxLQtZYS0LWGItC1tjLQtdZAwqWmNlJAIAZQAADlwjAAAOuAAiYgJmACpmWmctC2dlACJhAmcAKmdaaC0LaGYAKmVmZy4CAGKAAygAgAQEAAUlAAAPAS4IgAUAZQAiZQJmACpmWmgtDmdoLQ5hWS0OZVgtDmNbLQ5kXSMAAA64ACpaYGEtCmFaIwAABfIoAIAEBHgADQAAAIAEgAMkAIADAAAO7ioBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJi4BgAOABgsAgAYAAoAHJACABwAADxwjAAAPJy4AgAOABSMAAA+OLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAD3ouAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAD0koAYAFBAABAwCABgACgAYjAAAPjiYqAQABBQLcbieAdhKdPAQCASY=",
      "debug_symbols": "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"
    },
    {
      "name": "set_guardian12",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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ACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQtClxXIwAADOMMKlcBAiQCAAIAAAz2IwAADPUmHApXAgAAKlYCAwAiVAIEACoEVwUtCwUCMAoAAgADACpXYAItCgJXIwAADOMtC1laLQtYXy0LW2EtC11iDCpXYWMkAgBjAAANRCMAAA2gACJfAmQAKmRXZS0LZWMAIloCZQAqZVdmLQtmZAAqY2RlLgIAX4ADKACABAQABSUAAA8BLgiABQBjACJjAmQAKmRXZi0OZWYtDlpZLQ5jWC0OYVstDmJdIwAADaAAKldgWi0KWlcjAAAHoC0LWV8tC1hhLQtbYi0LXWMMKlpiZCQCAGQAAA3QIwAADiwAImECZQAqZVpmLQtmZAAiXwJmACpmWmctC2dlACpkZWYuAgBhgAMoAIAEBAAFJQAADwEuCIAFAGQAImQCZQAqZVpnLQ5mZy0OX1ktDmRYLQ5iWy0OY10jAAAOLAAqWmBfLQpfWiMAAAbxLQtZYS0LWGItC1tjLQtdZAwqWmNlJAIAZQAADlwjAAAOuAAiYgJmACpmWmctC2dlACJhAmcAKmdaaC0LaGYAKmVmZy4CAGKAAygAgAQEAAUlAAAPAS4IgAUAZQAiZQJmACpmWmgtDmdoLQ5hWS0OZVgtDmNbLQ5kXSMAAA64ACpaYGEtCmFaIwAABfIoAIAEBHgADQAAAIAEgAMkAIADAAAO7ioBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJi4BgAOABgsAgAYAAoAHJACABwAADxwjAAAPJy4AgAOABSMAAA+OLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAD3ouAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAD0koAYAFBAABAwCABgACgAYjAAAPjiYqAQABBQLcbieAdhKdPAQCASY=",
      "debug_symbols": "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"
    },
    {
      "name": "set_guardian13",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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ACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQtClxXIwAADOMMKlcBAiQCAAIAAAz2IwAADPUmHApXAgAAKlYCAwAiVAIEACoEVwUtCwUCMAoAAgADACpXYAItCgJXIwAADOMtC1laLQtYXy0LW2EtC11iDCpXYWMkAgBjAAANRCMAAA2gACJfAmQAKmRXZS0LZWMAIloCZQAqZVdmLQtmZAAqY2RlLgIAX4ADKACABAQABSUAAA8BLgiABQBjACJjAmQAKmRXZi0OZWYtDlpZLQ5jWC0OYVstDmJdIwAADaAAKldgWi0KWlcjAAAHoC0LWV8tC1hhLQtbYi0LXWMMKlpiZCQCAGQAAA3QIwAADiwAImECZQAqZVpmLQtmZAAiXwJmACpmWmctC2dlACpkZWYuAgBhgAMoAIAEBAAFJQAADwEuCIAFAGQAImQCZQAqZVpnLQ5mZy0OX1ktDmRYLQ5iWy0OY10jAAAOLAAqWmBfLQpfWiMAAAbxLQtZYS0LWGItC1tjLQtdZAwqWmNlJAIAZQAADlwjAAAOuAAiYgJmACpmWmctC2dlACJhAmcAKmdaaC0LaGYAKmVmZy4CAGKAAygAgAQEAAUlAAAPAS4IgAUAZQAiZQJmACpmWmgtDmdoLQ5hWS0OZVgtDmNbLQ5kXSMAAA64ACpaYGEtCmFaIwAABfIoAIAEBHgADQAAAIAEgAMkAIADAAAO7ioBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJi4BgAOABgsAgAYAAoAHJACABwAADxwjAAAPJy4AgAOABSMAAA+OLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAD3ouAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAD0koAYAFBAABAwCABgACgAYjAAAPjiYqAQABBQLcbieAdhKdPAQCASY=",
      "debug_symbols": "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"
    },
    {
      "name": "set_guardian14",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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ACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQtClxXIwAADOMMKlcBAiQCAAIAAAz2IwAADPUmHApXAgAAKlYCAwAiVAIEACoEVwUtCwUCMAoAAgADACpXYAItCgJXIwAADOMtC1laLQtYXy0LW2EtC11iDCpXYWMkAgBjAAANRCMAAA2gACJfAmQAKmRXZS0LZWMAIloCZQAqZVdmLQtmZAAqY2RlLgIAX4ADKACABAQABSUAAA8BLgiABQBjACJjAmQAKmRXZi0OZWYtDlpZLQ5jWC0OYVstDmJdIwAADaAAKldgWi0KWlcjAAAHoC0LWV8tC1hhLQtbYi0LXWMMKlpiZCQCAGQAAA3QIwAADiwAImECZQAqZVpmLQtmZAAiXwJmACpmWmctC2dlACpkZWYuAgBhgAMoAIAEBAAFJQAADwEuCIAFAGQAImQCZQAqZVpnLQ5mZy0OX1ktDmRYLQ5iWy0OY10jAAAOLAAqWmBfLQpfWiMAAAbxLQtZYS0LWGItC1tjLQtdZAwqWmNlJAIAZQAADlwjAAAOuAAiYgJmACpmWmctC2dlACJhAmcAKmdaaC0LaGYAKmVmZy4CAGKAAygAgAQEAAUlAAAPAS4IgAUAZQAiZQJmACpmWmgtDmdoLQ5hWS0OZVgtDmNbLQ5kXSMAAA64ACpaYGEtCmFaIwAABfIoAIAEBHgADQAAAIAEgAMkAIADAAAO7ioBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJi4BgAOABgsAgAYAAoAHJACABwAADxwjAAAPJy4AgAOABSMAAA+OLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAD3ouAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAD0koAYAFBAABAwCABgACgAYjAAAPjiYqAQABBQLcbieAdhKdPAQCASY=",
      "debug_symbols": "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"
    },
    {
      "name": "set_guardian15",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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ACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQtClxXIwAADOMMKlcBAiQCAAIAAAz2IwAADPUmHApXAgAAKlYCAwAiVAIEACoEVwUtCwUCMAoAAgADACpXYAItCgJXIwAADOMtC1laLQtYXy0LW2EtC11iDCpXYWMkAgBjAAANRCMAAA2gACJfAmQAKmRXZS0LZWMAIloCZQAqZVdmLQtmZAAqY2RlLgIAX4ADKACABAQABSUAAA8BLgiABQBjACJjAmQAKmRXZi0OZWYtDlpZLQ5jWC0OYVstDmJdIwAADaAAKldgWi0KWlcjAAAHoC0LWV8tC1hhLQtbYi0LXWMMKlpiZCQCAGQAAA3QIwAADiwAImECZQAqZVpmLQtmZAAiXwJmACpmWmctC2dlACpkZWYuAgBhgAMoAIAEBAAFJQAADwEuCIAFAGQAImQCZQAqZVpnLQ5mZy0OX1ktDmRYLQ5iWy0OY10jAAAOLAAqWmBfLQpfWiMAAAbxLQtZYS0LWGItC1tjLQtdZAwqWmNlJAIAZQAADlwjAAAOuAAiYgJmACpmWmctC2dlACJhAmcAKmdaaC0LaGYAKmVmZy4CAGKAAygAgAQEAAUlAAAPAS4IgAUAZQAiZQJmACpmWmgtDmdoLQ5hWS0OZVgtDmNbLQ5kXSMAAA64ACpaYGEtCmFaIwAABfIoAIAEBHgADQAAAIAEgAMkAIADAAAO7ioBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJi4BgAOABgsAgAYAAoAHJACABwAADxwjAAAPJy4AgAOABSMAAA+OLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAD3ouAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAD0koAYAFBAABAwCABgACgAYjAAAPjiYqAQABBQLcbieAdhKdPAQCASY=",
      "debug_symbols": "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"
    },
    {
      "name": "set_guardian16",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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ACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQtClxXIwAADOMMKlcBAiQCAAIAAAz2IwAADPUmHApXAgAAKlYCAwAiVAIEACoEVwUtCwUCMAoAAgADACpXYAItCgJXIwAADOMtC1laLQtYXy0LW2EtC11iDCpXYWMkAgBjAAANRCMAAA2gACJfAmQAKmRXZS0LZWMAIloCZQAqZVdmLQtmZAAqY2RlLgIAX4ADKACABAQABSUAAA8BLgiABQBjACJjAmQAKmRXZi0OZWYtDlpZLQ5jWC0OYVstDmJdIwAADaAAKldgWi0KWlcjAAAHoC0LWV8tC1hhLQtbYi0LXWMMKlpiZCQCAGQAAA3QIwAADiwAImECZQAqZVpmLQtmZAAiXwJmACpmWmctC2dlACpkZWYuAgBhgAMoAIAEBAAFJQAADwEuCIAFAGQAImQCZQAqZVpnLQ5mZy0OX1ktDmRYLQ5iWy0OY10jAAAOLAAqWmBfLQpfWiMAAAbxLQtZYS0LWGItC1tjLQtdZAwqWmNlJAIAZQAADlwjAAAOuAAiYgJmACpmWmctC2dlACJhAmcAKmdaaC0LaGYAKmVmZy4CAGKAAygAgAQEAAUlAAAPAS4IgAUAZQAiZQJmACpmWmgtDmdoLQ5hWS0OZVgtDmNbLQ5kXSMAAA64ACpaYGEtCmFaIwAABfIoAIAEBHgADQAAAIAEgAMkAIADAAAO7ioBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJi4BgAOABgsAgAYAAoAHJACABwAADxwjAAAPJy4AgAOABSMAAA+OLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAD3ouAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAD0koAYAFBAABAwCABgACgAYjAAAPjiYqAQABBQLcbieAdhKdPAQCASY=",
      "debug_symbols": "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"
    },
    {
      "name": "set_guardian17",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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ACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQtClxXIwAADOMMKlcBAiQCAAIAAAz2IwAADPUmHApXAgAAKlYCAwAiVAIEACoEVwUtCwUCMAoAAgADACpXYAItCgJXIwAADOMtC1laLQtYXy0LW2EtC11iDCpXYWMkAgBjAAANRCMAAA2gACJfAmQAKmRXZS0LZWMAIloCZQAqZVdmLQtmZAAqY2RlLgIAX4ADKACABAQABSUAAA8BLgiABQBjACJjAmQAKmRXZi0OZWYtDlpZLQ5jWC0OYVstDmJdIwAADaAAKldgWi0KWlcjAAAHoC0LWV8tC1hhLQtbYi0LXWMMKlpiZCQCAGQAAA3QIwAADiwAImECZQAqZVpmLQtmZAAiXwJmACpmWmctC2dlACpkZWYuAgBhgAMoAIAEBAAFJQAADwEuCIAFAGQAImQCZQAqZVpnLQ5mZy0OX1ktDmRYLQ5iWy0OY10jAAAOLAAqWmBfLQpfWiMAAAbxLQtZYS0LWGItC1tjLQtdZAwqWmNlJAIAZQAADlwjAAAOuAAiYgJmACpmWmctC2dlACJhAmcAKmdaaC0LaGYAKmVmZy4CAGKAAygAgAQEAAUlAAAPAS4IgAUAZQAiZQJmACpmWmgtDmdoLQ5hWS0OZVgtDmNbLQ5kXSMAAA64ACpaYGEtCmFaIwAABfIoAIAEBHgADQAAAIAEgAMkAIADAAAO7ioBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJi4BgAOABgsAgAYAAoAHJACABwAADxwjAAAPJy4AgAOABSMAAA+OLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAD3ouAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAD0koAYAFBAABAwCABgACgAYjAAAPjiYqAQABBQLcbieAdhKdPAQCASY=",
      "debug_symbols": "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"
    },
    {
      "name": "set_guardian18",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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ACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQtClxXIwAADOMMKlcBAiQCAAIAAAz2IwAADPUmHApXAgAAKlYCAwAiVAIEACoEVwUtCwUCMAoAAgADACpXYAItCgJXIwAADOMtC1laLQtYXy0LW2EtC11iDCpXYWMkAgBjAAANRCMAAA2gACJfAmQAKmRXZS0LZWMAIloCZQAqZVdmLQtmZAAqY2RlLgIAX4ADKACABAQABSUAAA8BLgiABQBjACJjAmQAKmRXZi0OZWYtDlpZLQ5jWC0OYVstDmJdIwAADaAAKldgWi0KWlcjAAAHoC0LWV8tC1hhLQtbYi0LXWMMKlpiZCQCAGQAAA3QIwAADiwAImECZQAqZVpmLQtmZAAiXwJmACpmWmctC2dlACpkZWYuAgBhgAMoAIAEBAAFJQAADwEuCIAFAGQAImQCZQAqZVpnLQ5mZy0OX1ktDmRYLQ5iWy0OY10jAAAOLAAqWmBfLQpfWiMAAAbxLQtZYS0LWGItC1tjLQtdZAwqWmNlJAIAZQAADlwjAAAOuAAiYgJmACpmWmctC2dlACJhAmcAKmdaaC0LaGYAKmVmZy4CAGKAAygAgAQEAAUlAAAPAS4IgAUAZQAiZQJmACpmWmgtDmdoLQ5hWS0OZVgtDmNbLQ5kXSMAAA64ACpaYGEtCmFaIwAABfIoAIAEBHgADQAAAIAEgAMkAIADAAAO7ioBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJi4BgAOABgsAgAYAAoAHJACABwAADxwjAAAPJy4AgAOABSMAAA+OLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAD3ouAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAD0koAYAFBAABAwCABgACgAYjAAAPjiYqAQABBQLcbieAdhKdPAQCASY=",
      "debug_symbols": "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"
    },
    {
      "name": "set_guardian19",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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ACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQtClxXIwAADOMMKlcBAiQCAAIAAAz2IwAADPUmHApXAgAAKlYCAwAiVAIEACoEVwUtCwUCMAoAAgADACpXYAItCgJXIwAADOMtC1laLQtYXy0LW2EtC11iDCpXYWMkAgBjAAANRCMAAA2gACJfAmQAKmRXZS0LZWMAIloCZQAqZVdmLQtmZAAqY2RlLgIAX4ADKACABAQABSUAAA8BLgiABQBjACJjAmQAKmRXZi0OZWYtDlpZLQ5jWC0OYVstDmJdIwAADaAAKldgWi0KWlcjAAAHoC0LWV8tC1hhLQtbYi0LXWMMKlpiZCQCAGQAAA3QIwAADiwAImECZQAqZVpmLQtmZAAiXwJmACpmWmctC2dlACpkZWYuAgBhgAMoAIAEBAAFJQAADwEuCIAFAGQAImQCZQAqZVpnLQ5mZy0OX1ktDmRYLQ5iWy0OY10jAAAOLAAqWmBfLQpfWiMAAAbxLQtZYS0LWGItC1tjLQtdZAwqWmNlJAIAZQAADlwjAAAOuAAiYgJmACpmWmctC2dlACJhAmcAKmdaaC0LaGYAKmVmZy4CAGKAAygAgAQEAAUlAAAPAS4IgAUAZQAiZQJmACpmWmgtDmdoLQ5hWS0OZVgtDmNbLQ5kXSMAAA64ACpaYGEtCmFaIwAABfIoAIAEBHgADQAAAIAEgAMkAIADAAAO7ioBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJi4BgAOABgsAgAYAAoAHJACABwAADxwjAAAPJy4AgAOABSMAAA+OLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAD3ouAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAD0koAYAFBAABAwCABgACgAYjAAAPjiYqAQABBQLcbieAdhKdPAQCASY=",
      "debug_symbols": "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"
    },
    {
      "name": "set_guardian2",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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ACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQtClxXIwAADOMMKlcBAiQCAAIAAAz2IwAADPUmHApXAgAAKlYCAwAiVAIEACoEVwUtCwUCMAoAAgADACpXYAItCgJXIwAADOMtC1laLQtYXy0LW2EtC11iDCpXYWMkAgBjAAANRCMAAA2gACJfAmQAKmRXZS0LZWMAIloCZQAqZVdmLQtmZAAqY2RlLgIAX4ADKACABAQABSUAAA8BLgiABQBjACJjAmQAKmRXZi0OZWYtDlpZLQ5jWC0OYVstDmJdIwAADaAAKldgWi0KWlcjAAAHoC0LWV8tC1hhLQtbYi0LXWMMKlpiZCQCAGQAAA3QIwAADiwAImECZQAqZVpmLQtmZAAiXwJmACpmWmctC2dlACpkZWYuAgBhgAMoAIAEBAAFJQAADwEuCIAFAGQAImQCZQAqZVpnLQ5mZy0OX1ktDmRYLQ5iWy0OY10jAAAOLAAqWmBfLQpfWiMAAAbxLQtZYS0LWGItC1tjLQtdZAwqWmNlJAIAZQAADlwjAAAOuAAiYgJmACpmWmctC2dlACJhAmcAKmdaaC0LaGYAKmVmZy4CAGKAAygAgAQEAAUlAAAPAS4IgAUAZQAiZQJmACpmWmgtDmdoLQ5hWS0OZVgtDmNbLQ5kXSMAAA64ACpaYGEtCmFaIwAABfIoAIAEBHgADQAAAIAEgAMkAIADAAAO7ioBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJi4BgAOABgsAgAYAAoAHJACABwAADxwjAAAPJy4AgAOABSMAAA+OLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAD3ouAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAD0koAYAFBAABAwCABgACgAYjAAAPjiYqAQABBQLcbieAdhKdPAQCASY=",
      "debug_symbols": "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"
    },
    {
      "name": "set_guardian3",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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ACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQtClxXIwAADOMMKlcBAiQCAAIAAAz2IwAADPUmHApXAgAAKlYCAwAiVAIEACoEVwUtCwUCMAoAAgADACpXYAItCgJXIwAADOMtC1laLQtYXy0LW2EtC11iDCpXYWMkAgBjAAANRCMAAA2gACJfAmQAKmRXZS0LZWMAIloCZQAqZVdmLQtmZAAqY2RlLgIAX4ADKACABAQABSUAAA8BLgiABQBjACJjAmQAKmRXZi0OZWYtDlpZLQ5jWC0OYVstDmJdIwAADaAAKldgWi0KWlcjAAAHoC0LWV8tC1hhLQtbYi0LXWMMKlpiZCQCAGQAAA3QIwAADiwAImECZQAqZVpmLQtmZAAiXwJmACpmWmctC2dlACpkZWYuAgBhgAMoAIAEBAAFJQAADwEuCIAFAGQAImQCZQAqZVpnLQ5mZy0OX1ktDmRYLQ5iWy0OY10jAAAOLAAqWmBfLQpfWiMAAAbxLQtZYS0LWGItC1tjLQtdZAwqWmNlJAIAZQAADlwjAAAOuAAiYgJmACpmWmctC2dlACJhAmcAKmdaaC0LaGYAKmVmZy4CAGKAAygAgAQEAAUlAAAPAS4IgAUAZQAiZQJmACpmWmgtDmdoLQ5hWS0OZVgtDmNbLQ5kXSMAAA64ACpaYGEtCmFaIwAABfIoAIAEBHgADQAAAIAEgAMkAIADAAAO7ioBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJi4BgAOABgsAgAYAAoAHJACABwAADxwjAAAPJy4AgAOABSMAAA+OLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAD3ouAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAD0koAYAFBAABAwCABgACgAYjAAAPjiYqAQABBQLcbieAdhKdPAQCASY=",
      "debug_symbols": "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"
    },
    {
      "name": "set_guardian4",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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ACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQtClxXIwAADOMMKlcBAiQCAAIAAAz2IwAADPUmHApXAgAAKlYCAwAiVAIEACoEVwUtCwUCMAoAAgADACpXYAItCgJXIwAADOMtC1laLQtYXy0LW2EtC11iDCpXYWMkAgBjAAANRCMAAA2gACJfAmQAKmRXZS0LZWMAIloCZQAqZVdmLQtmZAAqY2RlLgIAX4ADKACABAQABSUAAA8BLgiABQBjACJjAmQAKmRXZi0OZWYtDlpZLQ5jWC0OYVstDmJdIwAADaAAKldgWi0KWlcjAAAHoC0LWV8tC1hhLQtbYi0LXWMMKlpiZCQCAGQAAA3QIwAADiwAImECZQAqZVpmLQtmZAAiXwJmACpmWmctC2dlACpkZWYuAgBhgAMoAIAEBAAFJQAADwEuCIAFAGQAImQCZQAqZVpnLQ5mZy0OX1ktDmRYLQ5iWy0OY10jAAAOLAAqWmBfLQpfWiMAAAbxLQtZYS0LWGItC1tjLQtdZAwqWmNlJAIAZQAADlwjAAAOuAAiYgJmACpmWmctC2dlACJhAmcAKmdaaC0LaGYAKmVmZy4CAGKAAygAgAQEAAUlAAAPAS4IgAUAZQAiZQJmACpmWmgtDmdoLQ5hWS0OZVgtDmNbLQ5kXSMAAA64ACpaYGEtCmFaIwAABfIoAIAEBHgADQAAAIAEgAMkAIADAAAO7ioBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJi4BgAOABgsAgAYAAoAHJACABwAADxwjAAAPJy4AgAOABSMAAA+OLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAD3ouAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAD0koAYAFBAABAwCABgACgAYjAAAPjiYqAQABBQLcbieAdhKdPAQCASY=",
      "debug_symbols": "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"
    },
    {
      "name": "set_guardian5",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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ACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQtClxXIwAADOMMKlcBAiQCAAIAAAz2IwAADPUmHApXAgAAKlYCAwAiVAIEACoEVwUtCwUCMAoAAgADACpXYAItCgJXIwAADOMtC1laLQtYXy0LW2EtC11iDCpXYWMkAgBjAAANRCMAAA2gACJfAmQAKmRXZS0LZWMAIloCZQAqZVdmLQtmZAAqY2RlLgIAX4ADKACABAQABSUAAA8BLgiABQBjACJjAmQAKmRXZi0OZWYtDlpZLQ5jWC0OYVstDmJdIwAADaAAKldgWi0KWlcjAAAHoC0LWV8tC1hhLQtbYi0LXWMMKlpiZCQCAGQAAA3QIwAADiwAImECZQAqZVpmLQtmZAAiXwJmACpmWmctC2dlACpkZWYuAgBhgAMoAIAEBAAFJQAADwEuCIAFAGQAImQCZQAqZVpnLQ5mZy0OX1ktDmRYLQ5iWy0OY10jAAAOLAAqWmBfLQpfWiMAAAbxLQtZYS0LWGItC1tjLQtdZAwqWmNlJAIAZQAADlwjAAAOuAAiYgJmACpmWmctC2dlACJhAmcAKmdaaC0LaGYAKmVmZy4CAGKAAygAgAQEAAUlAAAPAS4IgAUAZQAiZQJmACpmWmgtDmdoLQ5hWS0OZVgtDmNbLQ5kXSMAAA64ACpaYGEtCmFaIwAABfIoAIAEBHgADQAAAIAEgAMkAIADAAAO7ioBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJi4BgAOABgsAgAYAAoAHJACABwAADxwjAAAPJy4AgAOABSMAAA+OLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAD3ouAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAD0koAYAFBAABAwCABgACgAYjAAAPjiYqAQABBQLcbieAdhKdPAQCASY=",
      "debug_symbols": "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"
    },
    {
      "name": "set_guardian6",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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ACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQtClxXIwAADOMMKlcBAiQCAAIAAAz2IwAADPUmHApXAgAAKlYCAwAiVAIEACoEVwUtCwUCMAoAAgADACpXYAItCgJXIwAADOMtC1laLQtYXy0LW2EtC11iDCpXYWMkAgBjAAANRCMAAA2gACJfAmQAKmRXZS0LZWMAIloCZQAqZVdmLQtmZAAqY2RlLgIAX4ADKACABAQABSUAAA8BLgiABQBjACJjAmQAKmRXZi0OZWYtDlpZLQ5jWC0OYVstDmJdIwAADaAAKldgWi0KWlcjAAAHoC0LWV8tC1hhLQtbYi0LXWMMKlpiZCQCAGQAAA3QIwAADiwAImECZQAqZVpmLQtmZAAiXwJmACpmWmctC2dlACpkZWYuAgBhgAMoAIAEBAAFJQAADwEuCIAFAGQAImQCZQAqZVpnLQ5mZy0OX1ktDmRYLQ5iWy0OY10jAAAOLAAqWmBfLQpfWiMAAAbxLQtZYS0LWGItC1tjLQtdZAwqWmNlJAIAZQAADlwjAAAOuAAiYgJmACpmWmctC2dlACJhAmcAKmdaaC0LaGYAKmVmZy4CAGKAAygAgAQEAAUlAAAPAS4IgAUAZQAiZQJmACpmWmgtDmdoLQ5hWS0OZVgtDmNbLQ5kXSMAAA64ACpaYGEtCmFaIwAABfIoAIAEBHgADQAAAIAEgAMkAIADAAAO7ioBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJi4BgAOABgsAgAYAAoAHJACABwAADxwjAAAPJy4AgAOABSMAAA+OLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAD3ouAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAD0koAYAFBAABAwCABgACgAYjAAAPjiYqAQABBQLcbieAdhKdPAQCASY=",
      "debug_symbols": "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"
    },
    {
      "name": "set_guardian7",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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ACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQtClxXIwAADOMMKlcBAiQCAAIAAAz2IwAADPUmHApXAgAAKlYCAwAiVAIEACoEVwUtCwUCMAoAAgADACpXYAItCgJXIwAADOMtC1laLQtYXy0LW2EtC11iDCpXYWMkAgBjAAANRCMAAA2gACJfAmQAKmRXZS0LZWMAIloCZQAqZVdmLQtmZAAqY2RlLgIAX4ADKACABAQABSUAAA8BLgiABQBjACJjAmQAKmRXZi0OZWYtDlpZLQ5jWC0OYVstDmJdIwAADaAAKldgWi0KWlcjAAAHoC0LWV8tC1hhLQtbYi0LXWMMKlpiZCQCAGQAAA3QIwAADiwAImECZQAqZVpmLQtmZAAiXwJmACpmWmctC2dlACpkZWYuAgBhgAMoAIAEBAAFJQAADwEuCIAFAGQAImQCZQAqZVpnLQ5mZy0OX1ktDmRYLQ5iWy0OY10jAAAOLAAqWmBfLQpfWiMAAAbxLQtZYS0LWGItC1tjLQtdZAwqWmNlJAIAZQAADlwjAAAOuAAiYgJmACpmWmctC2dlACJhAmcAKmdaaC0LaGYAKmVmZy4CAGKAAygAgAQEAAUlAAAPAS4IgAUAZQAiZQJmACpmWmgtDmdoLQ5hWS0OZVgtDmNbLQ5kXSMAAA64ACpaYGEtCmFaIwAABfIoAIAEBHgADQAAAIAEgAMkAIADAAAO7ioBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJi4BgAOABgsAgAYAAoAHJACABwAADxwjAAAPJy4AgAOABSMAAA+OLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAD3ouAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAD0koAYAFBAABAwCABgACgAYjAAAPjiYqAQABBQLcbieAdhKdPAQCASY=",
      "debug_symbols": "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"
    },
    {
      "name": "set_guardian8",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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ACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQtClxXIwAADOMMKlcBAiQCAAIAAAz2IwAADPUmHApXAgAAKlYCAwAiVAIEACoEVwUtCwUCMAoAAgADACpXYAItCgJXIwAADOMtC1laLQtYXy0LW2EtC11iDCpXYWMkAgBjAAANRCMAAA2gACJfAmQAKmRXZS0LZWMAIloCZQAqZVdmLQtmZAAqY2RlLgIAX4ADKACABAQABSUAAA8BLgiABQBjACJjAmQAKmRXZi0OZWYtDlpZLQ5jWC0OYVstDmJdIwAADaAAKldgWi0KWlcjAAAHoC0LWV8tC1hhLQtbYi0LXWMMKlpiZCQCAGQAAA3QIwAADiwAImECZQAqZVpmLQtmZAAiXwJmACpmWmctC2dlACpkZWYuAgBhgAMoAIAEBAAFJQAADwEuCIAFAGQAImQCZQAqZVpnLQ5mZy0OX1ktDmRYLQ5iWy0OY10jAAAOLAAqWmBfLQpfWiMAAAbxLQtZYS0LWGItC1tjLQtdZAwqWmNlJAIAZQAADlwjAAAOuAAiYgJmACpmWmctC2dlACJhAmcAKmdaaC0LaGYAKmVmZy4CAGKAAygAgAQEAAUlAAAPAS4IgAUAZQAiZQJmACpmWmgtDmdoLQ5hWS0OZVgtDmNbLQ5kXSMAAA64ACpaYGEtCmFaIwAABfIoAIAEBHgADQAAAIAEgAMkAIADAAAO7ioBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJi4BgAOABgsAgAYAAoAHJACABwAADxwjAAAPJy4AgAOABSMAAA+OLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAD3ouAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAD0koAYAFBAABAwCABgACgAYjAAAPjiYqAQABBQLcbieAdhKdPAQCASY=",
      "debug_symbols": "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"
    },
    {
      "name": "set_guardian9",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [
          {
            "name": "guardian",
            "type": {
              "kind": "struct",
              "path": "structs::Guardian",
              "fields": [
                {
                  "name": "address",
                  "type": {
                    "kind": "struct",
                    "path": "structs::Guardian_PK",
                    "fields": [
                      {
                        "name": "value0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "value19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_x31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y0",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y1",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y2",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y3",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y4",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y5",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y6",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y7",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y8",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y9",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y10",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y11",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y12",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y13",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y14",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y15",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y16",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y17",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y18",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y19",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y20",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y21",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y22",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y23",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y24",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y25",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y26",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y27",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y28",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y29",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y30",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      },
                      {
                        "name": "pub_key_y31",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "index",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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ACJZAlktDhNZACJZAlktDhRZACJZAlktDhVZACJZAlktDhZZACJZAlktDhdZACJZAlktDhhZACJZAlktDhlZACJZAlktDhpZACJZAlktDhtZACJZAlktDhxZACJZAlktDh1ZACJZAlktDh5ZACJZAlktDh9ZACJZAlktDiBZACJZAlktDiFZACJZAlktDiJZACJZAlktDiNZACJZAlktDiRZACJZAlktDiVZACJZAlktDiZZACJZAlktDidZACJZAlktDihZACJZAlktDilZACJZAlktDipZACJZAlktDitZACJZAlktDixZACJZAlktDi1ZACJZAlktDi5ZACJZAlktDi9ZACJZAlktDjBZACJZAlktDjFZACJZAlktDjJZACJZAlktDjNZACJZAlktDjRZACJZAlktDjVZACJZAlktDjZZACJZAlktDjdZACJZAlktDjhZACJZAlktDjlZACJZAlktDjpZACJZAlktDjtZACJZAlktDjxZACJZAlktDj1ZACJZAlktDj5ZACJZAlktDj9ZACJZAlktDkBZACJZAlktDkFZACJZAlktDkJZACJZAlktDkNZACJZAlktDkRZACJZAlktDkVZACJZAlktDkZZACJZAlktDkdZACJZAlktDkhZACJZAlktDklZACJZAlktDkpZACJZAlktDktZACJZAlktDkxZACJZAlktDk1ZACJZAlktDk5ZACJZAlktDk9ZACJZAlktDlBZACJZAlktDlFZACJZAlktDlJZACJZAlktDlNZJwIBBFQtClxXIwAADOMMKlcBAiQCAAIAAAz2IwAADPUmHApXAgAAKlYCAwAiVAIEACoEVwUtCwUCMAoAAgADACpXYAItCgJXIwAADOMtC1laLQtYXy0LW2EtC11iDCpXYWMkAgBjAAANRCMAAA2gACJfAmQAKmRXZS0LZWMAIloCZQAqZVdmLQtmZAAqY2RlLgIAX4ADKACABAQABSUAAA8BLgiABQBjACJjAmQAKmRXZi0OZWYtDlpZLQ5jWC0OYVstDmJdIwAADaAAKldgWi0KWlcjAAAHoC0LWV8tC1hhLQtbYi0LXWMMKlpiZCQCAGQAAA3QIwAADiwAImECZQAqZVpmLQtmZAAiXwJmACpmWmctC2dlACpkZWYuAgBhgAMoAIAEBAAFJQAADwEuCIAFAGQAImQCZQAqZVpnLQ5mZy0OX1ktDmRYLQ5iWy0OY10jAAAOLAAqWmBfLQpfWiMAAAbxLQtZYS0LWGItC1tjLQtdZAwqWmNlJAIAZQAADlwjAAAOuAAiYgJmACpmWmctC2dlACJhAmcAKmdaaC0LaGYAKmVmZy4CAGKAAygAgAQEAAUlAAAPAS4IgAUAZQAiZQJmACpmWmgtDmdoLQ5hWS0OZVgtDmNbLQ5kXSMAAA64ACpaYGEtCmFaIwAABfIoAIAEBHgADQAAAIAEgAMkAIADAAAO7ioBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJi4BgAOABgsAgAYAAoAHJACABwAADxwjAAAPJy4AgAOABSMAAA+OLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAD3ouAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAD0koAYAFBAABAwCABgACgAYjAAAPjiYqAQABBQLcbieAdhKdPAQCASY=",
      "debug_symbols": "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"
    },
    {
      "name": "set_provider",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [
          {
            "name": "provider",
            "type": {
              "kind": "struct",
              "path": "structs::Provider",
              "fields": [
                {
                  "name": "chain_id",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 16
                  }
                },
                {
                  "name": "evm_chain_id",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 16
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBGJwAABAMnAgMEAicCBAQAHwoAAwAEgEQdAIBEgEQDHQCARYBFAy4IgEQAAS4IgEUAAiUAAABZJQAAAGEoAgABBIBGJwICBAA7DgACAAEoAIBDBAADJiUAAAJgHgIABAAeAgAFADMqAAQABQAGJwIEAQEkAgAGAAAAiiUAAAKJJwIEAAAtCAEFJwIGBAcACAEGAScDBQQBACIFAgYtCgYHLQ4EBwAiBwIHLQ4EBwAiBwIHLQ4EBwAiBwIHLQ4EBwAiBwIHLQ4EBwAiBwIHLQ4EBy0IAQQAAAECAS0OBQQnAgUEACcCBgQGJwIHAAEnAggEAS0KBQMjAAABBgwqAwYJJAIACQAAAhQjAAABGC0LBAkBIgAJgEMACi0LCgQcCgQLBRwKCwoAJwIEBAQAKgkEDC0LDAscCgsMBRwKDAQAJwILBAUAKgkLDS0LDQwcCgwNBhwKDQsAACoJBg0tCw0MHAoMDQUcCg0JABwKAQwAHAoCAQAtCAECJwINBAcACAENAScDAgQBACICAg0tCg0OLQ4MDgAiDgIOLQ4BDgAiDgIOLQ4KDgAiDgIOLQ4EDgAiDgIOLQ4LDgAiDgIOLQ4JDi0KBQMjAAAB1QwqAwYBJAIAAQAAAegjAAAB5yYcCgMBAAAqBwEEACICAgUAKgUDCS0LCQEwCgABAAQAKgMIAS0KAQMjAAAB1RwKAwkAACoHCQovCgAKAAktCwQKLgIACoADKACABAQAByUAAAKbLgiABQALACILAgwAKgwDDS0OCQ0tDgsEACoDCAktCgkDIwAAAQYoAIAEBHgADQAAAIAEgAMkAIADAAACiCoBAAEF96Hzr6Wt1Mo8BAIBJioBAAEFvh4//z6k9vo8BAIBJi4BgAOABgsAgAYAAoAHJACABwAAArYjAAACwS4AgAOABSMAAAMoLgAAAYAFAQAAAYAEAAEBAIADgASACS4AgAOACi4AgAWACwsAgAqACYAMJACADAAAAxQuAYAKgAguBIAIgAsBAIAKAAKACgEAgAsAAoALIwAAAuMoAYAFBAABAwCABgACgAYjAAADKCY=",
      "debug_symbols": "tZfbbiIxDIbfZa65cOwcnL7KqqoonVZICBCFlVYV7772EGdgpUS70L1hvnEyf2wnMcnX8Da+nj5e1tv33efw9ONreD2sN5v1x8tmt1oe17utWL8G0B8HODz5hTzT8JTk6eTdgQBKu3MKoQCRAQsEAU8GqUBAA7NEs0SzJGcQCjAYeINcINsQuQyKgAZFEJ0ziAUQDLxBEcTJnygwDZoUtE8WyGggOiiREjiDeGmiaawJzKJjTX00URMQlCYKBbxZvIyFqJALhDI6hVwgSsjoFbhAEguBAhdgtehYnAqo8xcoFg9oYBZ1/gKhgDp/AW+QCxAZcAFvgt4EgwmGWCDq5yTA+pU473UGKSioRTIfgAzMoquOWEEtMimB1JIVZCwvIQcd3aOC9PEyVpgWm3YOXCCGAgkMYgF2BmbJ1ifrFKTzeTHYBnk5HsZR98fVjpF9tF8exu1xeNqeNpvF8HO5OU2dPvfL7fQ8Lg/SKs6O2zd5iuD7ejMqnRfz19D+1JEEXj53FGOqEg7ijYjriABWDfB4JUE3EtiRSJmjaaScQxVJt7FQW4OQgIuGMPqWRjeUnM0N53IzlPANocT/HUrgOivcnhVuS6TEJpHYN53InUCkEjkLRIrRo4E4bAfSW+Yxc6pzAjDPSfjDDezFkrCGkq92CvOtRm+NQqyOECTgZj58WwQlGEuqMt4pknkWyfk+kcxURUSlKdLPSbrKCVJThHu7LuE8w8nPM0zk/kGFYVaRLDdVsLvaqBaRGK48ifD3GpxrEcmO7tTwswgHaucE6fFoeo4kQJ63n0+t7YedukrzFpaaQs3th9266lyuddVhc73qWmonBFxdJBGib6eVv0Uld/965yLvXXuZdOPB+QwQMUDbk25q5U9mTi00Kz31SqycQYKJ6HnkPhFf/7aEM98pkuhxkQBQRQLkOz0JeRZx0BTpzLGc+mP1JARw91R7AsDqCQDlO0W0+WGR+VgB4Js58a6XEwpVJBDfrthneVuu1oebO+xZ1Q7r5etmLK/vp+3qqvX4a28tdgfeH3ar8e10GFVpvgjLzw8nNxi5wT7rdVhf5RjtMOmrm1554Qiez+rMbw=="
    },
    {
      "name": "set_receiver_address",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [
          {
            "name": "new_receiver_address",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4111885691990129848": {
            "error_kind": "string",
            "string": "Function _assert_is_owner can only be called internally"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "16994898036605678414": {
            "error_kind": "string",
            "string": "caller is not owner"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "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",
      "debug_symbols": "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"
    },
    {
      "name": "set_token_address",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [
          {
            "name": "new_token_address",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4111885691990129848": {
            "error_kind": "string",
            "string": "Function _assert_is_owner can only be called internally"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "16994898036605678414": {
            "error_kind": "string",
            "string": "caller is not owner"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgIEAScCAwQAHwoAAgADgEQuCIBEAAElAAAARSUAAABNKAIAAQSARScCAgQAOw4AAgABKACAQwQAAyYlAAAR5R4CAAMAHgIABAAzKgADAAQABScCAwEBJAIABQAAAHYlAAASDh4CAAQAHgIABQAzKgAEAAUABiQCAAYAAACVJQAAEg4eAgAEAR4CAAUACioEBQYkAgAGAAAAsSUAABIgJwIEAAgvCgAEAAUeAgAEAQoqBQQGJAIABgAAANMlAAASMicCBAAALQgBBScCBgQEAAgBBgEnAwUEAQAiBQIGLQoGBy0OBAcAIgcCBy0OBAcAIgcCBy0OBActCAEGAAABAgEtDgUGJwIFBAAnAgcADScCCAQBLQoFAiMAAAEvDSIAAoBDAAkkAgAJAAARmSMAAAFELQsGCS0IAQYnAgoEBAAIAQoBJwMGBAEAIgYCCi0KCgstDgQLACILAgstDgQLACILAgstDgQLACoJCAstCwsKJwILBAIAKgkLDS0LDQwBIgAJgEMADi0LDg0cCgoOBBwKDgkAHAoJCgUvCgAHAAkcCgkPBBwKDw4AAioJDg8sAgAJAC1eCYuCuje0O5mhMWEY/SDUL1FmyenxP7XqZaltHgptBCoPCQ4cCg4QBBwKEA8AAioODxAEKhAJDhwKDhEBHAoREAAcChARAQIqDhASLAIADgAwM+okblBuiY6X9XDK/9cEywu0YDE/tyCynhOeXBAAAQQqEg4THAoTFAQcChQSAAIqExIUBCoUCRMcChMUARwKFAkAHAoJFAECKhMJFQQqFQ4THAoTFQQcChUOABwKDhMFFgoUDhwKCRQFHAoOFQUEKhQTDhwKEhMFFgoREhwKEBEFHAoSFgUEKhETEhwKDxMFHgIAFwYMKhcTGCkCABMFAAFT2CQCABgAAALhIwAAAskEKhESFAQqFhMRACoUERMtChMCIwAAAvkEKhQOEQQqFRMUACoRFBMtChMCIwAAAvkAKhcCEw4qFxMUJAIAFAAAAxAlAAASRAwqFwoCFgoCChwKAhQAHAoKAgAEKhQMCgQqAg0MACoKDAItCwYKACIKAgotDgoGLQgBCgAAAQIBLQ4GChwKEwYALQgBDAAAAQIBJwINAAEtDg0MJwITAQAtCAEUJwIVBCEACAEVAScDFAQBACIUAhUtChUWLQ4TFgAiFgIWLQ4TFgAiFgIWLQ4TFgAiFgIWLQ4TFgAiFgIWLQ4TFgAiFgIWLQ4DFgAiFgIWLQ4TFgAiFgIWLQ4TFgAiFgIWLQ4TFgAiFgIWLQ4TFgAiFgIWLQ4TFgAiFgIWLQ4TFgAiFgIWLQ4TFgAiFgIWLQ4TFgAiFgIWLQ4TFgAiFgIWLQ4TFgAiFgIWLQ4TFgAiFgIWLQ4TFgAiFgIWLQ4TFgAiFgIWLQ4TFgAiFgIWLQ4TFgAiFgIWLQ4TFgAiFgIWLQ4TFgAiFgIWLQ4TFgAiFgIWLQ4TFgAiFgIWLQ4TFgAiFgIWLQ4TFgAiFgIWLQ4TFgAiFgIWLQ4TFgAiFgIWLQ4TFgAiFgIWLQ4TFgAiFgIWLQ4TFicCFQQhJwIWBCAnAhcAAi0KCBEjAAAEtwwqERUYJAIAGAAAESkjAAAEyS0LDBQEKg8UDAAqBgwPLQgBBgAAAQIBLQ4NBi0IAQwnAhQEIQAIARQBJwMMBAEAIgwCFC0KFBgtDhMYACIYAhgtDhMYACIYAhgtDhMYACIYAhgtDhMYACIYAhgtDhMYACIYAhgtDhMYACIYAhgtDgMYACIYAhgtDhMYACIYAhgtDhMYACIYAhgtDhMYACIYAhgtDhMYACIYAhgtDhMYACIYAhgtDhMYACIYAhgtDhMYACIYAhgtDhMYACIYAhgtDhMYACIYAhgtDhMYACIYAhgtDhMYACIYAhgtDhMYACIYAhgtDhMYACIYAhgtDhMYACIYAhgtDhMYACIYAhgtDhMYACIYAhgtDhMYACIYAhgtDhMYACIYAhgtDhMYACIYAhgtDhMYACIYAhgtDhMYACIYAhgtDhMYACIYAhgtDhMYACIYAhgtDhMYACIYAhgtDhMYLQoIESMAAAYkDCoRFRQkAgAUAAAQuSMAAAY2LQsGEQQqEBEGACoPBhAcChIGAC0IAQ8AAAECAS0ODQ8tCAERJwISBCEACAESAScDEQQBACIRAhItChIULQ4TFAAiFAIULQ4TFAAiFAIULQ4TFAAiFAIULQ4DFAAiFAIULQ4TFAAiFAIULQ4TFAAiFAIULQ4DFAAiFAIULQ4TFAAiFAIULQ4TFAAiFAIULQ4TFAAiFAIULQ4TFAAiFAIULQ4TFAAiFAIULQ4TFAAiFAIULQ4TFAAiFAIULQ4TFAAiFAIULQ4TFAAiFAIULQ4TFAAiFAIULQ4TFAAiFAIULQ4TFAAiFAIULQ4TFAAiFAIULQ4TFAAiFAIULQ4TFAAiFAIULQ4TFAAiFAIULQ4TFAAiFAIULQ4TFAAiFAIULQ4TFAAiFAIULQ4TFAAiFAIULQ4TFAAiFAIULQ4TFAAiFAIULQ4TFAAiFAIULQ4TFAAiFAIULQ4TFC0KCAwjAAAHlgwqDBUSJAIAEgAAEEkjAAAHqC0LDxEEKgYRDwAqEA8GLQgBDwAAAQIBLQ4NDy0IARAnAhEEIQAIAREBJwMQBAEAIhACES0KERItDhMSACISAhItDhMSACISAhItDhMSACISAhItDgMSACISAhItDhMSACISAhItDgMSACISAhItDgMSACISAhItDhMSACISAhItDhMSACISAhItDhMSACISAhItDhMSACISAhItDhMSACISAhItDhMSACISAhItDhMSACISAhItDhMSACISAhItDhMSACISAhItDhMSACISAhItDhMSACISAhItDhMSACISAhItDhMSACISAhItDhMSACISAhItDhMSACISAhItDhMSACISAhItDhMSACISAhItDhMSACISAhItDhMSACISAhItDhMSACISAhItDhMSACISAhItDhMSACISAhItDhMSACISAhItDhMSACISAhItDhMSLQoIDCMAAAkDDCoMFREkAgARAAAP2SMAAAkVLQsPEAQqCRAPACoGDwkcCg4GAC0IAQ4AAAECAS0ODQ4tCAEPJwIQBCEACAEQAScDDwQBACIPAhAtChARLQ4TEQAiEQIRLQ4TEQAiEQIRLQ4TEQAiEQIRLQ4TEQAiEQIRLQ4DEQAiEQIRLQ4DEQAiEQIRLQ4DEQAiEQIRLQ4TEQAiEQIRLQ4TEQAiEQIRLQ4TEQAiEQIRLQ4TEQAiEQIRLQ4TEQAiEQIRLQ4TEQAiEQIRLQ4TEQAiEQIRLQ4TEQAiEQIRLQ4TEQAiEQIRLQ4TEQAiEQIRLQ4TEQAiEQIRLQ4TEQAiEQIRLQ4TEQAiEQIRLQ4TEQAiEQIRLQ4TEQAiEQIRLQ4TEQAiEQIRLQ4TEQAiEQIRLQ4TEQAiEQIRLQ4TEQAiEQIRLQ4TEQAiEQIRLQ4TEQAiEQIRLQ4TEQAiEQIRLQ4TEQAiEQIRLQ4TEQAiEQIRLQ4TES0KCAwjAAAKdQwqDBUQJAIAEAAAD2kjAAAKhy0LDg0EKgYNDgAqCQ4GLQsKCS4CAAmAAygAgAQEAAQlAAASVi4IgAUADQAqDQgOLQ4GDi4CAA2AAygAgAQEAAQlAAASVi4IgAUACQAqCQsOLQ4CDi4CAAmAAygAgAQEAAQlAAASVi4IgAUACwEiAAuAQwANLQ4BDS0OCwotCwsJACIJAgktDgkLLQgBCScCCgQEAAgBCgEnAwkEAQAiCQIKLQoKDS0OBA0AIg0CDS0OBA0AIg0CDS0OBA0rAgAKAAAAAAAAAAADAAAAAAAAAAAtCAENJwIOBAUACAEOAScDDQQBACINAg4tCg4PLQ4EDwAiDwIPLQ4EDwAiDwIPLQ4EDwAiDwIPLQ4KDy0IAQQAAAECAS0OCQQtCAEJAAABAgEtDg0JLQgBCgAAAQIBLQ4FCi0IAQ0AAAECAS0OEw0tCgUMIwAAC88NIgAMgEMADiQCAA4AAA2KIwAAC+QtCw0MCioMEw4kAgAOAAAL/icCDwQAPAYPAS0KBQsjAAAMBw0iAAuAQwAMJAIADAAADP4jAAAMHC0LBAwtCwkOLQsKDy0LDhAAIhACEC0OEA4tCAEQJwIRBAUACAERAScDEAQBACIOAhEnAhIEBAAiEAITPw8AEQATLQ4MBC0OEAktDg8KLQ4DDQAqEAgELQsEAy0IAQQnAgkEBQAIAQkBJwMEBAEAIgQCCS0KCQotDgYKACIKAgotDgIKACIKAgotDgEKACIKAgotDgMKJwIBBAQtCgULIwAADL8MKgsBAiQCAAIAAAzSIwAADNEmHAoLAgAAKgcCAwAiBAIFACoFCwYtCwYCMAoAAgADACoLCAItCgILIwAADL8tCwQMLQsJDi0LCg8tCw0QDCoLDxEkAgARAAANICMAAA18ACIOAhIAKhILEy0LExEAIgwCEwAqEwsULQsUEgAqERITLgIADoADKACABAQABSUAABJWLgiABQARACIRAhIAKhILFC0OExQtDgwELQ4RCS0ODwotDhANIwAADXwAKgsIDC0KDAsjAAAMBwAiCwIPACoPDBAtCxAOLQsEDy0LCRAtCwoRLQsNEgoqEhMUJAIAFAAADb4nAhUEADwGFQELIgARgEMAEiQCABIAAA46IwAADdMNIgARgEMAEiQCABIAAA3oJQAAEuQuAgAPgAMoAIAEBAAEJQAAElYuCIAFABIAIhICFAAqFBEVLQ4OFQAqEQgODioRDg8kAgAPAAAOJSUAABJELQ4SBC0OEAktDg4KLQ4TDSMAAA7PLQoFDyMAAA5DDSIAD4BDABAkAgAQAAAO3SMAAA5YLQsEDy0LCRAtCw0RLQsQEgAiEgISLQ4SEC0IARInAhQEBQAIARQBJwMSBAEAIhACFCcCFQQEACISAhY/DwAUABYuAgAPgAMoAIAEBAAEJQAAElYuCIAFABAAKhAIFC0ODhQtDhAELQ4SCS0OCAotDhENIwAADs8AKgwIDi0KDgwjAAALzy0LBBAtCwkRLQsKEi0LDRQMKg8SFSQCABUAAA7/IwAAD1sAIhECFgAqFg8XLQsXFQAiEAIXACoXDxgtCxgWACoVFhcuAgARgAMoAIAEBAAFJQAAElYuCIAFABUAIhUCFgAqFg8YLQ4XGC0OEAQtDhUJLQ4SCi0OFA0jAAAPWwAqDwgQLQoQDyMAAA5DLQsOEAQqEBARAioWDBAOKgwWEiQCABIAAA+JJQAAEvYMKhAWEiQCABIAAA+bJQAAEuQAIg8CFAAqFBAYLQsYEhwKEhAABCoRFxIEKhASFAIqDRASBCoSERAAKhQQES0OEQ4AKgwIEC0KEAwjAAAKdS0LDxEEKhEREgIqFgwRDioMFhQkAgAUAAAP+SUAABL2DCoRFhQkAgAUAAAQCyUAABLkACIQAhgAKhgRGS0LGRQcChQRAAQqEhcUBCoRFBgCKg0RFAQqFBIRACoYERItDhIPACoMCBEtChEMIwAACQMtCw8SBCoSEhQCKhYMEg4qDBYYJAIAGAAAEGklAAAS9gwqEhYYJAIAGAAAEHslAAAS5AAiEQIZACoZEhotCxoYHAoYEgAEKhQXGAQqEhgZAioNEhgEKhgUEgAqGRIULQ4UDwAqDAgSLQoSDCMAAAeWLQsGFAQqFBQYAioWERQOKhEWGSQCABkAABDZJQAAEvYMKhQWGSQCABkAABDrJQAAEuQAIgwCGgAqGhQbLQsbGRwKGRQABCoYFxkEKhQZGgIqDRQZBCoZGBQAKhoUGC0OGAYAKhEIFC0KFBEjAAAGJC0LDBgEKhgYGQIqFhEYDioRFhokAgAaAAARSSUAABL2DCoYFhokAgAaAAARWyUAABLkACIUAhsAKhsYHC0LHBocChoYAAQqGRcaBCoYGhsCKg0YGgQqGhkYACobGBktDhkMACoRCBgtChgRIwAABLccCgIJAAAqBwkKLwoACgAJLQsGCi4CAAqAAygAgAQEAAQlAAASVi4IgAUACwAiCwIMACoMAg0tDgkNLQ4LBgAqAggJLQoJAiMAAAEvKACABAR4AA0AAACABIADJACAAwAAEg0qAQABBfeh86+lrdTKPAQCASYqAQABBb4eP/8+pPb6PAQCASYqAQABBTkQWkBMFTy4PAQCASYqAQABBevaAbix3XNOPAQCASYqAQABBUWnynEZQeQVPAQCASYuAYADgAYLAIAGAAKAByQAgAcAABJxIwAAEnwuAIADgAUjAAAS4y4AAAGABQEAAAGABAABAQCAA4AEgAkuAIADgAouAIAFgAsLAIAKgAmADCQAgAwAABLPLgGACoAILgSACIALAQCACgACgAoBAIALAAKACyMAABKeKAGABQQAAQMAgAYAAoAGIwAAEuMmKgEAAQXFa8RaDhAAAjwEAgEmKgEAAQUohpKwR9z9QzwEAgEm",
      "debug_symbols": "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"
    },
    {
      "name": "sync_private_state",
      "is_unconstrained": true,
      "custom_attributes": ["utility"],
      "abi": {
        "parameters": [],
        "return_type": null,
        "error_types": {
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1004672304334401604": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3206131020419630384": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3738765135689704617": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "10676044680617262041": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "11732781666457836689": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14101993474458164081": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15200354114977654233": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "15760694058516861966": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17226037485472400844": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "17610130137239148460": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": ""
    },
    {
      "name": "transfer_ownership",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "parameters": [
          {
            "name": "new_owner",
            "type": {
              "kind": "struct",
              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ]
            },
            "visibility": "private"
          }
        ],
        "return_type": null,
        "error_types": {
          "4111885691990129848": {
            "error_kind": "string",
            "string": "Function _assert_is_owner can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16994898036605678414": {
            "error_kind": "string",
            "string": "caller is not owner"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "JwACBAEoAAABBIBFJwAABAMnAgIEAScCAwQAHwoAAgADgEQuCIBEAAElAAAARSUAAABGKAIAAQSARScCAgQAOw4AAgABJiUAAADTHgIAAgAeAgADADMqAAIAAwAEJwICAQEkAgAEAAAAbyUAAAD8HgIAAwAeAgAEADMqAAMABAAFJAIABQAAAI4lAAAA/B4CAAIBHgIAAwAKKgIDBCQCAAQAAACqJQAAAQ4nAgIACC8KAAIAAx4CAAQBCioDBAUkAgAFAAAAzCUAAAEgMAoAAQACJigAgAQEeAANAAAAgASAAyQAgAMAAAD7KgEAAQX3ofOvpa3UyjwEAgEmKgEAAQW+Hj//PqT2+jwEAgEmKgEAAQU5EFpATBU8uDwEAgEmKgEAAQXr2gG4sd1zTjwEAgEm",
      "debug_symbols": "tVftjqsgEH0Xf/fHfDAC+yqbprGt3ZgY27jtTW6avvsddhV1E8jm1v6RA8qRA2cYuBfHen/72DXd6fxZvL3fi33ftG3zsWvPh+ranDttvRcQHlaKN7MpnFasFlpD2BSetUQt3XeJUA4AUUEZQGjxCkhbiALwClgB2wEYUhA+NqElfCzawhCAHUApA7A6BJYAZABOmdkFoP/i0N3jCPw3IDA6fvN4bIpR2+7a13WQNhOrU3Cp+rq7Fm/drW03xZ+qvX199Hmpuq/yWvX6VgdSd0ctlfDUtHVAj83UG9JdkYVp6I5cljZS6OwtSDBDAhQ5wNCMghcUlKGw3pUjh/VeIoldauE0BxODGzgUk0lxZKV4Pw4D0SelyApSyldLERdXxaVXxaUprHUjhXUmOQifEcIGcBTCxjwrBCktJGdzZ72MHM4hRxL5MQxaJVb4+WBBs4LFUNbwGD8fL2jXUONeruZ3IUPwdMwQrhE0/HzUZB1PFMWgTnCZdDzl3OpncePFQHJO8m61Mq2vT5Lk9TDSpIcprWcNv9Iqfv39+rBJ70jZ3Gsmq1hjy9TmyFnPWoqW9bOt0bklR2YgajBnRxKw4JKHgNwpAGAKHoC02zhjWd3pJZIIu/9bHWtcdJsVgOS8lisED9tXB8/CJgLJHJrNwy6cscc8PEt/PzhMhoR9dInuk5y0msnZlSCuDZMm4tSMmJxf0ciY/RgFk9Nqcn4VU0K0mgAuSLZaqw5Nv7gEPQJb31T7th6qp1t3mL29/r2Mb8ZL1KU/H+rjra8D03STQn2+63XF8DZcj7QisBHaPsKv/wE="
    },
    {
      "name": "verify_vaa",
      "is_unconstrained": false,
      "custom_attributes": ["private"],
      "abi": {
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs",
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::call_context::CallContext",
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::block_header::BlockHeader",
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                          "fields": [
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::state_reference::StateReference",
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::partial_state_reference::PartialStateReference",
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "kind": "struct",
                    "path": "aztec::protocol_types::abis::transaction::tx_context::TxContext",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas::Gas",
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 128
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ]
            },
            "visibility": "private"
          },
          {
            "name": "bytes",
            "type": {
              "kind": "array",
              "length": 2000,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            "visibility": "private"
          },
          {
            "name": "actual_length",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 32
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "struct",
            "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs",
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::call_context::CallContext",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ]
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "include_by_timestamp",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 64
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::read_request::ReadRequest",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator",
                          "fields": [
                            {
                              "name": "request",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest",
                                "fields": [
                                  {
                                    "name": "pk_m",
                                    "type": {
                                      "kind": "struct",
                                      "path": "std::embedded_curve_ops::EmbeddedCurvePoint",
                                      "fields": [
                                        {
                                          "name": "x",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "y",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "is_infinite",
                                          "type": {
                                            "kind": "boolean"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "sk_app",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "sk_app_generator",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::note_hash::NoteHash",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::nullifier::Nullifier",
                          "fields": [
                            {
                              "name": "value",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "note_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 5,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::private_call_request::PrivateCallRequest",
                          "fields": [
                            {
                              "name": "call_context",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::call_context::CallContext",
                                "fields": [
                                  {
                                    "name": "msg_sender",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "contract_address",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "function_selector",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::abis::function_selector::FunctionSelector",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "is_static_call",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "returns_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "start_side_effect_counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "end_side_effect_counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                                "fields": [
                                  {
                                    "name": "msg_sender",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "contract_address",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "is_static_call",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  },
                                  {
                                    "name": "calldata_hash",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::public_call_request::PublicCallRequest",
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "calldata_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 2,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message",
                                "fields": [
                                  {
                                    "name": "recipient",
                                    "type": {
                                      "kind": "struct",
                                      "path": "aztec::protocol_types::address::eth_address::EthAddress",
                                      "fields": [
                                        {
                                          "name": "inner",
                                          "type": {
                                            "kind": "field"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "content",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 16,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::private_log::PrivateLogData",
                          "fields": [
                            {
                              "name": "log",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::log::Log",
                                "fields": [
                                  {
                                    "name": "fields",
                                    "type": {
                                      "kind": "array",
                                      "length": 18,
                                      "type": {
                                        "kind": "field"
                                      }
                                    }
                                  },
                                  {
                                    "name": "length",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "note_hash_counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::utils::arrays::ClaimedLengthArray",
                  "fields": [
                    {
                      "name": "array",
                      "type": {
                        "kind": "array",
                        "length": 1,
                        "type": {
                          "kind": "struct",
                          "path": "aztec::protocol_types::abis::side_effect::counted::Counted",
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "struct",
                                "path": "aztec::protocol_types::abis::log_hash::LogHash",
                                "fields": [
                                  {
                                    "name": "value",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "length",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "counter",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "name": "length",
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 32
                      }
                    }
                  ]
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::block_header::BlockHeader",
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::content_commitment::ContentCommitment",
                        "fields": [
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::state_reference::StateReference",
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::partial_state_reference::PartialStateReference",
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "kind": "struct",
                                    "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot",
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::global_variables::GlobalVariables",
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::eth_address::EthAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::address::aztec_address::AztecAddress",
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "kind": "struct",
                  "path": "aztec::protocol_types::abis::transaction::tx_context::TxContext",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "kind": "struct",
                        "path": "aztec::protocol_types::abis::gas_settings::GasSettings",
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas::Gas",
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "kind": "struct",
                              "path": "aztec::protocol_types::abis::gas_fees::GasFees",
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 128
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "visibility": "databus"
        },
        "error_types": {
          "211358376073803959": {
            "error_kind": "string",
            "string": "Need at least 1 signature"
          },
          "576755928210959028": {
            "error_kind": "string",
            "string": "0 has a square root; you cannot claim it is not square"
          },
          "1004672304334401604": {
            "error_kind": "fmtstring",
            "length": 48,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "3163564695355654215": {
            "error_kind": "string",
            "string": "Insufficient valid signatures"
          },
          "3206131020419630384": {
            "error_kind": "fmtstring",
            "length": 75,
            "item_types": []
          },
          "3305101268118424981": {
            "error_kind": "string",
            "string": "Attempted to delete past the length of a CapsuleArray"
          },
          "3738765135689704617": {
            "error_kind": "fmtstring",
            "length": 58,
            "item_types": [
              {
                "kind": "field"
              }
            ]
          },
          "4790011804579310016": {
            "error_kind": "string",
            "string": "VM version incompatible"
          },
          "5003515106221862139": {
            "error_kind": "string",
            "string": "Too many signatures"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "10676044680617262041": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ]
          },
          "11732781666457836689": {
            "error_kind": "fmtstring",
            "length": 77,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "13649294680379557736": {
            "error_kind": "string",
            "string": "extend_from_bounded_vec out of bounds"
          },
          "14101993474458164081": {
            "error_kind": "fmtstring",
            "length": 61,
            "item_types": [
              {
                "kind": "field"
              },
              {
                "kind": "field"
              }
            ]
          },
          "14225679739041873922": {
            "error_kind": "string",
            "string": "Index out of bounds"
          },
          "14656550611213696286": {
            "error_kind": "string",
            "string": "guardian index out of bounds"
          },
          "14657895983200220173": {
            "error_kind": "string",
            "string": "Attempted to read past the length of a CapsuleArray"
          },
          "15200354114977654233": {
            "error_kind": "fmtstring",
            "length": 144,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "15760694058516861966": {
            "error_kind": "fmtstring",
            "length": 128,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "16218014537381711836": {
            "error_kind": "string",
            "string": "Value does not fit in field"
          },
          "16446004518090376065": {
            "error_kind": "string",
            "string": "Input length must be a multiple of 32"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17226037485472400844": {
            "error_kind": "fmtstring",
            "length": 132,
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ]
          },
          "17610130137239148460": {
            "error_kind": "fmtstring",
            "length": 98,
            "item_types": []
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        }
      },
      "bytecode": "",
      "debug_symbols": "TJ3LjjQ9b6Tv5V/PonQgJfpWZjGYMwwYNjCHlTH3Pp0MkREbv0/4/1qhlMSorCx29b//47/99//yf//nf/rnf/0f//a///FP//Hf//Ff/tc//8u//PP//E//8m//9T//n3/+t3/9+//++z9+3/8Z+x//dK6v//cf/jE+vec//mn8h3/shX82/jH84/jn4J+LfyL/sR/+GfgHoxhGMYxiGMUwimEUwyiGURyjOEZxjOIYxTGKYxTHKI5RHKM4RjkY5WCUg1EORjkY5WCUg1EORjkY5WCUi1EuRrkY5WKUi1EuRrkY5WKUi1EuRgmMEhglMEpglMAogVECowRGCYwSGGX8fu/f8f6d79/1/t3vX3v/+vv3vH/v+/eNN95444033njjjTfeeOONN95444033njjbzz7+3f+3r/j/Tvfv+v9u9+/9v719+95/9737xtvvfHW33j+/Tvfv+v9u9+/9v719+95//6NF9+/3/WuP9i/glEwC1bBLviu+nzgBafgFnwj3z/Ik58wCr6Rv9XJ85+wC/5GnvsDLzgFtyAefNUAGAWzYBXsghrZa2Svkb1G/upjfsvzVQhgFMyCVbALrMALTsEtqJFvjXxr5Fsj3xr51si3Rr418q2Rb418a+SokaNGjho5auSokaNGjhr5q6v57c5XWYAAzK+4AKNgFqyCXWAFXnAKbkGNPGrkUSOPGnnUyKNGHjXyqJFHjTxq5FEjzxp51sizRp418qyRZ408a+RZI88aedbIq0ZeNfKqkVeNvGrkVSOvGnnVyKtGXjXyrpF3jbxr5F0j7xp518i7Rt418q6Rd41sNbLVyFYjW41sNbLVyFYjW41sNbLVyF4je43sNfJXg2t8sAuswAtOwS2IB18NAkbBLKiRT418auRTI381uPYHtyAefDW44oNRMAtWwS6wAi84BbcgHkSNHDVy1MhRI8dLpBlW4AWn4Ba8rFu/X8EomAWrYBdYgRecgr+R9/wgHnw1CBgFs2AV7AIr8IJTUCOPGnnWyLNGnjXyV4N7fbALrMALTsEtiAdfDQJGwSyokVeNvGrkVSN/NWi/D25BPPhqEDAKZsEq2AVW4AU18q6Rd41sNbLVyFYjW41sNbLVyFYjW41sNbLVyF4je43sNbLXyF4je43sNbLXyF4je418auRTI58a+dTIp0Y+NfKpkU+NfGrkUyPfGvnWyLdGvjXyrZFvjXxr5Fsj3xr51shRI0eNHDVy1MhRI0eNHDVy1MhRI8cbef9+BaNgFqyCXWAFXnAKbkGNPGrkUSOPGnnUyKNGHjXyqJFHjTxq5FEjzxp51sizRp418qyRZ408a+RZI88aedbIq0ZeNfKqkVeNvGrkVSOvGrlqcFcN7qrBXTW4qwZ31eCuGtxVg7tqcFcN7qrBXTW4qwZ31eCuGtxVg7tqcFcN7qrBXTW4qwZ31eCuGtxVg7tqcFcN7qrBXTW4qwZ31eCuGtxVg7tqcFcN7qrBXTW4qwZ31eCuGtxVg7tqcFcN7qrBXTW4qwZ31eCuGtxVg7tqcFcN7qrBXTW4qwZ31eCuGtxVg7tqcFcN7qrBXTW4qwZ31eCuGrSqQasatKpBqxq0qkGrGrSqQasatKpBqxq0qkGrGrSqQasatKpBqxq0qkGrGrSqQasatKpBqxq0qkGrGrSqQasatKpBqxq0qkGrGrSqQasatKpBqxq0qkGrGrSqQasatKpBqxq0qkGrGrSqQasatKpBqxq0qkGrGrSqQasatKpBqxq0qkGrGrSqQasatKpBqxq0qkGrGrSqQasatKpBqxq0qkGrGrSqQasatKpBqxq0qkGrGrSqQasatKpBqxq0qkGrGrSqQasatKpBqxq0qkGrGrSqQasatKpBqxq0qkGrGrSqQasatKpBqxq0qkGrGrSqQasatKpBqxr0qkGvGvSqQa8a9KpBrxr0qkGvGvSqQa8a9KpBrxr0qkGvGvSqQa8a9KpBrxr0qkGvGvSqQa8a9KpBrxr0qkGvGvSqQa8a9KpBrxr0qkGvGvSqQa8a9KpBrxr0qkGvGvSqQa8a9KpBrxr0qkGvGvSqQa8a9KpBrxr0qkGvGvSqQa8a9KpBrxr0qkGvGvSqQa8a9KpBrxr0qkGvGvSqQa8a9KpBrxr0qkGvGvSqQa8a9KpBrxr0qkGvGvSqQa8a9KpBrxr0qkGvGvSqQa8a9KpBrxr0qkGvGvSqQa8a9KpBrxr0qkGvGvSqQa8a9KpBrxr0qkGvGvSqQa8aPFWDp2rwVA2eqsFTNXiqBk/V4KkaPFWDp2rwVA2eqsFTNXiqBk/V4KkaPFWDp2rwVA2eqsFTNXiqBk/V4KkaPFWDp2rwVA2eqsFTNXiqBk/V4KkaPFWDp2rwVA2eqsFTNXiqBk/V4KkaPFWDp2rwVA2eqsFTNXiqBk/V4KkaPFWDp2rwVA2eqsFTNXiqBk/V4KkaPFWDp2rwVA2eqsFTNXiqBk/V4KkaPFWDp2rwVA2eqsFTNXiqBk/V4KkaPFWDp2rwVA2eqsFTNXiqBk/V4KkaPFWDp2rwVA2eqsFTNXiqBk/V4KkaPFWDp2rwVA2eqsFTNXiqBk/V4KkaPFWDp2rwVA2eqsFbNXirBm/V4K0avFWDt2rwVg3eqsFbNXirBm/V4K0avFWDt2rwVg3eqsFbNXirBm/V4K0avFWDt2rwVg3eqsFbNXirBm/V4K0avFWDt2rwVg3eqsFbNXirBm/V4K0avFWDt2rwVg3eqsFbNXirBm/V4K0avFWDt2rwVg3eqsFbNXirBm/V4K0avFmD64NVsAu+kc8HXnAKbkE8yBpMGAWzYBXsghrZa2Svkb1G9hr51MinRj418qmRT418auRTI58a+dTIp0a+NfKtkW+NfGvkWyPfGvnWyLdGvjXyrZGjRo4aOWrkqJGjRo4aOWrkqJGjRo43cvx+BaNgFqyCXWAFXnAKbkGNPGrkUSOPGnnUyKNGHjXyqJFHjTxq5FEjzxp51sizRp418qyRZ408a+RZI88aedbIq0ZeNfKqkVeNvGrkVSOvGnnVyKtGXjXyrpF3jbxr5F0j7xp518i7Rt418q6Rd41sNbLVyFYjW41sNXLVYFQNRtVgVA1G1WBUDUbVYFQNRtVgVA1G1WBUDUbVYFQNRtVgVA1G1WBUDUbVYFQNRtVgVA1G1WBUDUbVYFQNRtVgVA1G1WBUDUbVYFQNRtVgVA1G1WBUDUbVYFQNRtVgVA1G1WBUDUbVYFQNRtXg34fvv6bRNJtW026yJm86TbepPUZ7jPYY7THaY7THaI/RHqM9RnuM9pjtMdtjtsdsj9kesz1me8z2mO0x22O1x2qP1R6rPVZ7rPZY7bHaY7XHao/dHrs9dnvs9tjtsdtjt8duj90euz2sPaw9rD2sPaw9rD2sPaw9rD2sPbw9vD28Pbw9vD28Pbw9vD28Pbw9Tnuc9jjtcdrjtMdpj9Mepz1Oe5z2uO1x2+O2x22P2x63PW573Pa47XHbI9oj2iPaI9oj2iPaI9oj2iPao+t8dJ2PrvPRdT66zkfX+eg6H13no+t8dJ2PrvPRdT66zkfX+eg6H13no+t8dJ2PrvPRdT66zkfX+eg6H13no+t8dJ2PrvPRdT66zkfX+eg6H13no+t8dJ2PrvPRdT66zkfX+eg6H13no+t8dJ2PrvPRdT66zkfX+eg6H13no+t8dJ2PrvPRdT66zkfX+eg6H13no+t8dJ2PrvPRdT66zkfX+eg6H13no+t8dJ2PrvPRdT66zkfX+eg6H13no+t8dJ2PrvPRdT66zkfX+eg6H13no+t8dJ2PrvPRdT66zkfX+eg6H13no+t8dJ2PrvPRdT66zkfX+eg6H13no+t8dJ2PrvPRdT66zmfX+ew6n13ns+t8dp3PrvPZdT67zmfX+ew6n13ns+t8dp3PrvPZdT67zmfX+ew6n13ns+t8dp3PrvPZdT67zmfX+ew6n13ns+t8dp3PrvPZdT67zmfX+ew6n13ns+t8dp3PrvPZdT67zmfX+ew6n13ns+t8dp3PrvPZdT67zmfX+ew6n13ns+t8dp3PrvPZdT67zmfX+ew6n13ns+t8dp3PrvPZdT67zmfX+ew6n13ns+t8dp3PrvPZdT67zmfX+ew6n13ns+t8dp3PrvPZdT67zmfX+ew6n13ns+t8dp3PrvPZdT67zmfX+ew6n13ns+t8dp3PrvPZdT67zmfX+ew6n13ns+t8dZ2vrvPVdb66zlfX+eo6X13nq+t8dZ2vrvPVdb66zlfX+eo6X13nq+t8dZ2vrvPVdb66zlfX+eo6X13nq+t8dZ2vrvPVdb66zlfX+eo6X13nq+t8dZ2vrvPVdb66zlfX+eo6X13nq+t8dZ2vrvPVdb66zlfX+eo6X13nq+t8dZ2vrvPVdb66zlfX+eo6X13nq+t8dZ2vrvPVdb66zlfX+eo6X13nq+t8dZ2vrvPVdb66ztGYlO3KWedJWeeg0TSbVtNusiZvOk3tcdrjtsdtj9setz1ue9z2uO1x2+O2x22PaI9oj2iPaI9oj2iPaI9oj2iPKA80LoFG02xaTbvJmrzpNN2m9hjtMdpjtMdoj9Eeoz1Ge4z2GO0x2mO2x2yP2R6zPWZ7zPaY7THbY7bHbI/VHqs9Vnus9ljtsdpjtcdqj9Ueqz12e+z22O2x22O3x26P3R67PXZ77Paw9rD2sPaw9rD2sPaw9rD2sPaw9vD28Pbw9vD28Pbw9vD28PboOt9d57vrfHed767z7IDykbSbrMmbTtNtiqKvzh+NptnUHrc9bnvc9rjtcdvjtke0R7RHtEe0R7RHtEe0R7RHtEeURzZHPRpNs2k17SZr8qbTdJvaY7THaI/RHqM9RnuM9hjtMdpjtMdoj9kesz1me8z2mO0x22O2x2yP2R6zPVZ7rPZY7bHaY7XHao/VHqs9Vnus9tjtsdtjt8duj90euz12e+z22O2x28Paw9rD2sPaw9rD2sPaw9rD2sPaw9vD28Pbw9vD28Pbw9vD28Pbw9vjtMdpj9MeXefWdW5d59Z1bl3n1nVuXefWdW5d59Z1bl3n1nVuXefWdW5d59Z1bl3n1nVuXefWdW5d59Z1bl3n1nVuXefWdW5d5951nh1Yjt+Fmk2raTdZkzedptsURVnnoPYY7THaY7THaI/RHqM9RnuM9pjtMdtjtsdsj9kesz1me3x1fn5JtymKvjp/NJpm02raTdbkTe3x1fnJtf/qHPTV+aPRNJtW026yJm86Te2x28Paw9rjq/OzklbTbrImbzpNtymKvjp/NJraw9vD28Pbw9vD28Pbw9vjtMdpj9Mepz1Oe5z2OO1x2uO0x2mP2x63Pb46P560mnbTn8edSd50mv48LkaJoq/OH/15XEuaTatpN1mTN52m2xSPssnr0WiaTatpN30e+A1GbzpNn0ckRdFX549G02xaTbvJmrzpNLXHaI/ZHrM9vjqPX9Jq2k3W5E2n6TZF0Vfnj0ZTe6z2WO2x2mO1x2qP1R6rPXZ77PbY7bHbY7fHbo/dHrs9dnvs9rD2sPaw9rD2sPaw9rD2sPaw9rD28Pbw9vD28Pbw9vD28Pbw9vD28PY47XHa47THaY/THqc9Tnuc9jjtcdrjtsdtj9setz1ue9z2uO1x2+O2x22PaI9oj2iPaI9oj2iPaI9oj2iPKI9sJHs0mmbTatpN1uRNp+k2tcdoj9Eeoz1Ge4z2GO0x2mO0x2iP0R5fncdMGk2zaTXtJmvyptN0m6Jotcdqj9Ueqz1We6z2WO2x2mO1x2qP3R67PXZ77PbY7bHbY7fHbo/dHrs9rD2sPaw9rD2sPaw9rD2sPaw9rD28Pbw9vD28Pbw9vD28Pbw9vD28PU57nPY47XHa47THaY/THqc9Tnuc9rjtcdvjtsdtj9setz1ue9z2uO1x2yPaI9oj2iPaI9oj2iPaI9oj2iPKI5vVHo2m2bSadpM1edNpuk3tMdpjtMdoj9Eeoz1Ge4z2GO0x2mO0R9d5dJ1H13l0nUfXeXSdR9d5dJ1H13l0nUfXeXSdR9d5dJ1H13l0nUfXeXSdR9d5dJ1H13l0nUfXeXSdR9d5dJ1H13l0nUfXeXSdR9d5dJ1H13l0nUfXeXSdR9d5dJ1H13l0nUfXeXSdR9d5dJ1H13l0nUfXeXSdR9d5dJ1H13l0nUfXeXSdR9d5dJ1H13l0nUfXeXSdR9d5dJ1H13l0nUfXeXSdR9d59sCFJd2mKMo6B42m2bSadpM1eVN7RHvE85jZD/fo8/Ck2bSadpM1edNpuk1RlHUOao/RHqM9RnuM9hjtMdpjtMdoj9kesz1me8z2mO0x22O2x2yP2R6zPVZ7rPZY7bHaY7XHao/VHqs9Vnus9tjtsdtjt8duj90euz12e+z22O2x28Paw9rD2sPaw9rD2sPaw9rD2sPaI7/+6fdLHMRJXB+uxE00ohMP8RKjMb8m6uEgTiLdDt0O3Q7dDt0O3Q7dLt0u3S7dLt0u3S7dLt0u3S7dLt2CbkG3oFvQLegWdAu6Bd2CbtFu+Haqh4M4iYu4iUZ04iFeIt0G3QbdBt0G3QbdBt0G3QbdBt0G3SbdJt0m3SbdJt0m3SbdJt0m3SbdFt0W3RbdFt0W3RbdFt0W3RbdFt023TbdNt023TbdNt023TbdNt023YxuRjejm9HN6GZ0M7oZ3YxuRjenm9PN6cYsGcySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnMksEsmcySySyZzJLJLJnMksksmcySySyZzJLJLJnMksksmcySySyZzJLJLJnMksksmcySySyZzJLJLJnMksksmcySySyZzJLJLJnMksksmcySySyZzJLJLJnMksksmcySySyZzJLJLJnMksksmcySySyZzJLJLJnMksksmcySySyZzJLJLJnMksksmcySySyZzJLJLJnMksksmcySySyZzJLJLJnMksksmcySySyZzJLJLJnMksksmcySySyZzJLJLJnMksksmcySySyZzJLJLJnMksksmcySySyZzJLJLJnMksksmcySySyZzJLJLJnMksksmcySySyZzJLJLFnMksUsWcySxSxZzJLFLFnMksUsWcySxSxZzJLFLFnMksUsWcySxSxZzJLFLFnMksUsWcySxSxZzJLFLFnMksUsWcySxSxZyBJPjEZkCXAQJ3ERN9GITjxEui26bbptuiFLTuIibqIRnXiIlxiNyBLgINLN6GZ0M7oZ3YxuRjejm9PN6eZ0c7o53ZxuTjenm9PN6Xboduh26Hboduh26Hboduh26Hbodul26Xbpdul26Xbpdul26XbpdukWdAu6Bd2CbkG3oFvQLegWdIt2278fcRAncRE30YhOPMRLpNug26DboNug26DboNugW2bJ9/WzM7sOC6Mxs2TsxEGcxEXcRCM68RAvMRoX3RbdFt0W3RbdFt0W3RbdFt0W3TbdNt023TbdNt023TbdNt023TbdjG5GN6Ob0c3oZnQzuhndjG5GN6eb083p5nRzujndnG5ON6eb0+3Q7dDt0O3Q7dDt0O3Q7dDt0O3Q7dLt0u3S7dLt0u3S7dLt0u3S7dIt6BZ0C7oF3YJuQbegW9At6Bbtln2MhYM4iYu4iUZ04iFeIt0G3QbdBt0G3QbdBt0G3QbdBt0G3ZglxiwxZokxS4xZYswSY5YYs8SYJcYsMWaJMUuMWWLMEmOWGLPEmCXGLDFmiTFLjFlizBJjlhizxJglxiwxZokxS4xZYswSY5YYs8SYJcYsMWaJMUuMWWLMEmOWGLPEmCXGLDFmiTFLjFlizBJjlhizxJglxiwxZokxS4xZYswSY5YYs8SYJcYsMWaJMUuMWWLMEmOWGLPEmCXGLDFmiTFLjFlizBJjlhizxJglxiwxZokxS4xZYswSY5YYs8SZJc4scWaJM0ucWeLMEmeWOLPEmSXOLHFmiTNLnFnizBJnljizxJklzixxZokzS5xZ4swSZ5Y4s8SZJc4scWaJM0ucWeLMEmeWOLPEmSXOLHFmiTNLnFnizBJnljizxJklzixxZokzS5xZ4swSZ5Y4s8SZJc4scWaJM0ucWeLMEmeWOLPEmSXOLHFmiTNLnFnizBJnljizxJklzixxZokzS5xZ4swSZ5Y4s8SZJc4scWaJM0ucWeLMEmeWOLPEmSXOLHFmiTNLnFnizBJnljizxJklzixxZokzS5xZ4swSZ5Y4s8SZJc4scWaJM0sOs+QwSw6z5DBLDrPkMEsOs+QwSw6z5DBLDrPkMEsOs+QgS07iJhrRiYd4idGILAEO4iTSbdJt0m3SLbNkjsRLjMbMkoeDOImLuIlGdCLdFt0W3TbdNt023TbdNt023TbdMkvmL/ESozGz5OEgTuIibqIRnUg3o5vRzenmdHO6Od2cbk43p5vTzenmdDt0O3Q7dDt0O3Q7dDt0O3Q7dDt0u3S7dLt0u3S7dLt0u3S7dLt0u3QLugXdgm5Bt6Bb0C3oFnQLukW7Zc9n4SBO4iJuohGdeIiXSLdBt0G3QbdBt0G3QbdBt0G3QbdBt0m3SbdJt0m3SbdJt0m3SbdJt0m3RbdFt0W3RbdFt0W3RbdFt0W3RbdNt023TbdNt023TbdNN2bJZZZcZsllllxmyWWWXGbJZZZcZsllllxmyWWWXGbJZZZcZsllllxmyWWWXGbJZZZcZsllllxmyWWWXGbJZZZcZsllllxmyWWWXGbJZZZcZsllllxmyWWWXGbJZZZcZsllllxmyWWWXGbJZZZcZsllllxmyWWWXGbJZZZcZsllllxmSTBLglkSzJJglgSzJJglwSwJZkkwS4JZEsySYJYEsySYJcEsCWZJMEuCWRLMkmCWBLMkmCXBLAlmSTBLAlkyE514iJcYjcgS4CBO4iJuIt0W3RbdFt0W3TbdNt023TbdNt023TbdNt023TbdjG5GN6Ob0c3oZnQzuhndjG5GN6eb083p5nRzujndnG5ON6eb0+3Q7dDt0O3Q7dDt0O3Q7dDt0O3Q7dLt0u3S7dLt0u3SDVniiYd4ien2/RmtQJYAB3ESF3ETjejEQ7zEclu/3484iJO4iJtoRCce4iXSbdBt0G3QbdBt0G3QbdBt0G3QbdBt0m3SbdJt0m3SbdJt0m3SbdJt0m3RbdFt0W3RbdFt0W3RbdFt0W3RbdNt023TbdNt023TbdNt023TbdPN6GZ0M7oZ3YxuRjejm9HN6GZ0c7o53ZxuTjenm9PN6eZ0c7o53Q7dDt0O3Q7dDt0O3Q7dDt0O3Q7dLt0u3S7dLt0u3S7dLt0u3S7dLt2CbkG3oFvQLegWdAu6Bd2CbsySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnMksEsGcySwSwZzJLBLBnMksksmcySySyZzJLJLJnMksksmcySySyZzJLJLJnMksksmcySySyZzJLJLJnMksksmcySySyZzJLJLJnMksksmcySySyZzJLJLJnMksksmcySySyZzJLJLJnMksksmcySySyZzJLJLJnMksksmcySySyZzJLJLJnMksksmcySySyZzJLJLJnMksksmcySySyZzBL0vX5/V3ah7xWYWfLwc1srcRIXcRON6MRDvMRozCx5SLdDN2TJSdxEIzrxEC8xGpElwEGcRLpdul26Xbpdul26XboF3YJuQbegW9At6BZ0C7oF3aLd0Pf6cBAncRE30YhOPMRLpNug26DboNug26DboNug26DboNug26TbpNuk26TbpNukW2ZJ/pVe9L0+vMTP7f2x3R9xEPNM7sRF3EQjOvEQLzEa8UfqgYNIt023TbdNt023TbdNt003o5vRzehmdDO6Gd2MbkY3o5vRzenmdHO6Od2cbk43p5vTzenmdDt0O3Q7dDt0O3Q7dDt0O3Q7dDt0u3S7dLt0u3S7dLt0u3S7dLt0u3QLugXdgm5Bt6Bb0C3oFnQLukW7oe/14SBO4iJuohGdeIiXSLdBt0G3QbdBt0G3QbdBt0G3QbdBt0m3SbdJN3wmHImbaEQnHuIlRiP6S4CDOIl0W3RbdFt0W3RbdFt023TbdNt023TbdNt023TbdNt023QzuhndjG5GN6Ob0c3oZnQzuhndnG5ON6eb083p5nRzujndnG5Ot0O3Q7dDt0O3Q7dDt0O3Q7dDt0O3S7dLt0u3S7dLt0u3S7dLt0u3S7egW9At6BZ0C7oF3YJuQbegW7Tb63sFDuIkLuImGtGJh3iJdBt0G3QbdBt0yyzZnmhEJ+adwk28xGjMLHk4iJO4iJtoRCfSbdJt0m3RbdFt0W3RbdFt0W3RbdFt0W3RbdNt023TbdNt023TbdNt023TbdPN6GZ0M7oZ3YxuRjejm9HN6GZ0c7o53ZxuTjenm9PN6eZ0c7o53Q7dDt0O3Q7dDt0O3Q7dDt0O3Q7dLt0u3S7dLt0u3S7dLt0u3S7dLt2CbkG3oFvQLegWdAu6Bd2CbtFu6Ht9OIiTuIibaEQnHuIl0m3QbdBt0G3QbdBt0G3QjVnizBJnljizxJklzixxZokzS5xZ4swSZ5Y4s8SZJc4scWaJM0ucWeLMEmeWOLPEmSXOLHFmiTNLnFnizBJnljizxJklzixxZokzS5xZ4swSZ5Y4s8SZJc4scWaJM0ucWeLMEmeWOLPEmSXOLHFmiTNLnFnizBJnljizxJklzixxZokzS5xZ4swSZ5Y4s8SZJc4scWaJM0ucWeLMEmeWOLPEmSXOLHFmiTNLnFnizBJnljizxJklzixxZokzS5xZ4swSZ5YcZslhlhxmyWGWHGbJYZYcZslhlhxmyWGWHGbJYZYcZslhlhxmyWGWHGbJYZYcZgn6Xr8/6rrQ9/pwECdxETfRiE48xEuk26LboltmyfeFzgt9rw83Ma/tJDrxEC8xGpElwEGcxEXcRLptum26bbptuhndjG5GN6Ob0c3oZnQzuhndjG5ON6eb083p5nRzujndnG5ON6fboduh26Hboduh26Hboduh26Hbodul26Xbpdul26Xbpdul26XbpdulW9At6BZ0C7oF3YJuQbegW9At2g19rw8HcRIXcRON6MRDvES6DboNug26DboNug26DboNug26DbpNuk26TbpNuk26TbpNuk26TbpNui26Lbotui26LboxSy6z5DJLLrPkMksus+QySy6z5DJLLrPkMksus+QySy6z5DJLLrPkMksus+QySy6z5DJL0PfqN/EQL/Fz8+/dLfpeHw7i53Z24iJu4ud2LNGJh3iJ0ZhZ8nAQJ3ERN5Fuh26HbodumSX3e+lA3+vDQfzcbq5DZsnDTfzcbq5DZsnDQ/zcvq+lW+h7BWaWPPzcIvcis+ThIv65/X2Wm2hEJx7iJUZh9r0WDuIkLuImGtGJh3iJdBt0G3QbdBt0G3QbdBt0G3QbdBt0m3SbdJt0m3SbdJt0m3SbdJt0m3RbdFt0W3RbdFt0W3RbdFt0W3RbdNt023TbdNt023TbdNt023TbdNt0M7oZ3YxuRjejm9HN6GZ0M7oZ3ZxuTjenm9PN6eZ0c7o53ZxuTrdDt0O3Q7dDt0O3Q7dDt0O3Q7dDt0u3S7dLt0u3S7dLt0u3S7dLt0u3oFvQLegWdGOWBLMkmCXBLAlmSXSW7F9nyf51luxfZ8n+dZbsX2fJ/nWW7F9nyf51luxfZ8n+/eg26DboNug26DboNug26DboNug26DbpNuk26TbpNuk26TbpNuk26Tbptui26Lbotui26Lbotui26Lbotui26bbptum26bbptum26bbptum26WZ0Q5bcxElcxM9trEQjOvFz+36Vc2ffa2E0ZpbMdMsseTiJn9vXUb6z77XQiJ/bjMRDvMTPbf0+zCx5OIif28oLyix5uImf28rBMkseHuLnti0xGjNLHn5ulvPNLHm4iJ+b5Zplljx04ufmOd/MkofRmFniuWaZJQ8n8XPzXPXMkodGdOIhXmIUZt9r4SBO4iJuohGdeIiXSLdBt0G3QbdBt0G3QbdBt0G3QbdBt0m3SbdJt0m3SbfMku++emffa+Ehfm7fn1ja2ff6MLPk4SBO4iJuohGdeIh0W3TbdNt0yyz5/kzQzr7Xwk1Mt5PoxENMt7zMzBJgZsnDQZzERdxEIzrxEOlmdMssuTnfzJKHk/i53ZxvZslDI35usRIP8RI/t8jtzix5OArRNDmSPofvK9J3dkfO7x3Bzu7IwmjME/dwECdxETfRiE6k26TbpNui26Lbotui26Lbotui26Lbotui26bbptum26bbptum26bbptum26ab0c3oZnQzuhndjG5GN6Ob0c3o5nRzujndnG5ON6eb083p5nRzun0nbn3fgr6zO7JwEhdxE43oH+ZB/V69Ci8xGm+65fm9g5huN3ERN9GITjzES4zG+BEHkW5Bt6Bb0C3SLRIP8RKjcP1+xEH83LJ4szuycBM/t7xvye7IwkO8xGj8Xr0KP7dxEydxETcx3XJmw4mH+LlNS4zGL0sKP7eZg31ZUriIOe5M/MbNG6bseFwrr/jLh7Vy6l8+FC7iJhrRid+4eRuVHY+F0bh/xHTLOexJ/Nx2TvLLh0IjOvEQL/Fz+5o4dnY8Fg7iJKbbSdzEdMtJmhMP8RI/t7yry47HwkGcxEXcxM/NcjpfPhQe4iWmW04y8+HhIKbbL3ERNzEas+YtryKrO28cs0nxb9KJTjzES4zGLGnPSWZJP5zERdxEI35ueYeSTYqFlxiF2aS4vr8ZubNJsXASP7czEzfRiOm2E9PNEtPtJEZjlvTDQZzERfzcblpkST904iFeYjRmST8cxElcRLpNuk26TbpNuk26Lbpl+ee9UzYpFi7iJhrRiTnud6KyHbFwECdxEXdjVuH3QHZnr2DhZxG581kXkXucdfEwGrMuHg7iJC7iJhrRiXQ7dDt0u3S7dLt0u3TLcopc6iycvMnMjryVt5PZkVc4iTlCHs8snIdGdOIhXmIUZkde4SBO4iJuohGdeIiXSLcske/p+c4uu5V3NoZiwH9wiJcYjSgG4CDmuDdxEXO+kWhEJ/6Nu/PeKDvndj73yM65wjx9O9G+/+9MdOIhXmKO++1mds4VDmK65bh7ETeRbptum26bbjsajbtp3E3jbhp307ibxt007qZxN427adxNp5vTzenmdHO6Od2cbqjYPBqozTwaWZvY46zNh0bk2Tk8O4dnB7WZ5wG1CRx9CFCbwEX0Pho3+jzEjzj6aMTsDYhF3ETuZngfgjjES4w6BNnhVjiI7ZYdboWbaMQ+O9kmtr/vUd/ZJlboxJzOTbzEaFw/4iBO4iJuohE/t7zhzDaxwkuMxiych4P4uY2cbxbOw000YrqdxEO8xHTLmdmPOIjpFomLuIlG/Ny+r2bZ2RC28/llNoQVDuIkfuPOlfiNO3OPvxLZeRefDWGFh3iJ6ZZXfH7EQZzEdMtr+2po5xPQ7ALbecefXWB75XS+Gvp7LU+Mxq+GCgdxEhdxE9MtVz0r6+HnttP4u4ksjMast4eDOImfWz5kzS6wQiM6Md1yOllvD6Mwu8B23vFnF1jhJKZbJH5uNhKN6MRDvMRo/G4id96kZxdY4SQu4iYa0YmHeInROOk26TbpNumWoWB5mRkKD29jFm8+d86+rMLPLd8zZF9W4SBO4iJu4ndt+fYh+7L+8iDxEC8xGrN4Hw7iJC7iJhqRbkY3o5vRzenmdHO6ZfHmQ+HstfrLg8TcizxnWaYPB3ESF3ETc1ygE3O+uW9ZsQ+jMWvz6wjZ2T+182l09k8V5h7nJLMKsQFZhcCswoeD+I2b776yf6pwE603Nqvw4SHSLdot+6cKB3E2ZrUc4CQuYubOTTSiEw/xEqMxqyXfAWafU+EkLuImGtGJh3iJ0bjotui26Lboli+h+VQ+O5oKLzEaswofDuIkLuImGpFum26bbptuRjejm9HN6GZ0M7oZ3YxuRjejm9PN6eZ0c7o53ZxuTjenm9PN6Xboduh26Hboduh26Hboduh26Hbodul26Xbpdul26Xbpdul26XbpdukWdAu6Bd2CbkG3oFvQLegWdIt2y46mwkGcxEXcRCM68RAvkW6DboNug26DboNug26DboNug26DbpNuk26TbpNuk26TbpNuk26TbpNui26Lbotui26LbotuzJJglgSzJJglwSwJZkkwS4JZEsySYJYEsySQJSfxEqMRWQIcxElMi5VoRCce4iVGIwIEOIiTuIh0c7o53ZxuTjen26Hboduh26Hboduh26Hboduh26Hbpdul26Xbpdul26Xbpdul26XbpVvQLegWdAu6Bd2CbkG3oFvQLcrNfr8fcRAncRE30YhOPMRLpNug26DboNug26DboNug26DboNug26TbpNuk26TbpNuk26TbpNuk26Tbotui26Lbotui26Lbotui26Lbotum26bbptum26bbptum26bbptumm9HN6GZ0M7oZ3YxuRrfMkvtLvMRozCz5+o4t25gKJ3ERN9GIn9tNt8ySh5eYbvPDzJKHgziJi7iJ6eaJTjzES4zGzJKHgziJi7iJdLt0u3S7dMss+Z7WWbYxFQ7iJC7iJqbbTXTiIaZbJEZhtjEVDuI37vfhgmVr0v4e1lu2JhVGY+bD99zesjWpcBK/+X7P7S1bkwqN6MR0s8RLjMbMh4c5rifmCCfxEC8xrzgtsuYfDuIkLuImGvHPzX65Ol/NF15izjdXMmv+4SBO4iJuohGdeIiXSDej21fz9ssd+mrefjn1r+YLN9GITjzES4zGr+YLB5FuTjenm9PN6eZ0c7o53U665c6fQZzERdxEI6bbTDzES0y3PDD3RxzEz23kYF/NF27i5zbyTH41X3iIn9tMt6/mH341X/i5zdzCr+YLF/FzW3nOvpovdOLntnI6X80XRmF+zZ59DyX/cBAn8XP7vubJ8mv2Co34ue2deIiX+Ll9D/ksv2avcBA/t+/DfsuOscJN/Ny+Z22WX7NXeIifm6fblw8Pv3wo/Nw8r/i7fyhcxM/tpNt3/1DoxM8tXwCzkawwGr8ssXwBzEaywkn83PL1LRvJCo34uWXoZiNZ4SV+bhnF2UhWOIifW8ZgNpIVbqIRnXiIlxiN9iMOIt2MbkY3o9uXJf7LhfqypPAS48PcrC9LCgfxz81HLtSXJYWbaB/mZn1ZUniIn1vWZjaSPfyypPBzm7mSX5YULuLnNtPty5JCJ35u39eqWTaSFUbjlyX+feRg2UhWOImfWxZvNpIVGvFzWxjsEC/xc1s52JclhYP4uaE2vywp3MTPbeeSfFlSeAqzZQwxmM1h9n1kZtkcVmhEJx7iJUZj5sPDb74bmPONxEXcRCM68RAvMRq/fCgcRLpNuk26Tbp9+eBft5Bly1jhJUbjlw+Fg5iv/jdxETfxc8uczJYxz0TMlrGH+0ccxElcxE00ohMPkW6bbkY3o5vRzehmdDO6Gd2MbkY3o5vTzenmdHO6Od2cbk43p5vTzel26Hboduh26Hboduh26Hboduh26Hbpdul26Xbpdul26Xbpdul26XbpFnQLugXdgm5Bt6Bb0C3oFnSLdsv+s8JBnMRF3EQjOvEQL5Fug26DboNug26DboNug26DboNug26TbpNuk26TbpNuk26TbpNuk26Tbotui26Lbotui26Lbotui27Mks0s2cySzSzZzJLNLNnMks0s2cgSSzzES4xGZAlwECdxETfRiHQzuhndjG5ON6cbssQTF3ETjejEQ0y3lRiNyBLgIE7iIm6iEZ14iHQ7dLt0Q5bcxElcxM8tb3rzS/IKnfi5eV4bUiN/DPlwEjfxG+H7fNOyza7wEC8xCrPNrvCb79doatlmV7iIm5hulujEQ0w3T4zGzIeH6XYSJ3ERNzHdbuLnlnfx2Xzneb+ezXeFgziJ37j5uCmb7zyfXWXzneeDmmy+83zqk19xV3iJ0ZhJcHNmmQQPJ3ER0y0SP4t8OpPdeR45nSz/fMyS3XmeT0ayO69wECdxETfRiOmWa5bl/zDqGJn9iIM4iYu4iUZ04iFeIt2cbk43p5vT7av5k89ssiWv0Innw1zJr+YLo/Gr+cJBnMRF3EQjOpFuh24n3XLf7o84iJO4iJuYbnnF14mHeInplscofsRB/Nzy3Ve2+p18n5WtfoWf28hj/+VD4ec2cjpfPhRGYbb6FQ7iJC7iJhrRiYd4iXQbdBt0G3QbdBt0G3QbdBt0G3QbdJt0m3SbdJt0m3SbdJt0m3SbdJt0W3RbdFt0W3RbdFt0W3RbdFt0W3TbdNt023Tb6WaJm2hEJ556ScouxcJozCx5OIiTuIibaMS8ii9esx8Rr3rZj3i+nkjLfsTCTTSiEw/xNmYSfP2Tll8699bh8IoPrzhr/uEl5vp+9ZbthoWDOInczUu3y9283M3L3bzczcvdzJrHHLLmH04idxM1n3NAzQOdSDfWvLPmD2v+sOYPa/6w5s+vz875GdGJh3hrDufXK3nGj0g31vxhzR/W/GHNH9b8Yc2f0ft2UPOJ80ccxN63g5oHbiLdWPOHNX9Y84c1f1jzhzV/WPNn9b6dxZVcXMnFlVxcyaz5fBCWzY0Ps+bz6Vc2NxZO4iJ+bjPnkDX/0ImHeInRaD/iIKZbTtIWMe8fciXtVBVmG+P5+n8t2xgf+o84iNwh5w45d8iN6MRD5Olz7tDhDh3u0OEOHZ4+psY5PA+H5+HwPGQ+5IPG/CK5wknM1cl1yHzIjxGyEbLQiYd4idGY+fBwECexn10dPD0AHuIlRuHF0wPgIE7iIm6iEZ14iJdIt0G3QbdBt0G3QbdBt0G3QbdBt0G3SbdJt0m3SbdJt0m3SbdJt0m3SbdFt0W3RbdFt0U3PnO8i26Lbotui26bbptum26bbptum26bbptum26bbkY3o5vRzehmdDO6Gd2MbkY3o5vTzenmdHO6Od2cbk43p5vTzel26Hboduh26Hboduh26Hboduh26Hbpdul26Xbpdul26Xbpdul26XbpFnQLugXdgm5BN2bJZZZcZsllllxmSTBLglkSzJJglgSzJJglwSwJZkkwS4JZEsySYJYEsySYJcEsCWZJMEuCWRLMkmCWBLMkmCXBLAlmSTBLglkSzJJglgSzJJglwSwJZkkwS4JZEsySYJYEsySYJcEsCWZJMEuCWRLMkmCWBLMkmCXBLAlmSTBLglkSzJJglgSzJJglwSwJZkkwS4JZEsySYJYEsySYJcEsCWZJMEuCWRLMkmCWBLMkmCXBLAlmSTBLglkSzJJglgSzJJglwSwJZkkwS4JZEsySYJYEsySYJcEsCWZJMEuCWRLMkmCWBLMkmCXBLAlmSTBLstfy5Ges2WtZGA89ey0LB3ESF3ETjejEQ7xEug26DboNug26DboNug26Za/E94GtZ69lYTTOH3EQJzHdZuImGjHdVuIhXmJe2/4w36E8HMRJXMRNNKITD/ES6bbptum26bbptum26bbptum26bbplu9QvuYaz17Ls3L58h3Kw0XcRCM68RAvMRrzfctDunn1Jnn2WhZuYvUmefZaFh7id0pGXlD2XQGz7+rhIE7iIm6iEZ14iHQ7dMv3LV/Lgmf/5N87zcRvdb5fd/Tsnyy8xGjM9yI7T18+ldg5bj6VeHiIlxiF2RNZ+K3v15Hg+dVuhYu4iUZ04iFeYrp9NZT9k4WDOInpdhI3MbstItGJh3iJ0ZhPJb6vafHslDwb/99LjMas2K9lwbNTsnASF3ETjejEQ7zEaNx023TbdNt023TbdNt023TbdNt0M7oZ3YxuRjejm9EtK9Zyh7JiH15iNGbFPhzEdLPERUy33ON80vDQiYd4idGYTxoeDuIkLiLd8kmD5dHIJw0Pz2tNdHRKPozG+yPmuHl2smI9F+pWP6Kj+/FhNEb1Izq6Hx9O4pcwmbSv+xFoRCce4iVG4et+BA7iJC7iJn6r/v3SpmdH4/l+0dWzo/F4/gdZsQ8XcRNzhO+CskvxfL+b6tmlWDiJi7iJRsz1jcRDvMRozDp+OIiTuIjpZolGdOIhfm7fJ7qeXYoPs46//knPLsXCSVzETTSiEw/xEqPR6JZdipY7lF2KDxexuksdXYoPnZjdpXkV2fH8MBqz4/nhIE7iIm6iEZ1IN6dbVuzJw5W1eXKpszZPnp2szYeHeBvzKeD3GbZnN+E5ubH5avrQiYd4idGYz/tuLl8+73s4iYu4iUZ04iGmWx7lfOVNzB7DwkFMt5m4iOn2XXG2EJ7vtxw8WwgLJzF/LBI3sVqMfXWLsa9uMfZsIXyYZfo13Hq2BZ7v03XPtsDsNvZsCyw8xPu6jT3bAh9m2/DDbFJeiZO4iJtoRCce4iVGY7YNP6TbpluWXuSiZpFFTj2LLHKSWWQPB3ESc4TcrHwBjFz1fAEE5gvgw0GcxEX8u+L7y6X+CqfQiYd4idH4vQAWDmK65YHJF8CHm2jEdMs9PoeYbrlmJxrvjziIk7iIm2hEJx4i3fLFMlMum/oKB/HbzUyNbOor3MRscM+ryBfLh4d4iVGYTX2FgziJi7iJRnRirtl3uLJR735Nv56Nejffb2ajXqERnZgjfAWZzXd/z/ETF3ETjejEQ/zW92tZ8Gy+e/jVZuEgTuIibqIRc7438RAvMRp3uq3EQUw3S8z55sXvS4xG+xEHcRIXcRON6ES65QvgzYXKF0Cg/4j5Cw+5sfkC+HAR8zzkZuUL4EMnHuIlRmO+9Xw4iJO4iHQ7dMuKHbnUWZszp561OXOSWZsPN9GI3wgztyVyhDy/MYmLuIlGdOK3vjOPfVxiFGaTXOEgTuIibmK6zUQnHuIlptu3x9kkV5hukTiJi7iJn9v3ZUmeTXKFh3iJ0fjd9BYO4iQu4ibSbdYvlDha5x5eYv1CiaN17uEgfo8Jf7kO+ej64SYa0YmHeInRmI+uHw4i3Tbddq4ZMFcnZ5Z1nO+HskmucBIXMUfIfbMc4Tvg2fhWOIiTuIib+K1vPmbJxrfCQ7zEaMzX2IeDOInplsfzbKIRnZhuucdZscCs2HySk21rd+fF5yvkw0uMxvgRB3ESF3ETjUi3qF/K8mxbK4zCbFvL38TybFsrnMRMxJu4iUZ04iFeYjTmL8s8HMRJpNugW9ZmPnnKVrSbD4CyFe3mo55sRStcxE38Rsi3UdledvMNU7aXFU7iIm6iEb/1tZ14iJcYjfkK+XAQJ3ER0y1XfRvRiYeYbpYYjVmF+TjEswofTuIipluuTr6aPnTiIV5iNGbFPhzESVxEuuGX3nIv8EtvwEPMX3rLpcYvvSXil96AX0blXVB+NV7hIm6iEZ14iJcYjfmh0EO6Xbrla6wDv9XxnFnWcb4tyVa0wkGcxBwh9y1fTfPZSraXAbO9rHAQJ3ERv/X9viPMs72s0ImHeInRmK+mDwcx3XbiIm6iEdMtEk9jVmzeQWcjWeEkLuImGvEbN98oZCNZ4XcV+e4gG8keZnWfnE5W98N0s8RFTLdcvqzuh+l2Eg8x3XJJsrqBWd15q5aNZIWfW95lZiNZ4eeWt5bZSFb4ueUTgWwkK/zcbl5QVjcwq/vmBWV1P0y3vKCs7ofplheU1f0w3fKCsrofplteUFY3MO+V8+1ktpcVTuIibqIR0y2XJF+PH17i55bv3LO9rHAQJ3ERN9GITjzES6TbpVveQUeub75K59ODbCS7+XAgG8kKozGr++Egcr7B+QbnG5xvcL7B+QbnGz3fbC8rHMRJXESvC8qWMVxQtoxhktkyVjiJi7iJPd9sGSs8xEvkfCfnOznfyflOznduIt0m3bK6cUFZx7igxfkuzjfr+KETD5HzXZzv5nw357s53835bs53c76b891cnU23TbesWFxQ1iYuyDhf43ztEvv0ZWtXIXczX3mz9LK1qzBfC/EfGNGJpxFVeBJzhJv4jZBvPdGu9dCJ3wj5fhPtWg+jEa+mkTiIk7iIm2hEJx7iJUZj0C3ohioE/o0Q+UwsW7Ai39hkCxYwW7AKB3F/uBNzBEu8xGgcP+IgTuL68CRuohGdeIiXGI3zR0y3lTiJi7iJ6XYTnfi55U1OtlUVRuP3Gls4iJO4iJtoRCfSLd+b5vt5tFUB873pw283Z04y35s+XMQ8qZ5oRCce4iVGY7ZVPRzESVxEuhndLNfsO1zZKhX5TCxbpSJ7BLJVqnATjZgj5GAnR8iLP5O4iJtoRCfm+kbiJUbj/REHcRIXcRPTLY/ydeIhXuLnllGR7U+Fn1s+WMr2p8LPbeaPfRUbWNRsf1r4MSce4iXGw5PtT4WDOImLuIlGdOJ3bd85O9n+VBiNWfMPB3ESF3ETjejEdIvES4zGrPmHgziJ33/79TGdbF4qHMRJXMRN/Gb2Pd852bz0cOd/a4mbaMT8b0/iIV5i7lBi1tvDQcwdynXIenu4iblDnujEQ7zEaMw2xoeDOImLuIl0c7p5rm9OJ2tz5ynJ2vweAJ1sJyo0ohO/EXYuddbbzvXNenu4iUZ04iF+67tzZllvwKy3h4M4iYu4iUZMt5l4iJcYhdl6FF+Dz8nWo8LP7XtscbL1KAz/7SYa0YmHeInRmPX2cBAnkW746pWdaEQnfmfne2h2Br56BRiN+OqVlTiIk7iIm2hEJx7iJUbjotuiW9amAXN1cmYrV8cTo3H/iIOYI9zEHCESLzEa7UccxEn81vdrKjnZZFRoRCce4iVG41ebhemWZydfNx8u4iamW+6xeyNa/fI/yNr03OOszYebaEQnHuIlRmO+bj4cRLpdul26Xbpdul26XbpdugXdgm5Bt6xjz6ORdey53VnHD514iJcYhdlkVDiIk7iIm/i9988XH3zF2sNDzJamX2I05lPhh9++5QsgvmLt4SJuohGdeIiXGI3ZNvyQbpNueVf8tSmdbEgKz6nnq+nJSear6cNBnMRvhO8p1ckmo/geTZ1sMnqYtflwECdxEb/1/R5YnWwyKnTiIV5iNGYdPxzEdBuJi7iJRky33OOs44fplmuWdQzMOn44iJO4iJtoRCceIt3yM9ZMxPwqtMJB/HYzcz2/Cq1wE7+zk69Z2ZBUeIiXGI3ZLPhwECdxETeRbpduWd0nD1fW8c2lzjq++R9kHT80ohO/Eb6ngCebjOJ79HeyyahwE43oxEP81vd7IHjy680e5mvsw0GcxEXcRCOm20o8xEuMxryn/R4/nuxYKky3SDSiE79xv5amkx1Lhd+43xOXkx1LhYP4jRtpnPe/DzfRiE48xEuMxqzuh4NIt023TbdNt023TbdNt003o5vRzehmdDO6Gd2yuiOPUVb3w0uMxqzuh4P4HftfblYWL85kFu/DS+ShPTlYnr7DQ3t4aA8Pbb40f0+0TrY0FV5iTjKPXL4048fypfkhS+TS7dLt0u2yRC5LJF+aH0Zj0C1okRUbuSRZsQ8P8W+wvxvmX3I0Z89S8xCeySN5CW9hE/bkmYzxv93Orx5rHsIYfycv4S1swi58hK8wfL8FyS8hax7CU3gJb2ETdvLCmCcZP3uTt7AJu/ARvsI555Frvn/CQ3gKL+EtbMIunL4j92hf4SDbT3gIT+HFvbMtbMIunKXy5WX2PtWy+RRewlsYl5JHyWWpPMjnJ4wpp+2ZwksYS5XH5MgWHdmiI1t0xPeI7xXfO4SnsByNK0fjiu8Vr6zovH/LpqnCSVxEXEcex6zuvGvL/qjCvu8z1Pb3aO8YavvxFMYineTNHzWiEw/xEuk4fsRBnMRFpNugBWr4a0I7hhp+PIRz/t9jvWOo4cdb2IRzk7/PBk62QjVf4SCjzr8GsGOo85lzQ50/NmGMv5OP8BUOMur88RCewvC15C1swi58hK9wkFHnjzFm7rvhZ3Nt7QoH2X/CQ3gK55zzrZWhoB+bsAsf4SscZBT64/RduUco9MdLeAubsAsf7h0K/XGQUeiPUS+RbFy368JH+ArjWvIshaxVLOEtjDmnb7jwEcZa5TkJ7pH/fsJDeAov4S1swi58hK+w+A7xGv3EJ7/+q9CJh4jr+M5jtlfhOU+2VxUuIjbWk03YhbFIJ/nyR/shU7ZjFdJx0XHREY+/gEZ04iHSbdMCRZwPbR1F/NiEc/75NNdRxI+vcJBRxPlE1/Fi/XgKL+H0zfeAjkLPN62OQn8cZBR6vm91FPrjKbyEt7AJuzB8c6NR6I+DjEJ/PISn8BLewhgz9x2vyjvXFoX7eAlvYRN24ZxzPkd2FPTjIMdPeAhP4SW8hdPXco9Q6I+P8BWO5oNCfzx67w4K/fES3sKol0iOXreDG/XHQ3gK41pmMtfq4Ib88RXGnNMXL+aPhzDWaidzj87cwiYsvlN8p/jixRyMF/PHQ3gKi+8Sr6xqLNvqD0+yDatwEHEdltyfnmTHVeEhYmM9Ocgo7sdYpFx4689rsuuqcBPpaHQ0Oub9+MNozPfXDweRbk4LFHEm90ERPw4yivjrUzwHRfx4Ci/h3OR8DH/wav3YhY9w+uZD94NCz2fQB4X+eAlj/Jw/Cv2xCx/hKxxkFPpj+OZGo9AfL+EtbMIufIRv80UR5xPhi1flrzfyXBTu4yN8hYOMgn6cc87HxRcF/XgJb2ETduEjfIXTN5/eXhT64yE8hZfwFrbeu4tCf3yELxnFnS+2F0WMdcOd+mMTdmFcy3eW7pa1wh354ymMOacvXswfmzDWaifLHm3Zoy17ZOJr4mviixfzx1tYzobJ2TDxNfFCT4gnLuImGhHXkecxn6DlG8Rs2CocRGxs/iCK+/EWxiLhv3f+6CFeIh0vHS8d7yQu4iYakW6XFijifL5/UcSPl3DO/+YBRxE/duEjnJucz9UvXq2TA6/Wj4dw+uaz9UCh52PpQKE/PsIYfycHGYX+eAhP4SW8heFryS58hK9wkFHoj4fwFMaYJxk/+61toHAfD+EpvIS3cM75+32REyjox0f4CgcZhf54CE/h9M2n+oFCf2zCLnyEr3Bw71Doj4fwFEa9RPLhuuFO/XGQcaf+GNeSZ8llrXBH/tiFMef0xYv54yDjxTwfuceRPTqyR0f26IjvEd8jvngxf3yF5WxcORtXfK94ZVXnU180gT28xGjEi3c++Ee/1w+4iUbExnryEb7CWKS/hb+/X3Ve3t9vECdxETfRiE48xEuMxkG3QQsU8fec//5QxI+P8Df/8T3bv9nWVZxFXDyEZ/JIXsJb2IQ9eSZj/PXx+gkPYYy/k5fwFjZhFz7CVxi+uSb7JzyEp/AS3sIm7GTDmLnvhp/NtbUtbMIufISvcM555JpnQRcP4Sm8hLewCbtw+o7coyz04iCfn/AQnsKLe3e2sAm7MOolPr6D63an8BLewriWPEtX1uoGOX7CmHP6xhRewlirPCchexSyRyF7FOIb9M2es+YhPIWX8BY2YXplZ9nf3CwZ1+LJU3gJb2ETduEjfF9z/R34rYlE/NYEcBAncRE30Yj3/WbBHSj5797qDpT84yE8hXE5OQxK/rEJu/ARvsJBxq9V7MRBnMRF3EQjOvEQb2P+IhSu2ORqEAaPt7AJy9WYXI3J1ZhczQsD8BCewrwg5wU5L8h5Qc4Lcl6QR+Ph8h0uH377Ka/4yNWg1B8f4SssV3Plaq5czZWruXImrpyJK2fi8oIuL+jygi4vKHhBwQsKnofg8gWXD78elVcccjXBEz5/P+EhzKuZvyW8hU3YhY/wFe4LmuNHHMRJXMRNNKITe/myRy1/NfRmj1rhJC4iLiWS89cuPfESoxFJ8H0IdyeS4PEUznX6Pni7+X1a9aNGdCIdFx0XHTMDHg7iJC4i3TYt8q59fB/+3YkX/MdDGPPPxUPtP97CJpz7PHMBUfuPr3CQUfsz54MX/JnnCy/4j00Y4+d5wQv+4yscZLzgPx7CUxi+udF4wX9swi58hK9wkJECj3PMlfuej+DGyrXFC/7jIOMF//EQnsI555Vrjhf8xybswkf4CkfzQq0/hq8lT+ElvIVN2IVP791CrT8OMm4KHmNfVrL1ui284D8+wlcY1/KdpTW5Vgs39Y+3MMZPX9zUPz7CGP8mc4/W+gkPYfFd4rvEF6/8j134CF9h8d3iha81yEvH1xoAnXiIGO87jwvfYJBD4BsMgIuYk/0+hLsLxf3YhXOyOwfHtxjgR6MR32IApKPT0emIbzEAGtGJh0i3QwsU8QZvYRPG/POAo4gfX+Ego4h3HmS8lD+ewksYvnkAUeg7DxEK/XGQUeg7DxcK/fEUXsJb2IRdGL650Sj0x9GMTrjiITyFl/AWzjHzUKHLbeT6o8uteAlvYRN24Zzz98HYRZdbcZDx7v3xEJ7CS3gLw9eSXfgIX+Ego9Afj967jUJ/vIS3MPZlJQfXDe/YHw/hKYxr8WRZq32ErzDGT1+8mD8ewhj/JssemeyRyR6Z+Jr4mvjixRyMF/PHcjZczoaLr4tXVnVmbna/PcwCfziIGC/PI744KC8JXxwEPMSc7Pch3EV/22MU9+OcrOfC55eA4UfzKwwebiIdLx0vHfMe/WE05j36w0GkW9ACRey5MCjix9GMlrfxfVB30fJWPIWXcG5y3toaXq0fu/ARhu93AA2F/n2YdA2F/ngJY/ybbMIufISvcJBR6I/hG8lTeAlvYRN24SN8ySji7wO5iza3cXJtUbiPj/AVDjIK+nHO+eSao6AfL+EtbMIufISvMHxzj1Doj4fwFF7CW9i4dyj0x0f4klHc34eRF+1vb91wp/7YhF0Y15Jn6cha4Y788RTG+OmLF/PHJozx85wc2aMje3Rkj674XvG94osX88dbWM7GlbNxxfeKF74GMJcKXwMI3EQjYrw8j/jGv2+bHd/4BxzEnOz3IdxFf1vxFs7Jfh+8Xce3/uFHD/ES6TjoOOiIb/0DLuImGpFugxYo4u/Dv+so4sdLGPPHf2/CLnyEc5O/D96u49UajFfrx0MYvp6M8U+yCx9hjH+Tg4xCfzyEp/AS3sLwjWQXPsJXOMgo9MdDeArnmJH7jlflyLVF4T4ewlN4CW/hnHM+O0GbW/ERvsJBRqE/HsJTGL65Ryj0xybswkf4Cgf3DoX+eAhPYezLSj5cN9ypPw4y7tQf41ryLIWsFe7IH7swxk9fvJg/jma0uY181ow2N/ws2tyKl/AWNmEXPsJXmGcDrXDF4jvEC9+zG4mHeInRiBfvAH9xkR/NnP763Xv663cv+tvmD3yEr3AkfwuPryDDj+IreIGTSMdFx0XHfL728BAvMRo33TYtsohnfviXDW/NRxjz38lBziIuHsIz2ZKX8BY2Yfh6MsbPQ+Q/4SGM8fNw+RLewibswkf4CsM3N/r8hIfwFF7CW9iEnZxFPPMDObS5zfyQDG1uxSbswkf4Cuec84MxtLkVD+EpvIS3sAm7MHxzj+IKR3N+4VjzEJ7Cq/cu/6Zlswm7MPblCzO0v2Hd0P5WvIS3MK7Fk7lWaHN7PH/CGD995xRewhj/Jpv8rAsfYfGd4rvEdw3hKbyEt7D4LvHKv0KRmZvdb4WTuIgYL5LP+x76e/Fd+MBoRHHng370txVP4ZxsfgCQ/W31o0Z0Ih2NjkbH/u78e/u78+/t786/t787/2bvWyEtUMT5oP+iiB8PYcx/Jy/hLWzCucn5cD973pqvcJBR6PkBwEWh54Pgi0J/bMIYP+ePQn98hYOMQn88hKcwfHOjUeiPTdiFj/AVjma0whXnmPmQGm1uMx/gos2tOMj5qlw8hKdwzjkf1qPNrdiEXfgIX+Ego9Afw9eSp/AS3sIm7MKn9y5Q6I+DjEJ/jH1ZycZ1Wy58hK8wruU7S2hze2u1l/AWxvjpixfzx0cY499k2SOTPTLZIxNfE18TX7yYP3ZhORsmZ8PE18ULL+D5UB/tbzOfzaP9rfgIX+Ego/YfD+H5/qLJDfxlDOAmGtGJh3iJ0Zh34jOfyaPVrXgLm7ALH+ErHGTU/OMhLL4hviG+Ib4hviG+Ib7RvvH7/YSH8Hx/eSfwZyEfbqIR4bmS4/29ncBfgHw4iLignbyEtzAuyJKdP3qIl0jHScdJx/xbVA8XcRONSLdJC7ySfx+SBFrjipcw5p8LghB47MJHGBuC8YO8f8JDOH2/304KtMDN76F7oAWu+Ajn+JabiRAAIwQeD+EpvIS3MHxzoxECj4/wFQ4y7vQfD+EpjDFz31HslmuLYn88hKfwEt7CmHOuOV7oHx/hKxxkvNA/HsJTGL65RwiDxybswkf4Cgf3DmHweAhPYZy3k3y4bij0x9GM1rjiHPP7HCHQAoe1QgtcsQvn+N9nDTFwA/A4yLgB+J7zB9rk3s+OKbyExXeI7xBf3AA8vsI8G2P+hMV3ihf+whzwEC8xGvHC/j0zDvxRyO9RcuCPQj40Yk72+7Ai0ARXfIWxSLnweSuPH81b+YeTSMdNx03H/INyDw/xEqPR6Ga0QBHjYlHEj48w5n+Tg4wifjyEc5O/Dyhi4O364y1swul78gCi0E8eIhT64yGc4588XCj0x1vYhF34CF9h+OZGo9AfD+EpvIS3sAk7GUV8ct/xyn1ybVG4j03YhY/wFcacvzVHm1vxEJ7CS3gLm7ALwzeSr3CQUeiPh/AUXr13E4X+2IRdGOftO58TRZzrNnEX/3gJb+Ec8/scIebkWk3crYNR1I9z/Ju+eDF/vIRz/O85f8xl8rMufITFd4nvFl+8mD+ewkt4C4vvFi+8gH/PgQNtb/P7fCHQ9la8hLewCbvwEc4syeXMd+7AfOf+cBAncRE30YjfuHmTmN1uD/MPvD4cRFxL7m/esOd9If5e5MNDzMW/uTgoajCK+jEWKg9Y/l1m/Gj+ldeHm0jHS8dLR/y1ZmA05t+XfDiIdAtaoMBvFh0K/HE0o7dtfr/1FOhtK57CSzg3+nu7EuhtK3bhI5y+3wPzWCjkr6820M9WvIQx/k42YRc+wlc4yHjFfgxfS57CS3gLm7ALH+FLRoF/z8YCPWwzcm1RyI+P8BUOMgr58Tfn9cs1z0IuXsJb2IRd+Ahf4UjOPcpiLx7CU3gJb2Hj3qHYHx/hS8aL+/fBXCy8iGPd8CL+2IRdGNeSZ+nIWuFF/PEUxpzT92xhE8Za5Tk5skdH9ujIHl3xveJ7xRcv4o+3sJyNK2fjiu8Vr6+q9/d5WmS3WyGuJE9emLALH+ErHM1odivGrp/kKbyE4XuTTdiF4evJVzjI30v7zg3NPrnCSVzETTSiEw/xEqNx5ri/xEXEtUSyCbvwEb7CQV4/4VzD79ODQBNc8RJO3++Je+Br4opdOH1HzjOTojjIO9cwh9yDOImLuIlGdOIhXmI0Ige+X6IKtMcVb2FczU524SOMq8kTZ0HOTFgjT4cP4SkM39xT38Im7MJH+AoH+cA3T+4ZwlN4CW9hE/7WMt9zZCPdzrdk2Ue3891HttEVTuIibqIRnfjtUb4Hzi66wmj87gsKP7d8K5hddIWLuIlGdOIhXmIUopdufZ8ABXrpirdwrtD3AU+gl674COfOfB/8hCEjwHn7v74PWgI9dsVTOH2/B+KBHrtiE3bhI3yFgzzhu5OH8BRewlvYhL+1zBfI/Fa5lcmdXyq382Un/8Rm4SQu4iYa0YnfHuXrVnbfFUZjZsTD8c3hJE7iIm6iEZ14iJcYjSYnwuREmJwIkxNhciJMToTJiTA5ES4nwuVEuJwIlxPhciJcToTLiXA5ES4nwuVEHDkRR07EkRNx5EQcORFHTsThiTg8EZcn4vJEXJ6IyxNxeSIuT8Tlibg8EZcn4vJEBE9E8EQET0TwRARPRPBEBE9E8EQET0T0iUBL3vo+zAy05BVvYRPGznjyEb7CQf4yYuVNZbblFU7iIm6iEZ14iLfxRUAkT+ElvIVN2IXzchbGvMJBxq3E4/T9Pm8MdOgVL+H0Xbl0uJV47MLwze3ArcT3eV2gc2+tnNv+CQ/hKbyENxlvHL7PxALdd8X5s9/vwAS+iK44fzY/+8k/Afp2/suCwkO8xGj8cqAQI+eKoazzbW/24K2ZF+qXGI0nx8hV+Uq6cBIXcRONCLucRr5rKM5Fzs9q0Hr3+P6EMe0c5+aV4/99uDb3Cgc5fsJY77ygmMJLWNYbbxUeu7D4Bn3RYbfyoyB02BVv4Rzz+12SQIdd8RG+wkHGS/zjvJb8qANfNle8hLcwfCPZhY9w+uYdEb6EbuVtGTrxiofwFF7CW9iEXfgIw9eSg4z6ziff+BK64im8hOGb14L6fuzCR/gKBxn1/XgIp2/eXR7U92Osc64bHiocsAsf4SscZORBPgVHI1/xEk6vfJKNRr5iF4ZXriFuDh7DK9cKNwePhzB8T/IS3sIm7MJH+ArDN88hbg4eD+EpvIS3MHzzzLzYyOt9sZH/zYsN8BCewkt4C5uwdwaflzPgKxzklzM5t5cz4Cm8hLewCbvwEb7NaPZb+UQfzX7FS3gLm3COn0/Q8X14xVc4yMicx0M4ffMhLhoCi7ewCcP3JB/hKwzfb/3RKFg8hNM3H0mgUXDlG240Cq58aIpGwWIXPsJXOMhftuSrS7YDPtpN1uRNpwg1nvdB+O664iB/r/95e5udfY9m02raTdaEMZNRs/kwNfv0Fv6/q2k3fa/B6f3V6qPTdJuiKF/sQXDJq0OFPsbK566hQh+bMGabu4ZKjDyBqMTHedeQ9I2y80ErevSKXfgIX+GoFYpe3ejVjV7d6NWNXl3UWK4p+uywpvjKObz7wFfOFa/kmbyFMeeV/L3BAJ2m2xRF+VgPNJowZs5n4HpzPvl3kvBfRFH+lSTQ+P4yUtJsWk27yZq8CS6efIUj+dtLdNUVD2HM9iZjnEi+wt98c+32j2u0h/AUXsI5ej6+Q39dsQsf7sG+wkE28TXxNfE18TXxNfE18TXxNfE18XXxdfF18XXx9S1srzLQgYeTjg684isc5PMj56vhzoek+FK44in8VUXu4FeDj6zJm07TbYqirDzQaJpN7RHtEe0R7RHtka93Ox+Coi8u+fs7Kz8VuCaHmCpyXb+HKJ/YKkyFqzgqrooQMX4qhoqpQmcwdAZDZzB0Bqj477HOJ66KEJEvji2GiqkiZ/A9DPrEVmEqvpeFh4d4idH4BUHhIGLsCYFrWBC4BuzWChEIgxJDBa4B+4g8KLFVmApX8Z0iLCgi4XsH+okQgVAoAX/8DGKhxFKR/u+ikQwl0n9hBZANJa6KfNaTmO/KHw7iJC7iJmJsrC5KfWHZ8rV6f08xPjFVLBVbBa4Bi3BcxVFxVYSIfBqHa8uncQ8n8XsahzXKp3EPjejEQ7xE+N0U8VMxVGwVmD2WDFFSIp/tfZidd4WDmCsHb3wnXYutIlduLwhXkd57Q1wVeSU7lx59eXs7RF7JPhCYwYVYKrYK+ORlodtuGy4BiWCYKBLBJkSOZpgoEsEwN9wFGGaA24ASIWJhNMwg32NvwwzyTfY2XA8yoESO5pgbMsAxN2RAiaFiqshZOy4BGVDCVLiKo+KqCBFIgRLwweqgoh2rg1dyx87hpdxxcXgtL7FUbBVHBMrWsaIo2xIYDcuL4nQsL17JDxYRL+UlpoqcwcG64Z66hKlw8cFtdf0vV0WIQOmVGLI6MVUsFVuFrgGK8l02XuAh0D/XYvG8oVNunwmB61kQruKouCpCBAqwxFCBFd0QS8VWgRkYBGbgEJgBLgEv4weXgJdxlMx8RfvEUAGfJ0yFq8jRbm49eub2HRDfzT9m9r04F+ZIFwuIgr24ZBRsiasiRKBgL64fBVtiqlgqtgpT4SqOCJTlxaxRlhdLi9fWi6VFWV4sLcqyxFSxVPxNB7mSTXCFTjzES4zGr3wLB3ESF5Fuh26Hboduh26Hbpdul26Xbpdul26Xbpdul25fBb/T9tVv4SJuohGdeIiXGIXZKFc4iJO4iJtoRCce4iXSbdBt0G3QbdBt0A3lGT+IEIHyLJGnKwwiT1cMiDxd4RB5pCOPJ77MbQd8vvJEEOaXuRVuohGdeIiXGI1fSRZ+M7EfJpzFZT/MMVvSF/ASozFb0h8O4iQu4iYaEX4T4qi4IrJK7YefyZdI+2H2+VTZflhhdxVHxVURIvJltcVQMVUsFVuFzuDoDI7O4GAG2PATIu5PxVAxVSwVW4WpcBVHhc7g6gxCZxA6g9AZhM4gMIMLYSpcxVFxVQQFeuHsFxA52vhB5K9IAA/xEr/zmGucHW+FgziJi7iJOceRRw1f82ZjQQwVU0WuBR4ooMuthalwFUfFVREi1k/FUDFV6AyWzmBhBlie5SqOCswAG7BCxMYMsBv5gm14OIAviDO8Z8c3xLXYKnIGeGeOL49rkTOYWPi8wza8/84+OLx259fHFQ7iJC7iJmLsjFH0uuXfff9EXsPCNeSrfIulIq8Bb87R8NbCVRwVVwTyA2/b0cVmeNONNjbDm278JdQWR8VVESKQEiWGiqliqcAMsDpIiRKuAjPANiAlSoQIpEQJzABrjZQosVR8u4NzlN849dCJf964x8oOuMIozG+ZKxzESYTfE1uFqXAVIWJg9gGxVORoeIuPdrcWruLvGmICLzEa84+fPxzESVzETTSiE+k26Tbptui26Lbotui26Lbotui26LbotuiGrMDzDXz1XIupItcVDzvw7XMtTAXW1SCOijyXeIqBr6ArYT8VQ8VUgRlgZ22ryBngMQj65QyPQdAwZ3gMgo65FiECWYMHJGiaazFVfOuOq8k/BfXQiE48xNuIfMHDF3TAmb3/BdfgEK7iqLgqcA1YHuRLiaFiqlgqvqvAWEgXPK7BN9QZno/gK+papD/uPO39YShwtu/jP3q/Lwe+wtGMv79q/sRQMVUsFVuFqXAVR8VVESKGzmDoDIbOYOgMECh4guIIlBKu4qi4KkIEft1mgqfwEs51dbAJuzDsAuKqCBG4LykxVEwVecF44oPmuRZ5wXjmhPa5FkcFfoMKHGT81s7jITyFl/AWNmEXPsLiu8XXxNfE18TXxNfE18TXxNfE18QXsYKHVfjevBZDRS443kOhPa/FVmEqsOAbAgtuEGjbBwf5te2DYY8Dg3dGJZaKrcJUuIqj4qoIEcikEjqDqzO4OgO05uAkoTXnsQsf4SscZLTmPB7CaNcEL+EtjAtHzePtUImj4qrAhecxwLfxtRgqtoocDU/y0P9neJKHBsASSKoSQ0WOhsd0aOozPEtDV1+LEIE3SCWGiqkiNwXP39Db18JUuIqj4qoIEQiiEpjBhJgqloqtAjM4EK4CM8Dy4g1SiRDxPoIAD+EpvIS3sAnDIYMTjXyGJ0fo5DM8LEIrX4utwlTklQR2E7cuJa6KEIGMKYEZYG7ImBJLxVZhKlzFNwPHgyV09rUIEZkyLUYKXE/GTIulYqfArDNmHM+D8BV+LTADg7gqMANM9P5UDBVTxVKxVZgKV3FUXBU6g9AZhM4gdAahMwidQegMQmcQOoPQGYTMAF8L2GKomCqWiq3CVLiKo+Kq0BkMncHQGQydwdAZDJ3B0BkMncHQGQydwdAZTJ3BxAwOxFSxVGwV3wwQrWghLD7CVzjIGWrFQ3gKL2Fc4IXAZWSO4A/stsjLwLM0/IndFkvFVmEqXMURkfdFPjAd020xXRQzFa7iqMhtwUM4/C3dEv5TMVTowXCdgevBcD0YrgfD9WC4HowXUZjbi6gn9GAcPRiIqDc3RFQJU6EzODqDozPQiLoaUVcj6mpE3atH8+ouXN2Fq7uAiHpzu7oLV3dBI+pqRF2NqKsRdTWirkbU1Yi6GlH3RRTmFrIL8fupGCqmCuzCgtgqsAsbwlUcFVcF1gBDI6JKDBVTxVKxVZgKV4EZXIgrYkqZ4UsRHU9m8a2ILZaKrUIOH74ZscVRcVXI1qOPs8VQIVuPvyHcYqswFa7iqLgq5PjH/qlIHzyQRrdnC1ORPuhWQ8On4z0xOj5bhAhEWomhYqpYKrYKUwEfHD5E2hOItBJDBXxw+BBpJbYKU4G7Llw23tmVuCpCBD72KjFUTBVLBe6UMVG8hStxVYQIBBee9+OrFt8bBHzXYgtTgZ3DbiOeSlwVWFHUT8i7EnzlYoupQmcQOoPQGeA9W4mj4qrg+6KBFtMWUwXeDl4IV3FU4OICIkQgd/Kd+EDvaIupIo9Lfvow0DvawlTk8i7MDblT4qoIEQih/LxgoHe0xVSxVGAGDgGfA3FVhAhEzcKCIGpKTBVLxVZhKlwFZoAVRdSUCBGImhJDxVSxVGwVOfTGliBDNhYeGVJiqdgqTIWryEvY2BKkS4kQgXQpMVRMFUvFVoEZYBtxw1TiqLgqQgRumEoM2WDcMJVYKrYK7NyCCFlRBEqJoWKqwMXh8F1dRARKiasCPpgB7ndKDBXwwakK3cbQbQzdxtAZhM4gdAa434HAdzy2GCqmiqXCVHxD513RQBfp44yT4m/cvLkY9TeQwUsYlxUQpsJVHBVXRYhAlOSnLQNNpy2mipzABm9hE3bhI3yFg4w/zvJ4CE9h8V3iu8R3ie8S3yW+S3y3+G7x3eK7xXeLL+5pDDuBe5oSRwUe22Pt8PHYE/h4zLD4eMZUYqrA5xQwxTOmEpjBgnAVmMH7z66KEIG//4Lzhr//8ngKL+EtbMJwyFRBB6znJ1kDHbBu+M+QKiW2ClOBK8HV421YiasiRCB8SuQMHEuB8CmxVGwVpsJV5Awcc0MslQgRiKUSmMGFmCqWipzBwXFALB2YIpZK5AwO9gyxVCJnkJ8WDHTathgqpoqlYqswFa7iqLgqdAZDZzB0BkNnMHQGQ2cwdAZDZzB0BkNnMHQGU2cwdQZTZzB1BlNnMHUGU2cwdQZTZzB1BktnsHQGS2ewdAZLZ7B0BktngBul/DhloKu3RYjAjVIJzOBCTBVLxVZhKlzFUXFVhAjcT2VX88CXYXp+FjLwbZgtcrR8bDbwZ6BbhAjcNZUYKqaKpQI+E0L35+jqIKtKTBVLRa5OvnEa+NvPLVzFUaEn5OgMrp6Qqyfk6gm5ekKunpCrJwRZ9SZ69YRcPSFXT0joGiCr8I4If0i6BVYUPsiqEqbCVWANcA6QVSWCAl+62WKomCqWiq0CMwgIV3G59fhj0p5vkwf+mnSLoWKqWNxGfBtnC1PhKo6KqyJEaDwtjael8bQ0npbG09J4WhpPS+NpaTyhb9nzo6iBb+pssVSkT2DdEEKBWSOEShwVV0WIQAiVGCqmiqUCPhviqLgqQgQeDAWuFG/qSkwVSwVuPRzCVLiKo+KqCBGIpxJDxVRhryVnZDd04SHmmwIcwUysxxlYxbhA/ADyqsRSsVWYClfxmR/gJUYjkqrEUDFVfN4/7GEGVbEJu/ARvsJBzogqHsJTWHxDfEN8Q3xDfEN8g774TtDiITyFlzCW+kKYClfxWR/sIr4XtEWkyBrMPmmKoSL9HbyEt7AJu/AhTzhMiJUCV5I5c/ID2oFe6Rau4qjAlbyhQ8T6qRgqpgrM4EBsFaYiO3SwEu9vdoGvcHYGYVHRkfR4CE/hJbyFTdiFj/AVFl8TX8NFY/8zjA7etuMbRFtsFabCVRwVV0WIyDBqMVToDFxn4DoD1xm4zsB1Bq4zcJ3BwQxwwM5QMVUsFVuFqcDRC4ij4qrADHCQ70/FULFVZK8RzvH7GiBwkN/XAIGH8BRewlsY1/EEVhKnOY6KqyIo8Ge8WwwVU8VSsVWYCldxVFwVOgPEUX7cNfAtpC2miqViqzAVmIFBHBVXRT6fyX19f/H78RCewkt4C6c3wgF/8rvFUZHe+cHQMETYE4iwEkPFVLFU4OoxA0RYCVeBGSyIqyJEbMxgQyz9X/4GwNN8fBvpQ/wwltt+KoaKqWKp2Cpy+vhsAt3XLY6KqyJngMfD6L5uMVTkDFAo+NLSFlsFZoCLQxiVOCquCswgX17w3aUHnzPgS0oPPgxAj3YLU+Eq0id/nWCgR/vgOTZ6tPPvKHxP2NIHD+nRo91iqlgqcgZ4FI8u7Rau4qjADFCdAVNMNNPp4BFtfqHpn8CWZD4dPJxDN3cLU+EqjoqrIijQ631wg4te7xZyWNHe3cJUuIqj4qqAaW4j2rtbDBW47IBYKrYKU+EqjoqrIkTgHqrEUKEzmDoD3F1ls/1Av3cLV3FUXBUhAtHkWGtEU4mpYqnADA6EqXAVmAFmjWjCA0q0fJdANGX/+EDTd4ucwcFEEVoltgpT4SqOiqsiRCDfSgwVOgPTGZjOwHQGpjMwnYHpDExn4DoD1xm4zsB1Bq4zcJ2B6wxcZ+A6A9cZHJ3B0RkcncHRGRydwdEZHJ3B0RkcncHRGVydwdUZXJ3B1RlcncHVGVydwdUZIPnwQBzt4CUQgyWGCrThgJfwFjZhFz7CVzia0QxejAvcEIi1J3AZBnFVhAjEWomhYqpYKrBcDiHbgl7wtw7oBW8xVSwV2JYDYSpcxVFx1VRnsH4qhoqpYqnYKkzmhogqcVRcFSFzexH1xFChM9CIOhpRRyPqaEQdjaijEXW2HM1jugumu2C6Cy+iMDfTXTDdBY2ooxF1NKKORtTRiDoaUUcj6riegxdRT+guuO6C6zl4EfWE7oJG1NGIOhpRRyPqaEQdjaijEXU0os7Rc3B0F67uwtVduLoLL6IuxFaBGQSEqzgqroqcAZ5Co4u8xVAxVSwVW4WpcBU5AzxeRhd5C/wS4cdoFX9BgVbxg2f8aBVvYSpchWz2/V0Vstl3/FQMFVPFUiGbjVbxFq7iqLgq5MDf+VMxVEwVuFKsDuKtxFGBBcW6Id4uZo14KzFUTBVLxVZhKlzFEbHlYQZ6xltMFUvFVmEq4BMQR8VVkVeKj0PQTd5iqMgZ4OMD9Jm32CpMhas4Kq6KEIEQKzFU6AxcZ+A6A9cZuM7AdQauM3CdwdEZHJ3B0RkgxPARCvrMDz6mQJ95C1dxVFwVIQIhVmKomCqWCp0BvjAMU8P3hT0+wp893tLe9z19ye9r+sD5W1W4XnxT2OMlvIVN2IWP8BWO5nhfDgoewlMYK2sQWL8DgfXLDEeHeIuhYqrIXxTBo3l0e188gM/v6W2RKdNiqJgqloqdYkGYCldxVFwVIQK/lVJiqMD1BMRSsVWYCsxgQxwV+WTUwUF+X6oPHsJTGJePrTFMGP+LDRVTRR4jbAa+n/OxCbvwEb7CQX7fKwYewlNYfF18XXxdfF18XXxdfI/4HvE94nvE94jvEd8jvkd8j/geHA6I+1MxVEwVS8VWgd+XwsG9rgK/MYWjdq+KEBE/FUPFVLFUbBWmwlXoDAIzwFmNaDFf1/cCD+EpvIThYRAYyVMgOjAqkuPxFMazHvAWNmE8WAQf4SscZNzKPB7CU3gJb2ETFt8pvu8X2w4EdiIgcifyc6yJxu0WruKIyEC4+Rh8ogn7TvjsrcJUuIqj4qrI3ZhYReRIiaFiqlgqtgpT4SowgwFxVYQI/6nADHBSfKrADC7EVmEqXMVRcVWEiPNTMVRMFTqDDJfA1DJcil34sw8ciAyX4iBntgQWLKOleAov4S1swi58hK9wkEN8Q3yRGhMHF9mwsDXIhoUTiWyAQAN3i6EiR8uPHya++vfm5woTPdstQsT4qRgqporcjWyjn+jcbmEqXMVRcVWECNyOlMAMFsRUsVRsFZjBhXAVfzOYeQcz0YF988OQiRbsFqYif36/nzkq7jcYBv5uJoq/7GgewvDA1iAfNib85cMcj4Ocf4+j+BsJrwbZUd28hPfHMMi/zFHswkf4CgfZf8JDeAovYfF18UXNb0wOlZ2/KjHRSX039hiVXWKrMBUYLWsDXdHXsEe4DyixVGwVpsJV5G4YZo37gBIhAvcBJYaKqWKp2CpwPTgPuA8ocVRcFZhBngJ0RbfADAxiqlgqtgpT4SqOiqsiRCAfSugMvnyYeCHJpujmLfydDrysZkd08xH+TiVeh7MduvjLheYhPIWX8BY2YRc+wuI7xRe/Gp8fBU70M9/8iG6in/nmZ2IT/cwtrooQkW8prmM5cP/guG7cP5Q4Kq6KEIH7hxK5G/nrFBNdyy2Wiq3CVLiKo+KqwAywOrh/KDFUTBWYAU4K7h9KYAZZ4+hnvo6lQmKUmCqWiq3CVLiKo+KqCBFXZ3DzmD2ewkv4O2YLV5l/mqTYhfOY4dDkHygpDnL+kZLiITyFl/AWNmEXFt+gL3qUb374OdGJfPNR4kQn8sU9NTqRWxwVVwRSAO8L0GJ88+HsRItxC1dxVFwVIQL3Agezxr1AialiqdgqTIWrOCowgw0RIvC+osRQgRkExFKRM8jm/Ynm4xau4qjIGVysKBLjCbwXKTFUTBVLxVZhKlzFUaEzyNsQvGplV3LzEP5OJl6LsiW5eQt/J9NwiXkbUnyEr3CQ8zakeAhP4SW8hcXXxRfvPC52EJlycdSQKfmgeqLnuIWpcBUYDbuOu5BAUeEupMRWYSpcxVGRuxFYadyFPIG7kBJDxVSxVGwVpgLXgzLAXUiJqyIo0FZ8s899oq+4BXwMArPOpUIzcIuhYqpYKrYKU+EqjoqrQmeQ9w94I5DfuNw8hb/jlN1SM1uIm004g/2NeYSvcJDXT3gIT+ElvIVNWHyX+CIfAheQKRD5yHeiETjwfgedwC1cxRGRdxTxw3YaRtsQW4WpcBVHxVWRb4Dz0ehEb2+LoWKqWCq2ClPhKjCDCXFVhIjzU4EZYEXPVIEZYO/x3KGEqXAVOYOBFcWzhxIhAk8fSgwVU8VSsVWYClehM8hbDtyIZUNwcd5yFH8nE7el2RDcvIQzYHGJectR7MJH+ApHc/YCNw/hKbyEt7AJY2VzB9HRG3gnjI7ewPNPdPS22CpMBUbLXUd/bmSv70SDboulYqswFa4idwPvJ9Cj2yJE5L1Gi6FiqlgqtgrMwCFcxVFxVWAGucPo0W0BnwWxVZgKV3FUXBXwwf4gZUrgSrELNlVgBpgo8qcEZoDNQv6UwAyw8MifEpgBzg7yp0TOADfraOdtkTPAMzi087bIGeBJG9p5W+QM8DAK7bwtcgZ4IId23haYAS4b+VMCM8BlI39KYAa4bORPCcwAl438KYEZ4LKRPyVyBnjqhUbfFl8pbswm3+0Um7ALH+ErnN54eoZ+3xZDBbyxLnkX02KrMBWu4qi4KoIC/b4thoqpYqmAj0FgtNwMNPIGHlWhkbfFVLFUbBVyPWjkbXFUXBV6PVOvZ+r1TL2eqdcztwqdwdQZIKXeZSOL3mUvvZ6l14MsKuEqjgq9nqXXs/V6tl7P1uvZej1br2fr9Wy9nq0runUGW2eALHqXjcR5l216PabXg8QpESJcT4jr9bhej+v1uF6P6/W4Xo/r9bhej+v1HF3RozM4OgPkyrtspMe77KPXc/V6rp74qyf+6gm5ekJw94LHnGiWbfElCJ42OW5eHgcZNy+P4REQ+CzmB5Ejvf/hCkdzdr5OPAzJb0FunsJ5G3TBW9iEXfgIX+Egj5/wEJ7C4jvEF5mAN7Xojw2840Z/bOR3okz0x7ZYKrYKjJabjF7XyK8vmeh1bTFVLBVbhanAbmClUfklrooQgcovMVRMFUsFZmAQpsJVHBU5A9wAo9e1BO5P8FwVva4tpoqlYqswFa7iqLgqQoTrDPLpBx6JZatr8xL+TsfBoufTj2IX/k4lHtRlk2tzkM9PeAhP4SW8hU3YhcX3iC9Sw3FwkQ3+/hesHy4N2VDiqLgicBfxCgT3Cq/Cca9QwlUcFVdFUOB7iyN/J2Tie4tbTBVLxVZhKlzFUYEZHIgQgfuLEkMFZjAhlgrMIFcHzagtMIM3AGZwIXJ7cNX56cvjfHpSPISn8BLewibswkdYfKf4Io3yO1YmWlNbTBVLxVZhKlzFUXFVhAikER7Tomm1xVSxVGwVJgL5kR25E22mLbYKU+EqjgrMGpuK/HgC9wd4TonG0BZXBX4Ga437gxJDxbfLb+Qs/uIt/O3yGzaLv/gIf7v85v7dTBR/9xLNQ3gKL+EtbMIufITF94ov3mvgkSuaOwPPRdHdGXisifbOFldFUKCTM/D0E62cgV4UfA1wi6PiqggRqPgSuRt4yIcmzxZLxVZhKlzFUXFVYAZ5W4DG0BZDxVSBGQTEVvFtzQ+P2LIx9E+8nzkqrooQkc9OWwwVU8VSsVWYCp1BPkJ9G5etHMVBzlaOd5XZylE8hT9vHJr8muBmE3bhI3yFg5yfuBQP4Sksvia+hpXFIXSs34HA+mGjfapYKrYKdMxkgWQL6Nc1CDFUTBVLxVZhKnI30N6SnaAUV0WIuD8VQ8VUsVTgenAir6lwFUcFZoAdviEC3eBY0MDloELDVRwVV0W0WNnWSTFUTBVLxVZhKlzFUXFV6AyGzmDoDIbOYOgMhs5g6AwGZmAQmMGFuCpCxPypGCqmiqViqzAVrkJngG+RehxkfMXd4y/j8pZvvW8CfryE8/ctD9iEXfgIX+Egvy+2Aw/hKbyExXeL78bKYnIZFr98fruyhfRrsIVYKrYKU5Gj5YPZ9UNgTGwnAqPEUrFVmApXkbsxMWu/KkIEQqbEUDFVLBVbBWawIFzFUXFVYAY4BQiZEjmDfBq8fgiZEkvFVmEqXMVRcVWEiHy20UJngI94MTV8wvt4C+OTUrALH2E0PICj+TWTPh7CU3gJb2ETduEjfIXFF2mTj9bXQKbkM/M1kCn5mHwNZEqJqyJEIDnyMfkayIcFH+RDiaPiqggRuAkpgd0IiKliqdgqTIWrOCquCswgS+e1lJYYKqaKnEE+tV/ZbkqRM9hYXiRGiRCR9x2/jYVHlpRIn43lRZaU2Crgg+lkv0eLo+KqCBG4YSkxVEwVS8VWoTNwnYHrDFxn4DqDozM4OoOjMzg6g6MzODqDozM4OoOjM0D+bBxY5E+JoWKqWCq2iq/43pl4uYL/4eXKE0OFVkxgZBz40IoJrZjQisF9TT6/XRP3NSWGClxBQCwOMHFfU8JUuIqj4qqQmp3jp2KomCp0BkNNES75FHmhDbUEblhK5NDZELXQidpiqdgq0icf1y50o7Y4Kq4KzCCrbCJ28iHmmoidElsFfBzCVRwVV0WIQOyUGCowAywVYqfEVmEqXMVRcVWECCSN4bggTxwLjzwpcVWECORJiaEiL8GxJciTEluFqXAVR8VVESKQJ45tRJ6UmCqWiq3CVLhsMPKkxFURIhAh+VnBQrtqrShuVEq4iqMCF4fDF7qIiI0SSwUuATPAG6USrgKLiFMVuo0h27h+PxVDxVSxVGwVpsJVHBUygzXUFEmBG+OFd0AlTIWrwNB5lBdiA/fCaw4VUwUu4UJsFaYClxAQRwe4KkLE0hksncHSGaylYqswFa5CZ7DUFElxsIhIihJbRQ6dz63XQlKUOCquivTJJuSFJtUWQ8VUgRlgfxAoBxNFoJS4KuCTZxRNqS2GiqliqdgqTAVmgBOCQClxVYQIBEqJoWKqWCowNI4L7i8uFh7hUGKqWCq2ClORl3CxJYiNEldFiMB9SImhYqpYKjADbCMCpYSrOCquiqDYCBRs8EaglJgqlgrs3IC4XNGNW48nEBslhgpc3IaQRdyIjRJHBS4BM8B9yBMIlBJYRIeQbURLa4utQmcwdQZTZ4BAKREi1k/FUKEzWGq6+EBxbdx6lAgRuPUogaEPBB8orr1NhavAJVyIqyJEIDbwpnjbkAFsqlgqdAamMzCdAQKlxFURIvynQmfgaoqkCCwIkqLEVZFD56PgtZEUJYaKqSJ9AoWBW48SpsJVYAY4ygiUwElEoJSYKuCDM4pAKWEqXMVRcVWECARK4IQgUEpMFUvFVmEqXMWhQLfqLz/dWGhLxZeZL/SltnAVR8VVESIyNkZ+VrKymZViqlgqtgpT4SqOCsxgQYSI+VMxVEwVS8XmBhsCpYSrOCqwc3muDUnxVhS3HiW2ClOBi9sQuoj7p2KowCVgBnup2CqwiA6h27h1G7du49YZmM7AdAb4rd0SS4UeJNODZDoDU1M0kL0V9aliqdgqMDSOsvODx/UaU584PxW4hAsxVSwVuATszzEdwFUcFTqDozO4OgM0iZSYKpaKrUJncNU0k2LghSX7Timmiry4gZLJpGhhKlxFnpCBwshbjxZBkX2nFJjBhoCPQZgKVwEfh7gqQgQCpcRQMVUsFZjBgTAVruKouCpCBAKlxFCBoQMCv4b+gwgR66diqJgqlgr8MvqEMBWu4qi4KkIEAqXEUIEZYBsRKCW2ClPhKo6KKxuMQHkCgVJiqMDODQiXFcUv+Ze4KkLE+z1/HD7XRXy/0f+EqcAlYAZ+VFwVWEScqqPbeHQbj27j0RkcncHRGRxXcVToQTp6kK7O4KrpazS7EK7iqLgqMDSOMlpI8E78NaKW2CpwCRgAsVHiqMAlvJ9hC9rC97O2GCqmiqViqzAVruKouCp0BkNNkRT4VOogKUq4iry4/MWIP3FVhAgkRYk8Ifj45+DWo8RSsVVgBhsCPgYRIhAoJeDjEFPFUrFVmApXcVRgBgciRCBQSgwVU8VSsVWYCgyNLXlfC4KFf98L8sRWYSpcxVGRl7CxJYiNJxAbJYaKqWKp2CpMBWaAbUSglLgqQgQCpcRQMWWDESgltgpTgZ3LHD1Iireid6iYKpYKXBwO39VFvFdFiMB9CD7+ObgPKTFVYBFxqkK3MXQbQ7cxdAahMwiZwcV9SImhYqpYKrYKV4EG7pzoa1YtMVRMFRj6QKBN+4mj4qrAJWRaoim1xVCBSwiIJQPMrcJU6AymzmDqDPDLME9Is/y60iy/rjTLr7t0BktNkRT4NOkiKZ5AUpTIi8MHSBdJUWKp2CryhOADpItbjxJHxVWBGeRRvggUfIpwESgltgr4YE8RKCWOiqsiRCBQSgwVmAGWCoFSYqswFa7iqLgqQgSSAh93oHl14Lk/uldbXBUhArFRYqjIS8CHQehhbbFVmApXcVRcFSECgYKPiS4CpcRUsVRsFabCZYMRKCWuiqAIZAg+ZwokBVY08F6mhKs4KnBxefhiyCIG3rGUWCpwCZgB7kNKuAosokNcHUC2MeZPhc5g6gymzgD3ISVMhas4KnQGS01x64HPjNDK+prT0MrawlUcFVdFiECglEBWwfT9Ws0TS8VWYSpcxVFxReCXZ/Bqhv7V10iHBtYWW4WpyCs9b7Sj4qoIEQiUEkPFVIFfG8OheL9q94SpcBVHxVURIt6v2j0xVGxZkKNX+nLniaPiqtArvXqlV6/06pUid0psFaZCr/TqlV690qtXGnqloVcaU4Wudehav1/XxYKEXinSJcVGr2yLoYJXutEr22KrMBWu4qi4Knil+zd+KoaKqWKp2CpMhas4It4v8hqEXumcKpaKrUKvdOqVTr3SqVc6Q8T6qRgq9EqXXunSK116pUuvdOmVrqtC13rrWiOR8tHRRh9sC1PhKnClIwV+nS8bgTe+ZrXFVIGzMyG2ClOBFV0QRwe4KkKE6wxcZ+A6AyRSia3CVLgKnYGrKd4M5YfdGw2zLbYKXBzWGiFU4qi4KnBcsNYvhJ4YKqYKzABzwy3OwYHFLU6JqyJ9Lg4fbnFKDBVTxVKxVZiKnMHFCcEtTomrIigGQqjEUDFVLBUYOo/LwEPZ/Ah4D9zilJgqloqtwlTgEhziqLgqQgRucUoMFVPFUoEZHAhT4SqOiqsiRLx0CYihYqpYKnBGDeLKiuIW5wnc4pQYKnBxF0IXEe+MShwV8MEM8M7oCTyULZE++QHsft/N+gYw3UbTbTSdgekMTGeAW5wSIcL1ILkeJNcZuJq+L0bCgrwvRnoiRLwvRnoCF4ej/L7+CKO9rz96wlXkJeSnyxt9ri1CBGIj4INPed4A+JSnxFKhM7g6g6szwL1LiasiRODepYTOINQUSRFPHBVXBS4uSwYtsC2GiqkiT0h+urzRAtvCVLgKzCCPMhpdR34wutHo2mKq+Hxmfna43zeyljAVruKouCpCxPte1gExVEwVS8VWYSpcxRGxMPSCwAAbwlS4iqPiqggRG5eALdlDxVSxVGwVpsJVHBWYAbZxhwj7qRgqpoqlYssGI1BKuIqjAmc0cxQtsLWivlRsFaYCF4fD57qI56diqIAPZnCWiq0ifQZO1dFtPLqNR7fx6AyuzuDqDPDlrSWWCj1IVw/S1RlcNcWXLiL95/uNnCeWiq0CF4ejjN++wSvGxK/fQKz31YpP5CXkp8sbja4tloq8hPxAeb8vcK0BXMVRcVXoDIbO4H1R4xNTxVKxVegMhpoiKfLD7o0W2BZTBS7OIbYKU+Eq8oTg3h8tsC1CxPqpwAwuBHwCwlS4ivSZuB4ESokQgUApMVRMFUtFziB/d2+jH7aFqzgqrooQgUApMVRgaBwXwwBYeAsR/lMxVEwVSwUuAVuC2CjhKo6KqyJEIFBKDBWYAbYRgVJiqzAVruKouLLBCJQnECglhgqcUYNwWVF813OJqyJE4OueJw5f6CLii51LmAr4YAb4bucSV0X65AewG42ubwA0uraYKpaKrcJUuIqj4qqQg4R+2BZq+r4e2iBcxVFxVeDi8ijv9yXQDrFUbBV5Cfnp8kaja4ujIi8hP1De+30JNAZ4XwL9xFChM1g6g6UzwJdAl3AVR8VVoTPYaoqkWFhEJEUJV4GLez9zVYQIJEWJPCH56fJGC2yLpWKrwAwuBHwCIkQgUEqkz8YZRaCUWCq2ClPhKo6KnMHGCUGgPIFAKTFUTBVLxVZhKjA0jgtuMDYWHuFQYqswFa7iqMAlYEsQG08gNkoMFVPFUrFVmArMANuIQClxVQQFvry1xVAxucH4/tYWW4WpwBnN2kYL7FtRtMC2mCqWClzchZBFRKNrixCB+5CNGeA+pMRUkT75OcZGo2sPYCpchc5g6gymzgD3ISWGiqliqdAZLDVFUuSX9G58hWuLoWKqwMU9kYmUHyRukz89sU3+9MRGoyu+/X2j0bXFUJGXYNif96cn3v+yVZgKnYHpDExn8P70BMT70xNPDBVThc7A1RRJYVhEJMUTSIoSuDiHmCqWiq0iT4ihMHDrUeKouCowAxxlBIrhJCJQSmwV6eM4owiUEkfFVREiECglhoqcwTsuCJQSW4WpcBVHxVURFI6kyM+dNxpd8bWOG42uLa6KEIHYKDFU4BIcYqnYKkyFqzgqrooQgUDJD203Gl1bTBVLxVZhKpwb7AiUEldFiECG5AfxGy2wtaJ4L1PCVRwVuLg8fGh0rUXEO5YSSwV8MAPch5RwFemDD5DQ6NoD6DaabqPpDExnYDoD3IeUMBV6kEwPkukMXE2RFEh/fPVqC1PhKnBxOMr48zV4xcAXrLaYKvIS8GkSGl1bmIq8BHzO5PjzNTXAVREirs7g6gyuzkD+SNZ2+SNZ2+WPZG2XP5K1/eoMrpoiKfBpkiMpSmwVuDiUDJKixFFxVeQJwQdI+KLWFkPFVIEZXAj4BMRRcVWkDz4ZwhezthgqpoqlYqswFTkDfBiEftgWV0WIQKCUGCqmiqUCQ+dxQaPrxHN/NLq2mCqWiq3CVOASHOKouCpCBB6BlBgqpoqlAjPANiJQSriKo+KqCBEIlLfBCJQSU8VSgTNqEFdWFO9lnkBslBgqcHE4fK6LiHcsJY4K+GAGuA95AvchJdIHz9LQ6FoDHN3Go9t4dAZHZ3B0BrgPKREirh6kqwfp6gyumuLWA58ZoQUWX0630QJbArceJYaKqWKp2CqQylj49+f0njgqroqgwNe6thgqpopcRHzKg67XFkfFVREiECglhoqpYqnYKnQGQ2cwdAZDZzB0BlNnMHUGU2cwdQZTZ/D+qOYTruKouCowgywm9MPiz4du9MO22CpwpQ7hKo4KXOmBCBkA739KDBU6g60z2DoD/LmsEq7iqLgqdAamprhDwYd16JRt4Sq+i1v4RA2dsi1CROZOi5FiQEwVS8VWYSkmBHxwyD1EnJ8K+GBPz1SxVGwVpsJVHBWYAZbqhIj7UzFUTBVLxVZhKjA0jktgACx8LBVbhalwFUdFXgI+tUI/7BP/n6lzSXOdN5bgXjy+gy7UC1jb/bx3H1USZMwy7P8oig9lUyRafeZy5QUjLIITgpCEmUAPkLRs9oVNOAD7IxhhfQdYC2pfCEIS9AacH0ZaKfvsUa2UfWERnKCNWwLsRK2HfeEA9Nez9HBL3wD7wiJoJ4Yg+AJJKAIncE7gnCD+CEZYBCdwgqD0+fPf2gfPn/9+wAiLoI1LwTSSniKc5498P7AJOg+mLbUe9gUjaCfq+Dx/5Fsv8PyR7weSwAmKExQneP7It+D5I98PGGEROEFTqqbQwzotgb2gprgwG6cnaloC+4ITgjBniJ6O6TthX2jCJswEz/FRoTyDqlAuBEEenaMqlAtN2ITzQmoJ7AtG0AQpcEIQklCEJmzCAagp5rlZ6ttefR5hpb7t9YVNOADVxgUjzCbMU6vU2tYXgpCEIjRhEw5AhTIPkFJrW19YBCcEIQn1HuD8U6Fc2IQDUIfMg8T8U1M8ezSSUIQmaOPWQHIn5iI4QZugCTIJRdBO1FmVPIzJw1g8jMUJihMUJ9B1yIUk8EQqnkjFCZpSXXq4TktdeswjrNRy1heK0IRNOAAVyoXpKntgEZwQhCQUoQkboDUlfzpHtabkghOCoC3VSaFPOX86LfUpR/B8p+sFnfFbsAhO0B49guQLFKEJm8AJjBNoTcmFRXBCEDiBUapCmUd/qeWsLyzCbNz8ymlqOesLSSjCnC7zGTC1nPWFA1ChXNAEIZAnBUkogjwl2IQD0HXIBSMsghM0QQuSUIQmbMIB5B/BCHppnS6qjdSOV208oNq4YIRFcMJsQuqQqDYuFKEJm3AA6pALRtAEOoxqlwtBSEIRmrBxgNUuD6hdLhhBR07nta5Dnj2q65ALm3AARxunk+9wJ+o65EIStAmaQNchFzZBO3HOKq1tfV5Aa1tfWAQnBCEJRWjCJuBE0qrXFyjVJ5Z5opZazvpCEzZBLz3Np+WsLxhhEX5d1fPJKGc56wdJKEITNuEAZrXJC9qJRxCEJBRhtrS0Q1QoFw5AhXLh18qpoz2rXj9wQhCSUIQmbIBqYx79pda2vuCEICShCNqeeQdrOauX9ps6ZB7spJazvpAEvZpmU4dc0H7TGa8OeUAdckHboxNJHXLBCUFIQhGaoAl0vqlDHlCHXDDCIjhhjpx+ouvrXe9+U6Fc4B5VoZT+zTHCIjghCLOlrVNMVXOhCZswE8wzsNQXv75ghJlgHi2l1sO+EARNkIIiNEETmEATzAHWt8D6PFpK1z2UebSUrt654AR5jqAJm3AAz58n/xP4dyprCewLSSjCBswitdRHhPl61w+coJPi+TdJKEITNuEA5tbrC0ZYhNmErX2t65ALTdiE2VVbU+s65IIRFmG2VJ8XfJaevJCEIjRhEw5glp68YITxmCaY2yYvaEu1D1Q1FzbhAFQ1W6eyqubCIjghCEmYLbXnpZuwCQcwD5RfMMIiOCEISdCW6j2nqnlAVXPBCNpSvRtVNReCkARtqd5MpwmbcD6YlbIfGGERnKBj2oImbIK2dM4QrYd9wQiL4IQgzB6de/ipZbMvNGETDmB+wfgFeY5gtudo4/T558Im6NXmrNLi2BeMsAhOCEISitCETeAEwQmCEwQnCE4QnCA4QXAC9c48ykytlH3BCIswe/Ro9+pC5kISitCETTgAfYC6oAlcsAhOCIIm0MapkS40YRMODr0a6YIRFsEJQUgCz7fm+aZLnHl2mPpO2RcWQZ4SyKP3nO7qXihCE7SlemepkR5QI10wwm+C0E0YLbWN5800jfRCEorQhE04H2ip7QtGWAQn/JtAF1Kz0PbG+uI/t65z5stobzxv/PWTLt9mDe6N64v+xfhifrG+2F/cXzxvXJ9tfbal/egC7a0UaG+V4AD8j2AEvdoW6NXk8U04gPgjGGERZt+b9tzcbXkhCUVowiYcwLTNC5qgBYvghCBoAp0XWQRNEAJNoF2VB1B/BCMsghOCkIQiNIET/NpGF3CzCvdG++I/ty6PZv3tjfHFf1ZdNs7K2xv7i/uL542/xrnRvri+6F+ML362/dm29qMOhPpCN/y1kjaW3ozqiwtJKMK82jxt+ndQ5tX0LEGLZ18IQhKK0ITZ93q8o2W1F+Y65QUjLIITgpAETWCCJmzCASxNUAIjaIIjcEIQklCEJmzCAahT9GFJa2xfWAQnBCEJRWjC74zUpv1a6Im/DrrRvri+6F/Ua+ugqkf0FEfral/Q1ZH2by6CE4KQhCI0YRMOQG2hZzX6ntnQ0xV9z+wLSShCEzbhAFpb2gIjLIITNMEWJKEITdiEA9h/BE2gM2muWkJPI2b57QdBSEIRmrBxTDeP9uHRPkZYBCcEIQlFQAtpLe4LRlgEbakJ0ELNFuqnhR4Yjx7CaC3uC0bQHtW/MfRgWxCSwAmMExgneFpI8LTQA0ZYBE6wKFW96JmQvo72gurlgjauBIvghCDodGlBEZqwCZpgzlGtxQ09P9Ba3BeCMB7dYtda3BeasAkHoBK6YISZIHWG6GLmQhCSUIQmbMIBqHf0eEZrcUNPSrQW94VNOAC1ywUjaBN0SNQuF4KQhCI0YRMOQO2ihxZai/vCIjghCEkoHOCnXR7YhANQoeh5ldbi3j2q2rhQhCZo4+bk05fOPjtRXzr7ghPkOYIkFGE8epyhtbjvC+Awai3uC5zAOIFxAhXKhSQUoQmcYFGqptDHkb2CkIQiaOPmVN6OzybbjbAI49Gt/K3auJCE8ei+8eano81PR5ufjjY/HW1+Otr8dKTvpn0hCEkoAicIStUUenCjr6N9IQjauBIUoQmbMB49d9Ei2xeMsAiaQMdHhaJPr/rS2Rc2YTz6JK5Fti8YYRGcEIQkzAT6DK9Fti9swgGoUC4YYRGcoJfW6aKrDT1q0ZfOvrAITghCErQJOiSqjQubcD7QItsXjLAITtAELUhCEZqwCQegQtEB1iLbFxbBCTpHU7C/Paqvo72g2rhgBG3cFmAn6ktnX2iCPJpA1yEPqFAujEcPorTI9r6AOyEInMA5gXMCFcqFA4g/ghE4QVCqptAH7qNLD90iOKqNB3TpccEIQdCrafeqHC7o1SRVBejRxNEbXZ/Ajt7oFw5Ab3Q9Czh6o19YBIdHb/T7/yShCE34fQJ7pQcwT3FeMAL3ga4Pns3W9cEF7p2jV9MZone9Hk1oJWzoYYJWwr4QhCQUoQmbMHt07g6XVsK+YISZYO7El1bCxtwuL62EjbkPXloJG3ODu2YlrOlEqlkJ+8EGzMI1XQnVn97bcxe6tCw25i50/eli4UISitCETTgAVcDcrC4tmH1hETTBFmgCDTrlkH/aO1MO+lhes2DWdBles2D2gwOYpzj6TFv6ytcXgiCPdq8XoQe0q6YCXjiAqYD802ZPBbywCD4g6fTBC0koQhNmAtM+mKa4ME3xghEWwQlBSII8OvnmGbHuBZRWwuqRaGkl7AtFmKlN52htgqbWfus/ghE0tfZbOyEISShCEzZBE+jk238EIyyCE4KQ2DtbHh2sfQDnj2AEefQCxwlBSMK86117dJ4Rv7AJ5wMtpX3BCIvghNmjcye39GWwL2zCAcw1Rc5t0NLXxL6wCE6Yd+PccygtmH2hCE3YhAOYZ8QvGGH26NzfKa2efaEI2tLn32zCAbi2VLvKjaAtTYETgqAJSlCEJmzCAah3LhhBE7TACUFIQhGaMPt6PsvUrJ79fUu1YM4d06Gf+7AvBCEJRWjCJswx/dMhmVUrLxhhEWYCtfIsv/0gCUVowiYcQP8RjPDz6IlzaZGtVtSUFtm+0IRNOAA10gUj6JjqKKiRLgQhCTWzadBZwv/CJhzAXCO9YIRFcEIQZktdh3GuhF44H2gtbs5vo5TW4r6wCLOl87ShtBb3hdnSeXBQWov7QhM0QQgOQF11wQiL4IQgaIIUFKEJm3AA64+gfX0EOKvWwlm1VhGasAk4q5b/EYyAs2q5E4KQBJxVs2T3g03AWTVLdj8wwiI44Tmr/vt///n33/z/f1Y+e/9fya18dr6y9n1PbuSNPDvkd0N/6Xu08nf7eulrtDLmdebKNH93mJe+RCt/l5JLT/Xzt95+6Su0MvVvC7mRN/L5so7Dkw15ITtyIMPr8Dq8Dq/DG/AGvAFvwBvwBrwBb8Ab8Aa8CW/Cm/AmvAlvwpvwJrwJb8Jb8Ba8BW/BW/AWvAVvwVvwFrwNb8Pb8Da8DW/D2/A2vA1vw7vh3fBueDe8G94N74Z3w7vh3fAeeA+8B94D74H3wHvgPfAeeM/n1V+ivdmQ5d2THTmQE7mQG3kjny/rJ8aTDRleg1d99bvNv7So4OZCbuSNfL6svnryeH+3wJdWE+TvVvDSYoKbAzmRC7mRx/u7H7u0jODJ6qsnG/J4f/dVl5YQ3BzI8s5xUV89uZHl7cnny+qrJxvyQnbkQE7kQm5keAPehDfhVV/17H/11ZMDOZELuZE38vmy+urJhgxvwVvwFrwFb8Fb8Ba8DW/D2/A2vA1vw9vwNrwNb8OrvtpznqivnryQHTmQE7mQG3kjny8feA+8B94D74H3wHvgPfAeeM/n1ZqDmw15ITtyICdyITfyRobX4DV4DV6D1+A1eA1eg9fgNXgXvAveBe+Cd8G74F3wLngXvAteh9fhdXgdXofX4XV4HV6H1+ENeAPegDfgDXgDXvXV70b60vqEmzfy+bL66smGvJAdOZATGd6EN+FNeNVXv5v3S18idvNCHu/vFvbSH9G9OZELuZE38vmy+urJhryQ4W14G96Gt7+fC90b+fu5oPULNxvyQnbkQE7kQoZ3w7vhPfCqr34fjZa+ZuxmRw7kRC7kRt7I5836C7s3G/JCduRATmR5a3Ijb+TzZfXVkw15ITtyICcyvAavwWvwTl/V767/0neM3byQHTmQE7mQG3kjny87vA6vw+vwOrwOr8Pr8Dq8Dm/AG/AGvAFvwBvwBrwBb8Ab8Ca8CW/Cm/AmvAlvwpvwJrwJb8Fb8Ba8BW/BW/AWvAVvwVvwNrwNb8Pb8Da8DW/D2/A2vA3vhnfDu+Hd8G54N7wb3g3vhnfDe+A98B54D7wH3gPvgffAe+A9n1drKW425IXsyIGcyIXcyBsZXoPX4DV4DV6D1+A1eA1eg9fgRV8d9NVBXx301UFfHfTVQV8d9NVBXx301UFfHfTVQV8d9NVBXx301UFfHfTVQV8d9NVBXx301UFfHfTVQV8d9NVBXx301UFfHfTVQV8d9NVBXx301UFfHfTVQV8d9NVBXx301UFfHfTVQV8d9NVBXx301UFfHfTVQV8d9NVBXx301UFfHfTVQV8d9NVBXx301UFfHfTVQV8d9NVBXx301UFfHfTVQV8d9NVBXx301UFfHfTVQV8d9NVBXx301UFfHfTVQV+dr6/87+sr//v6yv++vvK/r6/87+sr//v6yv++vvK/r6/87+sr//uD1+A1eA1eg9fgNXgNXoPX4DV4F7wL3gXvgnfBu+Bd8C54F7wLXofX4XV4HV6H1+F1eB1eh9fhDXgD3oA34A14A96AN+ANeAPehDfhTXgT3oQ34U14E96EN+EteAvegrfgLXgL3oK34C14C96Gt+FteBvehrfhbXgb3oa34d3wbng3vBveDe+Gd8O74d3wbngPvAfeA++B98B74D3wHngPvOgrQ18Z+srQV4a+MvSVoa8MfWXoK0NfGfrK0FeGvjL0laGvDH1l6CtDXxn6ytBXhr4y9JWhrwx9ZegrQ18Z+srQV4a+MvSVoa8MfWXoK0NfGfrK0FeGvjL0laGvDH1l6CtDXxn6ytBXhr4y9JWhrwx9ZegrQ18Z+srQV4a+MvSVoa8MfWXoK0NfGfrK0FeGvjL0laGvDH1l6CtDXxn6ytBXhr4y9JWhrwx9ZegrQ18Z+srQV4a+MvSVoa8MfWXoK0NfGfrK0FeGvjL0laGvDH1l6CtDXxn6ytBXhr4y9JWhrwx9ZegrQ18Z+srQV4a+Wuirhb5a6KuFvlroq4W+Wuirhb5a6KuFvlroq4W+Wuirhb5a6KuFvlroq4W+Wuirhb5a6KuFvlroq4W+Wuirhb5a6KuFvlroq4W+Wuirhb5a6KuFvlroq4W+Wuirhb5a6KuFvlroq4W+Wuirhb5a6KuFvlroq4W+Wuirhb5a6KuFvlroq4W+Wuirhb5a6KuFvlroq4W+Wuirhb5a6KuFvlroq4W+Wuirhb5a6KuFvlroq4W+Wuirhb5a6KuFvlroq4W+Wuirhb5a6KuFvlroq4W+Wuirhb5a6KuFvlroq4W+Wuirhb5a6KuFvlroq4W+Wuirhb5a6KuFvnL0laOvHH3l6CtHXzn6ytFXjr5y9JWjrxx95egrR185+srRV46+cvSVo68cfeXoK0dfOfrK0VeOvnL0laOvHH3l6CtHXzn6ytFXjr5y9JWjrxx95U9f1eRCbuTx/lawuv6s8pPVV0825IXsyIGcyIXcyPAGvAlvwpvwJrwJb8Kb8Ca8CW/CW/AWvAVvwVvwFrwFb8Fb8Ba8DW/D2/A2vA1vw9vwNrwNb8O74d3wbng3vBveDe+Gd8O74d3wHngPvAfeA++B98B74D3wHnjP59XfZr7ZkBeyIwdyIhdyI29keA1eg9fgNXgNXoPX4DV4DV6Dd8G74F3wLngXvAveBe+Cd8G74HV4HV6H1+F1eB1eh9fhRV8F+irQV4G+CvRVoK8CfRXoq0BfBfoq0FeBvgr0VaCvAn0V6KtAXwX6KtBXgb4K9FWgrwJ9FeirQF8F+irQV4G+CvRVoK8CfRXoq0BfBfoq0FeBvgr0VaCvAn0V6KtAXwX6KtBXgb4K9FWgrwJ9FeirQF8F+irQV4G+CvRVoK8CfRXoq0BfBfoq0FeBvgr0VaCvEn2V6KtEXyX6KtFXib5K9FWirxJ9leirRF8l+irRV4m+SvRVoq8SfZXoq0RfJfoq0VeJvkr0VaKvEn2V6KtEXyX6KtFXib5K9FWirxJ9leirRF8l+irRV4m+SvRVoq8SfZXoq0RfJfoq0VeJvkr0VaKvEn2V6KtEXyX6KtFXib5K9FWirxJ9leirRF8l+irRV4m+SvRVoq8SfZXoq0RfJfoq0VeJvkr0VaKvEn2V6KtEXyX6KtFXib5K9FWirxJ9leirRF8l+irRV4m+SvRVoq8SfZXoq0RfJfoq0VeJvkr0VaKvEn2V6KtEXyX6qtBXhb4q9FWhrwp9VeirQl8V+qrQV4W+KvRVoa8KfVXoq0JfFfqq0FeFvir0VaGvCn1V6KtCXxX6qtBXhb4q9FWhrwp9VeirQl8V+qrQV4W+KvRVoa8KfVXoq0JfFfqq0FeFvir0VaGvCn1V6KtCXxX6qtBXhb4q9FWhrwp9VeirQl8V+qrQV4W+KvRVoa8KfVXoq0JfFfqq0FeFvir0VaGvCn1V6KtCXxX6qtBXhb4q9FWhrwp9VeirQl8V+qrQV4W+KvRVoa8KfVXoq0JfFfqq0FeFvir0VaGvCn1V6KtCXxX6qtBXhb4q9FWhrxp91eirRl81+qrRV42+avRVo68afdXoq0ZfNfqq0VeNvmr0VaOvGn3V6KtGXzX6qtFXjb5q9FWjrxp91eirRl81+qrRV42+avRVo68afdXoq0ZfNfqq0VeNvmr0VaOvGn3V6KtGXzX6qtFXjb5q9FWjrxp91eirRl81+qrRV42+avRVo68afdXoq0ZfNfqq0VeNvmr0VaOvGn3V6KtGXzX6qtFXjb5q9FWjrxp91eirRl81+qrRV42+avRVo68afdXoq0ZfNfqq0VeNvmr0VaOvGn3V6KtGXzX6qtFXjb5q9FWjrxp91eirRl81+mqjrzb6aqOvNvpqo682+mqjrzb6aqOvNvpqo682+mqjrzb6aqOvNvpqo682+mqjrzb6aqOvNvpqo682+mqjrzb6aqOvNvpqo682+mqjrzb6aqOvNvpqo682+mqjrzb6aqOvNvpqo682+mqjrzb6aqOvNvpqo682+mqjrzb6aqOvnvXtv2/R8Wd9+5MdOZATuZAbeSOfLz99pQxvwVvwFrwFb8Fb8Ba8BW/D2/A2vA1vw9vwNrwNb8Pb8G54N7wb3g3vhnfDu+Hd8G54N7wH3gPvgffAe+A98B54D7wH3vN5n/XtTzbkhezIgZzIhdzIGxleg9fgNXgNXoPX4DV4DV6D1+Bd8C54F7wL3gXvgnfBu+Bd8C54HV6H1+F1eB1eh9fhdXgdXoc34A14A96AN+ANeAPegDfgDXgTXvTVQV8d9NVBXx301bO+/fcdX/6sb3/yRj5ffvpK2ZAXsiMHciLDW/AWvAVvw9vwNrwNb8Pb8Da8DW/D2/BueDe8G94N74Z3w7vh3fBueDe8B94D74H3wHvgPfAeeA+8B97zeuNZ3/5kQ17IjhzIiVzIjbyR4TV4DV6D1+A1eA1eg9fgNXgN3gXvgnfBu+Bd8C54F7wL3gXvgtfhdXgdXofX4XV4HV6H1+F1eAPegDfgDXgD3oA34A14A96AN+FNeBPehDfhTXgT3oQ34U14C96Ct+AteAvegrfgLXgL3oK34W14G96Gt+FteBvehrfhbXg3vBveDe+G9+mrnpzIhdzIG/l8+ekrZUNeyI4M74H3wHvgPfCez/usb3+yIS9kRw7kRC7kRt7I8Kqvfl8oGM/69icvZEcO5EQu5EbeyOfLC1711e+rC+NZ3/5kRw7kRC7kRt7I58vqqyfD6/A6vA6v+ur3BYfxrG9/ciNv5PNl9dWTDXkhO3IgwxvwBrwBb8Cb8Ca8CW/Cm/AmvAlvwpvwJrwFb8Fb8Ba8Ba/66vdVb/Gsb39yI4/397118axvV1ZfPXm8Pq+pvnqyI4/39z288axvf3IhN/JGPl9WXz3ZkBeyI8O74d3wbnjVVz7brr5SVl89eby/P/ESz/r2JztyICdyITfyRj5vfta3P9mQF7IjB7K8PrmQG3kjny+rr55syAvZkQMZXoPX4DV4Dd4F74J3wbvgXfAueBe8C94F74LX4XV4HV6H1+F1eB1eh9fhdXgD3oA34A14A96AN+ANeAPegDfhTXgT3oQ34U14E96EN+FNeAvegrfgLXgL3oK34C14C96Ct+FteBvehrfhbXgb3oa34W14N7wb3g3vhnfDu+Hd8G54N7wb3gPvgffAe+A98B54D7wH3gPv+bzP+vYnG/JCljcnB3IiF3Ijb+Tz5aevlA15IcNr8Bq8Bq/Ba/AavAveBe+Cd8G74F3wLngXvAveBa/D6/A6vA6vw+vwOrwOr8Pr8Aa8AW/AG/AGvAFvwBvwBrwBb8Kb8Ca8CW/Cm/AmvAlvwpvwFrwFb8Fb8Ba8BW/BW/AWvAVvw9vwNrwNb8Pb8Da8DW/D2/BueDe8G94N74Z3w7vh3fBueDe8B94D74H3wHvgPfAeeA+8B97zeZ/17U825IXsyIGcyIXcyBsZXvRVoK8CfRXoq0BfBfoq0FeBvgr0VaCvAn0V6KtAXwX6KtBXgb4K9FWgrwJ9FeirQF8F+irQV4G+CvRVoK8CfRXoq0BfBfoq0FeBvgr0VaCvAn0V6KtAXwX6KtBXgb4K9FWgrwJ9FeirQF8F+irQV4G+CvRVoK8CfRXoq0BfBfoq0FeBvgr0VaCvAn0V6Ktnffvv+7TjWd/+5IXsyIGcyIXcyBv5fHnDu+Hd8G54n746kxO5kBt5I58vP32lbMgL2ZHhPfAeeA+8B97zeZ/17U825IXsyIGcyIXcyBsZXoPX4DV4DV6D1+A1eA1eg9fgXfAueBe8C94F74J3wbvgXfAueB1eh9fhdXgdXofX4XV4HV6HN+ANeANe9dXvr1XGs779yYk83t8f5YxnffuTN/L5svrqyYa8kB05kBMZ3oQ34U14C96Ct+AteAvegrfgLXgL3oK34W14G96Gt+FteBvehrfhbXg3vBveDe+Gd8O74d3wbng3vBveA++B98B74D3wHngPvAfeA+/5vM/69icb8kJ25EBO5EJu5I0Mr8Fr8Bq8Bq/Ba/AavAavwWvwLngXvAveBe+Cd8G74F3wLngXvA6vw+vwOrwOr8Pr8Dq8Dq/DG/AGvAFvwBvwBrzoq0JfFfqq0FeFvir0VaGvCn1V6KtCXxX6qtBXhb4q9FWhrwp9VeirQl8V+qrQV4W+KvRVoa8KfVXoq0JfFfqq0FeFvir0VaGvCn1V6KtCXxX6qtBXhb4q9FWhrwp9VeirQl8V+qrQV4W+KvRVoa8KfVXoq0JfFfqq0FeFvir0VaOvGn3V6KtGXzX6qtFXjb5q9FWjrxp91eirRl81+qrRV42+avRVo68afdXoq0ZfNfqq0VeNvmr0VaOvGn3V6KtGXzX6qtFXjb5q9FWjrxp91eirRl81+qrRV42+avRVo68afdXoq0ZfNfqq0VeNvmr0VaOvGn3V6KtGXzX6qtFXjb5q9FWjrxp91eirRl81+qrRV42+avRVo68afdXoq0ZfNfqq0VeNvmr0VaOvGn3V6KtGXzX6qtFXjb5q9FWjrxp91eirRl81+qrRV42+avRVo68afdXoq0ZfNfqq0VeNvmr0VaOvGn3V6KtGX2301UZfbfTVRl9t9NVGX2301UZfbfTVRl9t9NWzvv33N2viWd/+ZEcO5EQu5EbeyOfLT18pw7vgXfAueNVX9Te5kBt5I58vq6+ebMgL2ZEDGV6H1+F1eB3egDfgDXgD3oA34A14A96AN+BNeBPehDfhTXgT3oQ34U14E96Ct+AteAvegrfgLXgL3oK34G14G96Gt+FteBvehrfhbXgb3g3vhnfDu+Hd8G54N7wb3g3vhvfAe+A98B54D7wH3gPvgffAez7vs7799zeh4lnf/uSFLG9PDuRELuRG3sjny+qrJxvyQobX4DV4DV6D1+A1eBe8C94F74J3wbvgXfAueBe8C16H1+F1eB1eh9fhdXgdXofX4Q14A96AN+ANeAPegDfgDXgD3oQ34U14E96EN+FNeBPehDfhLXgL3oK34C14C96Ct+AteAvehrfhbXgb3oa34W14G96Gt+Hd8G54N7wb3g3vhnfDu+Hd8G54D7wH3gPvgffAe+A98B54D7zn9eazvv3JhryQHTmQE7mQG3kjw2vwGrwGr8Fr8Bq8Bq/Ba/AavAveBe+Cd8G74F3wLngXvAveBa/D6/A6vA6vw+vwOrwOr8Pr8Aa8AW/AG/AGvAFvwBvwBrwBb8Kb8Ca8CW/Cm/AmvAlvwpvwFrwFb8Fb8Ba8BW/BW/AWvAVvw9vwNrwNb8Pb8Da8DW/D2/BueDe8G94N74Z3w7vh3fBueDe8B94D74H3wHvgPfAeeA+8B170laGvDH1l6CtDXxn6ytBXhr4y9JWhrwx9ZegrQ18Z+srQV4a+MvSVoa8MfWXoK0NfGfrK0FeGvjL0laGvDH1l6CtDXxn6ytBXhr4y9JWhrwx9ZegrQ18Z+srQV4a+MvSVoa8MfWXoK0NfGfrK0FeGvjL0laGvDH1l6CtDXxn6ytBXhr4y9JWhrwx9ZegrQ18Z+srQV4a+MvSVoa8MfWXoK0NfGfrK0FeGvjL0laGvDH1l6CtDXxn6ytBXhr4y9JWhrwx9ZegrQ18Z+srQV4a+MvSVoa8MfWXoK0NfGfrK0FeGvjL01bO+/fe3g/NZ3/7kjXze/Kxvf7IhL2RHDuRELuRG3sjwqq86JhvyQnbkQE7kQm7kjXy+vOBd8C54F7wL3gXvgnfBu+Bd8Kqv2icb8kJ25EBO5EJu5I18vhzwBrwBb8Ab8Aa8AW/AG/AGvAlvwpvwJrwJb8Kb8Ca8CW/CW/AWvAVvwVvwFrwFb8Fb8Ba8DW/D2/A2vA1vw9vwNrwNb8O74d3wbng3vBveDe+Gd8O74d3wHngPvAfeA++B98B74D3wHnjP533Wtz/ZkBeyIwdyIhdyI29keA1eg9fgNXgNXoPX4DV4DV6Dd8G74F3wLngXvAveBe+Cd8G74EVfOfrK0VeOvnL0laOvHH3l6CtHXzn6ytFXjr5y9JWjrxx95egrR185+srRV46+cvSVo68cfeXoK0dfOfrK0VeOvnL0laOvHH3l6CtHXzn6ytFXjr5y9JWjrxx95egrR185+srRV46+cvSVo68cfeXoK0dfOfrK0VeOvnL0laOvHH3l6CtHXzn6ytFXjr5y9JWjrxx95egrR185+srRV46+cvSVo68CfRXoq0BfBfoq0FeBvgr0VaCvnvXtnZPPl5++UjbkhezIgZzIhdzI8Bq8C94F74J3wbvgXfAueBe8C94Fr8Pr8Dq8Dq/D6/A6vA6vw+vwBrwBb8Ab8Aa8AW/AG/AGvAFvwpvwJrwJb8Kb8Ca8CW/Cm/AWvAVvwVvwFrwFb8Fb8Ba8T1+dX376StmQx7ttsiMHciIXciNv5PNl9dWTDRneDe+Gd8O74d3wbng3vAfeA++B98B74D3wHngPvAfe83mf9e1PNuSF7MiBnMiF3MgbGV6D1+A1eA1eg9fgNXgNXoPX4F3wLngXvAveBe+Cd8G74F3wLngdXofX4XV4HV6H1+F1eB1ehzfgDXgD3oA34A14A96AN+ANeBPehDfhTXgT3oQ34U14E96Et+AteAvegrfgLXgL3oK34C14G96GF32V6KtEXyX6KtFXib5K9FWirxJ9leirRF8l+irRV4m+SvRVoq8SfZXoq0RfJfoq0VeJvkr0VaKvEn2V6KtEXyX6qtBXhb4q9FWhrwp9VeirQl8V+qrQV4W+KvRVoa8KfVXoq0JfFfqq0FeFvir0VaGvCn1V6KtCXxX6qtBXhb4q9FWhrwp9VeirQl8V+qrQV4W+KvRVoa8KfVXoq0JfFfqq0FeFvir0VaGvCn1V6KtCXxX6qtBXhb4q9FWhrwp9VeirQl8V+qrQV4W+KvRVoa8KfVXoq0JfFfqq0FeFvir0VaGvCn1V6KtCXxX6qtBXhb4q9FWhrwp9VeirQl8V+qrQV4W+KvRVoa8KfVXoq0JfFfqq0FeFvir0VaGvCn1V6KtCXxX6qtBXhb4q9FWhrxp91eirRl81+qrRV42+avRVo68afdXoq0ZfNfqq0VeNvmr0VaOvGn3V6KtGXzX6qtFXjb5q9FWjrxp91eirRl81+qrRV42+avRVo68afdXoq0ZfNfqq0VeNvmr0VaOvGn31rG/fMXkhO7K8NTmRC7mRN/L58tNXyoa8kB0Z3oT36au/yY28kc+Xn75SNuSF7MiBnMjwFrwFb8Hb8Da8DW/D2/A2vA1vw9vwNrwb3g3vhnfDu+Hd8G54N7wb3g3vgffAe+A98B54D7wH3gPvgfd83md9+5MNeSE7ciAnciE38kYe7/l99n/Wtz/ZkMd7arIjB7K8PbmQG3kjny8/faVsyAvZkQMZ3gXvgnfBu+B1eB1eh9fhdXgdXofX4XV4Hd6AN+ANeAPegDfgDXgD3oA34E14E96EN+FNeBPehDfhTXgT3oK34C14C96Ct+AteAvegrfgbXgb3oa34W14G96Gt+FteBveDe+Gd8O74d3wbng3vBveDe+G98B74D3wHngPvAfeA++B98B7Pu+zvv3JhryQHTmQE1n3J9fkRt7I58vP/XZlQ17IjhzIiQyvwWvwGrwL3gXvgnfBu+Bd8C54F7wL3gWvw+vwOrwOr8Pr8Dq8Dq/D6/AGvAFvwBvwBrwBb8Ab8Aa8AW/Cm/AmvAlvwpvwJrwJb8Kb8Ba8BW/BW/AWvAVvwVvwFrwFb8Pb8Da8DW/D2/A2vA1vw9vwbng3vBveDe+Gd8O74d3wbng3vAfeA++B98B74D3wHnjVV+dM3sjn5tL69n+fBCcb8kJ25EBO5EJu5I18vmzwGrwGr8Fr8Bq8Bq/Ba/AavAveBe+Cd8G74F3wLngXvAveBa/D6/A6vA6vw+vwOrwOr8Pr8Aa8AW/AG/AGvAFvwBvwBrwBb8Kb8Ca8CW/Cm/AmvAlvwpvwFrwFb8Fb8Ba8BW/BW/AWvAVvw9vwNrwNb8Pb8Da8DW/D2/BueDe8G94N74Z3w7vh3fBueDe8B94D74H3wHvgPfAeeA+8B97zeQ19ZegrQ18Z+srQV4a+MvSVoa8MfWXoK0NfGfrK0FeGvjL0laGvDH1l6CtDXxn6ytBXhr4y9JWhrwx9ZegrQ18Z+srQV4a+MvSVoa8MfWXoK0NfGfrK0FeGvjL0laGvDH1l6CtDXxn6ytBXhr4y9JWhrwx9ZegrQ18Z+srQV4a+MvSVoa8MfWXoK0NfGfrK0FeGvjL0laGvDH1l6CtDXxn6ytBXhr4y9JWhrwx9ZegrQ18Z+srQV4a+MvSVoa8MfWXoK0NfGfrK0FeGvjL0laGvDH1l6CtDXxn6ytBXhr4y9JWhrwx9ZegrQ18Z+mqhrxb6aj19VZMdOZATuZAbeSOfLz99pWzI8Bq8Bq/66vf3Pkrr229uZHn/Jp8vP32lbMgL2ZEDOZELuZHhXfA6vA6vw+vwOrwOr8Pr8Dq8Dm/AG/AGvAFvwBvwBrwBb8Ab8Ca8CW/Cm/AmvAlvwpvwJrwJb8Fb8Ba8BW/BW/AWvAVvwVvwNrwNb8Pb8Da8DW/D2/A2vA3vhnfDu+Hd8G54N7wb3g3vhnfDe+A98B54D7wH3gPvgffAe+A9n9f//pANeSE7ciAnciE38kaG1+A1eA1eg9fgNXgNXoMXfeXoK0dfOfrK0VeOvnL0laOvHH3l6CtHXzn6ytFXjr5y9JWjrxx95egrR185+srRV1rf/u/p5y+rr55syONda7IjB/J4V08u5EYe79qTz5fVV0825IXsyIGcyIXcyPAmvAVvwau+8pjsyIE83pj9o756ciOPN2b/qK+U1VdPHu/vu1tL69tvduTx5hwv9dWTC3m8ObOpr558vqy+erIhL2RHDuRELmR4N7wb3gPvgffAe+A98B54D7wH3gPv+bxa336zIS9kRw7kRC7kRt7I8Bq8Bq/Ba/AavAavwWvwGrwG74J3wbvgXfAueBe8C94F74J3wevwOrwOr8Pr8Dq8Dq/D6/A6vAFvwBvwBrwBb8Ab8Aa8AW/Am/AmvAlvwpvwJrwJb8Kb8Ca8BW/BW/AWvAVvwVvwFrwFb8Hb8Da8DW/D2/A2vA0v+irQV4G+CvRVoK8CfRXoq0BfBfoq0FeBvgr0VaCvAn0V6KtAXwX6KtBXgb4K9FWgrwJ9FeirRF8l+irRV4m+SvRVoq8SfZXoq0RfJfoq0VeJvkr0VaKvEn2V6KtEXyX6KtFXib5K9FWirxJ9leirRF8l+irRV4m+SvRVoq8SfZXoq0RfJfpK69u7bHIiF/J4qyZv5PNl9dXvd+FL69tvXsjj7fGqr56cyOP9/R5KaX37zRt5vPt3jaH17Tcb8ni3T3bkQB7vmW1UXz25kcd79Jrny+qrJ4/37MkL2ZF/3v03809f3VzIPXn25/TVzefL01fbZv7pq5sXsk+e/Tl9dXMij9fmuExf3byRz5f3H7IhL2RHDuREhnfDu+Hd8B54D7wH3gPvgffAe+A98B54z+fV+vabDXkhO3IgJ3IhN/J45/OF1rc/efrq5vH+/oZpaX37zY4cyIlcyI28kc+X1x8yvAveBe+Cd8l7JhdyI4/X/yafL09f3Txen22fvrrZkQM5kQu5kTfy+XL8IcMb8Ia8M38EciKPN2b+6aubN/J44/f+1fr2mw15vDHnxvTVzfHlOYfz912RpTXP+/e3XUprm/d8Vmqdq09eyI4cyIlcyI28kc+XDV6D1+A1eA1eg9fgNXgNXoN3wbvgXfAueBe8C94F74J3wbvgdXgdXofX4XV4HV6H1+F1eB3egDfgDXgD3oA34A14A96AN+BNeBPehFfn6u9vr/zLgZzIhdzIG1ne33mutc03G/JClnfOf/1sffJ457pFa5tvbuSNfL6sn61PNuSF7MiBDG/D2/A2vPrZWr+e0drmmw15ITtyIMsbkwu5keWd/aafrcr62fpkQ17Ijjzenvn1s/XJhdzI4+2ZUz9bJ2tt883j7T15ITvyeH9r+0trm28uZG3X7zpKa5j3XAdqrfL+rfkvrVXev3WGpbXKNxdyI2/k82X1z1wfaq3yzQvZkcc714paq3zzeM/MrP558kY+X1b/PNmQ5T2THTmQE/nnPXOPVGuVb96TZ+bpnydP/9xsyGvyzDD9c3MgJ3IhN7K8M1ucL+cfsiGP12bm6Z+bA1len1zI/eVyZP3b2a7pkGPjmg65uZFn5qV/e748HXKzIS9kRw7kRC7kRoa34d3wbni3vDPzduRAHu/v75WX1hvf3MjjDb3m+fJ0yM2GvJAdOZATuZAbGd7zebXe+GZDljcnO3IgjzeVC7mRx/v7/vzSeuMnT7fcbMgL2ZEDOZELuZHhNXgXvAveBe+Cd8G74F3wLngXvAteh9fhdXgdXofX4XV4HV6H1+ENeAPegDfgDXgD3oA34A14A96EN+FNeBPehDfhTXgT3oQ34S14C96Ct+AteAvegrfgLXgL3oa34W14G96Gt+FteBvehrfh3fBueDe8G94N74Z3w7vh3fBueA+8B94D74H3wHvgPfAeeA+85/W21hvfbMgL2ZEDOZELuZE3MrwGr/rq9/cIWuuNb3bkQE7kQm7kjXy+rL56MrwL3gXvgnfBu+Bd8C54F7wOr8Pr8Dq8Dq/D6/A6vA6vwxvwBrwBb8Ab8Aa8AW/AG/AGvAlvwpvwJrwJb8Kb8Ca8CW/CW/AWvAVvwVvwFrwFb8Fb8Ba8DW/D2/A2vA1vw9vwNrwNb8O74d3wbng3vBveDe+Gd8O74d3wHngPvAfeA++B98B74D3wHnjP59V645sNeSE7ciAnciE38kaG1+BFXxn6ytBXhr4y9JWhrwx9ZegrQ18Z+srQV/b0lU125EBO5EJu5I18vvz0lbIhw+vwOrwOr8Pr8Dq8Dm/AG/AGvAFvwBvwBrwBb8Ab8Ca8CW/Cm/AmvAlvwpvwJrwJb8Fb8Ba8BW/BW/AWvAVvwVvwNrwNb8Pb8Da8DW/D2/A2vA3vhnfDu+Hd8G54N7wb3g3vhnfDe+A98B54D7wH3gPvgffAe+A9n3f9/SEb8kJ25EBO5EJu5I0Mr8Fr8Bq8Bq/Ba/AavAavwWvwLngXvOirhb5a6KuFvlroq4W+Wuirhb5a6KuFvlroq4W+Wuirhb5a6KuFvlroq4W+Wuirhb5a6KuFvlroq4W+Wuirhb5a6KuFvlroq4W+Wuirhb5a6KuFvlroq4W+Wuirhb5a6KuFvlroq4W+Wuirhb5a6KuFvlroq4W+Wuirhb5a6KuFvlroq4W+Wuirhb5a6KuFvlroq4W+Wuirhb5a6KuFvlroq4W+Wuirhb5a6KuFvlroq4W+Wuirhb5a6KuFvlroq4W+cvSVo68cfeXoK0dfOfrK0VeOvnL0laOvHH3l6CtHXzn6ytFXjr5y9JWjrxx95egrR185+srRV/701ZocyIlcyI28kc+Xn75SNuSFDK/D6/A6vA6vw+vwBrwBb8Ab8Aa8AW/AG/AGvAFvwpvwJrwJb8Kb8Ca8CW/Cm/AWvAVvwVvwFrwFb8Fb8Ba8BW/D2/A2vA1vw9vwNrwNb8Pb8G54N7wb3g3vhnfDu+Hd8G54N7wH3gPvgffAe+A98B54D7wH3vN54+8P2ZAXsiMHciIXciNvZHgNXoPX4DV4DV6D1+A1eA1eg3fBu+Bd8KKvAn0V6KtAXwX6Kp6+ysnny09fKcu7Jy9kR57X/z1vba0rPj2vr1568rz+73vLW+uKz2+tXWtd8c3z+j1e9dKTZ7u6Js92dU+Wd2ZQLz1Z3jN5vL/vmGqtKz575lQvPXm8e+ZULz05kBO5kBt5I58vq5eebMjwFrwFb8Fb8Ba8BW/B2/A2vA1vw9vwNrwNb8Pb8Da8G94N74Z3w7vh3fBueDe8G94N74H3wHvgPfAeeA+8B94D74H3fF6tK77ZkBey/u3v/Nca4PNbD9BaA/zvacJkzVaTAzmRC1mz9eSNfL6sDnmyvHvyQnbkQE7kQm7kjXy+rA55MrwOr8Pr8Dq8Dq/Dq97YZ/L82/M3OZFnrZrrv2/kjTwz/9ZItNbx3mzIC3lmPnNM1Q9PTuRCnpnPHF/1wxnvrx/+XYDPnL9++Jfnv//1w78858avH/7lOda/fviX5zj++uHNiVy/bDPnrx/evJHHa+PqP2RDXsiOHMjjtdmulne2qxt5I58v7z9kQx7vmtffjhzIiTzeNe+p3cgbWd7Zh+cP2ZDlnX1+HDmQE7mQG3kjnzfPOt43G/JCduRATuR3HUhrHe/NG/l8WdctTzbkhezIgZzI8Bq8Bq/Bu7S9OdmQF7K2tycHciLPfv6tg+1Zx/vmjXy+7H/IhryQHTmQExleh9fhdXgDxzdwfAPHN3B8A8c3cHyjkBt5I+O8SngT3oQ34U1t7+z/TORCbuSNfL6svnqyIS9kR4a34C14C1711W/NT5f6Sll99WRDXsiOHMiJXMiNDG/Du+Hd8KqvfM559dWTAzmRC7mRxxuz7eorZfXVk8cb41VfPdmRx/tbj92lvnpyITfyRj5vbvVV2mRDXsjj/a2D7VZfPTmRx5t6zUbeyOOd51yzlvvNhjzeuT8za7nfHMjj/a017VnL/eZGHu98Zpm13Derr54s75m8kB15vPNZptVXTy7k8bZecyOfL6uvnmzIC9mRAzmRCxleh9fhDXjVV/NZqdVXT3bk8c61a6uvnlzI4916zY18vqy+erIhL2RHDuRELmR4E96Et+BVX821WauvnuzI453rvVZfPbmQx3tm29VXTz5fVl+deS+or568kH9e+5vXnL66OZFrsl6zkTeyvLON6qsnG/LPa3P9Nmu53xzI47V5zemrmxtZ3nlPTV89efrqZnnn/au+erIjy1uTE7mQxzvXe7OW+83nzbOW+98N47/JhryQZ3u9JwdyIo93PhfM91S/eSOP97fOs2eN95sNebwRkx05kMebM9v01c2NPN7p0ln7ffP01c3jnS6dtd9vduTxzv2cWfv95kIe7+/3KHvWfr/5fHn6yqbfZu33mxfyeKdbZu33mxN5vNMts/b7zRt5vPM5d9Z+v9mQxzufbWft95sDebxn9vn01c2NPN75jDZrv2+evrr5513zXpu132925Jg8rzl9dXMh/7zL5vhOX918vjx9tWzmn766eSGPdz43zbrxNyfyeOd6e9aNv3kjj3fN/py+utmQx7vmuExf3RzI4/XZxumrmxt5vHONN+vGb56+unm8v+/36Fk3/mZHHm/Me3/66uZCHq/ea9NXN58vT1+tuZ6ZdeNvXsjjzXnN6aubE3m8eq9NX928kcc7ayBn3fibDVmftWvyuOb6Z9aE/8s2eSOfL08XrbnOmTXhb17IjhzIiTzbMtdCsyb8zRv5fHnJO/MvQx7v3PudNeFvDuRELuRG3sjny9NFNxsyvA6vw+vwurw+uZE38vly/CEbsrw52ZEDWd7Zb1HIjbyRz5fzD3m8c1/xqIue7MiBPN65Tjvqoic38njnftpRFymri55syAvZkQM5kQu5keEteBvehldd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e7F7sXuxe7F7sXuxe7F7sXuxe7G72F3s0quLXl306qJXF7266NVFry56ddGri15d9OqiVxe9uujVRa8uenXRq4teXfTqolcXvbro1UWvLnp10auLXl306qJXF7266NVFry56ddGri15d9OqiVxe9uujVRa8uenXRq4teXfTqolcXvbro1UWvLnp10auLXl306qJXF7266NVFry56ddGri15d9OqiVxe9uujVRa8uenXRq4teXfTqolcXvbro1UWvLnp10auLXl306qJXF7266NWiV4teLXq16NWiV4teLXq16NWiV4teLXq16NWiV4teLXq16NWiV4teLXq16NWiV4teLXq16NWiV4teLXq16NWiV4teLXq16NWiV4teLXq16NWiV4teLXq16NWiV4teLXq16NWiV4teLXq16NWiV4teLXq16NWiV4teLXq16NWiV4teLXq16NWiV4teLXq16NWiV4teLXq16NWiV4teLXq16NWiV4teLXq16NWiV4teLXq16NWiV4teLXq16NWiV4teLXq16NWiV4teLXq16NWiV4teLXq16NWiV4teLXq16FXoVehV6FXoVehV6FXoVehV6FXoVehV6FXoVehV6FXoVehV6FXoVehV6FXoVehV6FXoVehV6FXoVehV6FXoVehV6FXoVehV6FXoVehV6FXoVehV6FXoVehV6FXoVehV6FXoVehV6FXoVehV6FXoVehV6FXoVehV6FXoVehV6FXoVehV6FXoVehV6FXoVehV6FXoVehV6FXoVehV6FXoVehV6FXoVehV6FXoVehV6FXoVehV6FXoVehV6FXoVehV6FXoVehV6FXoVdGroldFr4peFb0qelX0quhV0auiV0Wvil4VvSp6VfSq6FXRq6JXRa+KXhW9KnpV9KroVdGroldFr4peFb0qelX0quhV0auiV0Wvil4VvSp6VfSq6FXRq6JXRa+KXhW9KnpV9KroVdGroldFr4peFb0qelX0quhV0auiV0Wvil4VvSp6VfSq6FXRq6JXRa+KXhW9KnpV9KroVdGroldFr4peFb0qelX0quhV0auiV0Wvil4VvSp6VfSq6FXRq6JXRa+KXhW9KnpV9KroVdGroldFr4peNb1qetX0qulV06umV02vml41vWp61fSq6VXTq6ZXTa+aXjW9anrV9KrpVdOrpldNr5peNb1qetX0qulV06umV02vml41vWp61fSq6VXTq6ZXTa+aXjW9anrV9KrpVdOrpldNr5peNb1qetX0qulV06umV02vml41vWp61fSq6VXTq6ZXTa+aXjW9anrV9KrpVdOrpldNr5peNb1qetX0qulV06umV02vml41vWp61fSq6VXTq6ZXTa+aXjW9anrV9KrpVdOrpldNr5peNb1qetX0qunV0KuhV0Ovhl4NvRp6NfRq6NXQq6FXQ6+GXg29Gno19Gro1dCroVdDr4ZeDb0aejX0aujV0KuhV0Ovhl4NvRp6NfRq6NXQq6FXQ6+GXg29Gno19Gro1dCroVdDr4ZeDb0aejX0aujV0KuhV0Ovhl4NvRp6NfRq6NXQq6FXQ6+GXg29Gno19Gro1dCroVdDr4ZeDb0aejX0aujV0KuhV0Ovhl4NvRp6NfRq6NXQq6FXQ6+GXg29Gno19Gro1dCroVdDr4ZeDb0aejX0aujV0KuhV0Ovhl7d9OqmVze9uunVTa9uenXTq5te3fTqplc3vbrp1U2vbnp106ubXt306qZXN7266dVNr256ddOrm17d9OqmVze9uunVTa9uenXTq5te3fTqplc3vbrp1U2vbnp106ubXt306qZXN7266dVNr256ddOrm17d9OqmVze9uunVTa9uenXTq5te3fTqplc3vbrp1U2vbnp106ubXt306qZXN7266dVNr256ddOrm17d9OqmVze9uunVTa9uenXTq5te3fTqplc3vbrp1U2vbnp106ubXt306qZXN7266dVNr256ddOrm17d9OqmVze9uunVplebXm16tenVplebXm16tenVplebXm16tenVplebXm16tenVplebXm16tenVplebXm16tenVplebXm16tenVplebXm16tenVplebXm16tenVplebXm16tenVplebXm16tenVplebXm16tenVplebXm16tenVplebXm16tenVplebXm16tenVplebXm16tenVplebXm16tenVplebXm16tenVplebXm16tenVplebXm16tenVplebXm16tenVplebXm16tenVplebXm16tenVplebXm16tenVplebXm16tenVoVeHXh16dejVoVeHXh16dejVoVeHXh16dejVoVeHXh16dejVoVeHXh16dejVoVeHXh16dejVoVeHXh16dejVoVeHXh16dejVoVeHXh16dejVoVeHXh16dejVoVeHXh16dejVoVeHXh16dejVoVeHXh16dejVoVeHXh16dejVoVeHXh16dejVoVeHXh16dejVoVeHXh16dejVoVeHXh16dejVoVeHXh16dejVoVeHXh16dejVoVeHXh16dejVoVeHXh16dejVoVeHXh16dejVoVeHXh16dejVoVeHXh16dT57lbfPXr1fX1wvrsN1cd1cD9c315trdi92L3Yvdi92L3Yvdi92L3Yvdi92F7uL3cXuYnexu9hd7C52F7uL3bAbdsNu2A27YTfsht2wG3aL3WK32C12i91it9gtdovdYrfZbXab3Wa32W12m91mt9ltdofdYXfYHXaH3WF32B12h91h92b3Zvdm92b3Zvdm92b3Zvdm92Z3s7vZ3exudje7m93N7mZ3s7vZPewedg+7h93D7mH3sHvYPezSK3x78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3Bt79fs0uv8O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3Bt79fs0uv8O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffHnx78O3BtwffXvj2wrcXvr3w7YVvL3x74dsL31749sK3F7698O2Fby98e+HbC99e+PbCtxe+vfDthW8vfHvh2wvfXvj2wrcXvr3w7YVvL3x74dsL31749sK3F7698O2Fby98e+HbC99e+PbCtxe+vfDthW8vfHvh2wvfXvj2wrcXvr3w7YVvL3x74dsL31749sK3F7698O2Fby98e+HbC99e+PbCtxe+vfDthW8vfHvh2wvfXvj2wrcXvr3w7YVvL3x74dsL31749sK3F7698O2Fby98e+HbC99e+PbCtxe+vfDthW8vfHvh2wvfXvj2wrcXvr3w7YVvL3x74dsL31749sK3F7698O2Fby98e+HbC99e+PbCtxe+vfDthW8vfHvh2wvfXvj2wrcXvr3w7YVvL3x74dsL31749sK3F7698O2Fby98e+HbC99e+PbCtxe+vfDthW8vfHvh2wvfXvj2wrcXvr3w7YVvL3x74dsL31749sK3F7698O2Fby98e+HbC99e+PbCtxe+vfDthW8vfHvh2wvfXvj2wrcXvr3w7YVvL3x74dsL31749sK3F7698O2Fby98e+HbC99e+PbCtxe+vfDthW8vfHvh2wvfXvj2wrcXvr3w7YVvL3x74dsL31749sK3F7698O2Fby98e+HbC99e+PbCtxe+vfDthW8vfHvh2wvfXvj2wrcXvr3w7YVvL3x74dsL31749sK3F7698O2Fby98e+HbC99e+PbCtxe+vfDthW8vfHvh2wvfXvj2wrcXvr3w7YVvL3x74dsL31749sK3F7698O2Fby98e+HbC99e+PbCtxe+vfDthW8vfHvh2wvfXvj2wrcXvr3w7YVvL3x74dsL31749sK3F7698O2Fby98e+HbC99e+PbCtxe+vfDthW8vfHvh2wvfXvj2wrcXvr3w7YVvL3x74dsL31749sK3F7698O2Fby98e+HbC99e+PbCtxe+vfDthW8vfHvh2wvfXvj2wrcXvr3w7YVvL3x74dsL31749sK3F7698O2Fby98e+HbC99e+PbCtxe+vfDthW8vfHvh2wvfXvj2wrcXvr3w7YVvL3x74dsL31749sK3F7698O2Fby98e+HbC99e+PbCtxe+vfDthW8vfHvh2wvfXvj2wrcXvr3w7YVvL3x74dsL31749sK3F7698O2Fby98e+HbC99e+PbCtxe+vfDthW8vfHvh2wvfXvj2wrcXvr3w7YVvL3x74dsL31749sK3F7698O2Fby98e+HbC99e+PbCtxe+vfDthW8vfHvh2wvfXvj2wrcXvr3w7YVvL3x74dsL31749sK3F7698O2Fby98e+HbC99e+PbCtxe+vfDthW8vfHvh2wvfXvj2wrcXvr3w7YVvL3x74dsL31749sK3F7698O2Fby98e+HbC99e+PbCtxe+vfDthW8vfHvh2wvfXvj2wrcXvr3w7YVvL3x74dsL31749sK3F7698O2Fby98e+HbC99e+PbCtxe+vfDthW8vfHvh2wvfXvj2wrcXvr3w7YVvL3x74dsL31749sK3F7698O2Fby98e+HbC99e+PbCtxe+vfDthW8vfHvh2wvfXvj2wrcXvr3w7YVvL3x74dsL31749sK3F7698O2Fby98e+HbC99e+PbCtxe+vfDthW8vfHvh2wvfXvj2wrcXvr3w7YVvL3x74dsL31749sK3F7698O2Fby98e+HbC99e+PbCtxe+vfDthW8vfHvh2wvfXvj2wrcXvr3w7YVvL3x74dsL31749sK3F7698O2Fby98e+HbC99e+PbCtxe+vfDthW8vfHvh2wvfXvj2wrcXvr3w7YVvL3x74dsL31749sK3F7698O2Fby98e+HbC99e+PbCtxe+vfDthW8vfHvh2wvfXvj2wrcXvr3w7YVvL3x74dsL31749sK3F7698O2Fby98e+HbC99e+PbCtxe+vfDthW8vfHvh2wvfXvj2wrcXvr3w7YVvL3x74dsL31749sK3F7698O2Fby98e+HbC99e+PbCtxe+vfDthW8vfHvh2wvfXvj2wrcXvr3w7YVvL3x74dsL31749sK3F7698O2Fby98e+HbC99e+PbCtxe+vfDthW8vfHvh2wvfXvj2wrcXvr3w7YVvL3x74dsL31749sK3F7698O2Fby98e+HbC99e+Pb60bf/8OL09aNv//H62+7+9nf+1Ksfr7/tnrdv18X1t91T366H62+7p79df9s9fzr/fFz/6Nt/vL64XlyH6+K6uR6ub6431+xe7F7sXuxe7F7sXuxe7F7sXuxe7C52F7uL3cXuYnexu9hd7C52F7thN+yG3bAbdsNu2A27YTfsFrvFbrFb7Ba7xW6xW+wWu8Vus9vsNrvNbrPb7Da7zW6z2+wOu8PusDvsDrvD7rA77A67w+7N7s3uze7N7s3uze7N7s3uze7N7mZ3s7vZ3exudje7m93N7mZ3s3vYPewedg+7h93D7mH3sEuvbnq16dWmV5tebXq16dWmV5tebXq16dWmV5tebXq16dWmV5tebXq16dWmV5tebXq16dWmV5tebXq16dWmV5tebXq16dWmV5tebXq16dWmV5tebXq16dWmV5tebXq16dWmV5tebXq16dWmV5tebXq16dWmV5tebXq16dWmV5tebXq16dWmV5tebXq16dWmV5tebXq16dWmV5tebXq16dWmV5tebXq16dWmV5tebXq16dWmV5tebXq16dWmV5tebXq16dWmV5tebXq16dWmV5tebXq16dWmV5tebXq16dWmV5tebXp16NWhV4deHXp16NWhV4deHXp16NWhV4deHXp16NWhV4deHXp16NWhV4deHXp16NWhV4deHXp16NWhV4deHXp16NWhV4deHXp16NWhV4deHXp16NWhV4deHXp16NWhV4deHXp16NWhV4deHXp16NWhV4deHXp16NWhV4deHXp16NWhV4deHXp16NWhV4deHXp16NWhV4deHXp16NWhV4deHXp16NWhV4deHXp16NWhV4deHXp16NWhV4deHXp16NWhV4deHXp16NWhV4deHXp16NWhV4deHXp16NWhV4denc9e9dtnr/rts1f99tmrfvvsVb999qrfPnvVb5+96rfPXvXbZ6/67Y3di92L3Yvdi92L3Yvdi92L3Yvdi93F7mJ3sbvYXewudhe7i93F7mI37IbdsBt2w27YDbthN+yG3WK32C12i91it9gtdovdYrfYbXab3Wa32W12m91mt9ltdpvdYXfYHXaH3WF32B12h91hd9i92b3Zvdm92b3Zvdm92b3Zvdm92d3sbnY3u5vdze5md7O72d3sbnYPu4fdw+5h97B72D3sHnYPu/TqolcXvbro1UWvLnp10auLXl306qJXF7266NVFry56ddGri15d9OqiVxe9uujVRa8uenXRq4teXfTqolcXvbro1UWvLnp10auLXl306qJXF7266NVFry56ddGri15d9OqiVxe9uujVRa8uenXRq4teXfTqolcXvbro1UWvLnp10auLXl306qJXF7266NVFry56ddGri15d9OqiVxe9uujVRa8uenXRq4teXfTqolcXvbro1UWvLnp10auLXl306qJXF7266NVFry56ddGri15d9OqiVxe9uujVRa8uenXRq4teXfTqolcXvbro1UWvFr1a9GrRq0WvFr1a9GrRq0WvFr1a9GrRq0WvFr1a9GrRq0WvFr1a9GrRq0WvFr1a9GrRq0WvFr1a9GrRq0WvFr1a9GrRq0WvFr1a9GrRq0WvFr1a9GrRq0WvFr1a9GrRq0WvFr1a9GrRq0WvFr1a9GrRq0WvFr1a9GrRq0WvFr1a9GrRq0WvFr1a9GrRq0WvFr1a9GrRq0WvFr1a9GrRq0WvFr1a9GrRq0WvFr1a9GrRq0WvFr1a9GrRq0WvFr1a9GrRq0WvFr1a9GrRq0WvFr1a9GrRq0WvFr1a9GrRq0WvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq9Cr0KvQq+KXhW9KnpV9KroVdGroldFr4peFb0qelX0quhV0auiV0Wvil4VvSp6VfSq6FXRq6JXRa+KXhW9KnpV9KroVdGroldFr4peFb0qelX0quhV0auiV0Wvil4VvSp6VfSq6FXRq6JXRa+KXhW9KnpV9KroVdGroldFr4peFb0qelX0quhV0auiV0Wvil4VvSp6VfSq6FXRq6JXRa+KXhW9KnpV9KroVdGroldFr4peFb0qelX0quhV0auiV0Wvil4VvSp6VfSq6FXRq6JXRa+KXhW9KnpV9KrpVdOrpldNr5peNb1qetX0qulV06umV02vml41vWp61fSq6VXTq6ZXTa+aXjW9anrV9KrpVdOrpldNr5peNb1qetX0qulV06umV02vml41vWp61fSq6VXTq6ZXTa+aXjW9anrV9KrpVdOrpldNr5peNb1qetX0qulV06umV02vml41vWp61fSq6VXTq6ZXTa+aXjW9anrV9KrpVdOrpldNr5peNb1qetX0qulV06umV02vml41vWp61fSq6VXTq6ZXTa+aXjW9anrV9KrpVdOrpldNr4ZeDb0aejX0aujV0KuhV0Ovhl4NvRp6NfRq6NXQq6FXQ6+GXg29Gno19Gro1dCroVdDr4ZeDb0aejX0aujV0KuhV0Ovhl4NvRp6NfRq6NXQq6FXQ6+GXg29Gno19Gro1dCroVdDr4ZeDb0aejX0aujV0KuhV0Ovhl4NvRp6NfRq6NXQq6FXQ6+GXg29Gno19Gro1dCroVdDr4ZeDb0aejX0aujV0KuhV0Ovhl4NvRp6NfRq6NXQq6FXQ6+GXg29Gno19Gro1dCroVdDr4ZeDb3Ctze+vfHtjW9vfHvj2xvf3vj2xrc3vr3x7Y1vb3x749sb39749sa3N7698e2Nb298e+PbG9/e+PbGtze+vfHtjW9vfHvj2xvf3vj2xrc3vr3x7Y1vb3x749sb39749sa3N7698e2Nb298e+PbG9/e+PbGtze+vfHtjW9vfHvj2xvf3vj2xrc3vr3x7Y1vb3x749sb39749sa3N7698e2Nb298e+PbG9/e+PbGtze+vfHtjW9vfHvj2xvf3vj2xrc3vr3x7Y1vb3x749sb39749sa3N7698e3v1+zSK3x749sb39749sa3N7698e2Nb298e+PbG9/e+PbGtze+vfHtjW9vfHvj2xvf3vj2xrc3vr3x7Y1vb3x749sb39749sa3N7698e2Nb298e+PbG9/e+PbGtze+vfHtjW9vfHvj2xvf3vj2xrc3vr3x7Y1vb3x749sb39749sa3N7698e2Nb298e+PbG9/e+PbGtze+vfHtjW9vfHvj2xvf3vj2xrc3vr3x7Y1vb3x749sb39749sa3N7698e2Nb298e+PbG9/e+PbGtze+vfHtjW9vfHvj2xvf3vj2xrc3vr3x7Y1vb3x749sb39749sa3N7698e2Nb298+/s1u/QK39749sa3N7698e2Nb298e+PbG9/e+PbGtze+vfHtjW9vfHvj2xvf3vj2xrc3vr3x7Y1vb3x749sb39749sa3N7698e2Nb298e+PbG9/e+PbGtze+vfHtjW9vfHvj2xvf3vj2xrc3vr3x7Y1vb3x749sb39749sa3N7698e2Nb298e+PbG9/e+PbGtze+vfHtjW9vfHvj2xvf3vj2xrc3vr3x7Y1vb3x749sb39749sa3N7698e2Nb298e+PbG9/e+PbGtze+vfHtjW9vfHvj2xvf3vj2xrc3vr3x7Y1vb3x749sb39749sa3N7698e2Nbx98++DbB98++PbBtw++ffDtg28ffPvg2wffPvj2wbcPvn3w7YNvH3z74NsH3z749sG3D7598O2Dbx98++DbB98++PbBtw++ffDtg28ffPvg2wffPvj2wbcPvn3w7YNvH3z74NsH3z749sG3D7598O2Dbx98++DbB98++PbBtw++ffDtg28ffPvg2wffPvj2wbcPvn3w7YNvH3z74NsH3z749sG3D7598O2Dbx98++DbB98++PbBtw++ffDtg28ffPvg2wffPvj2wbcPvn3w7YNvH3z74NsH3z749sG3D7598O2Dbx98++DbB98++PbBtw++ffDtg28ffPvg2wffPvj2wbcPvn3w7YNvH3z74NsH3z749sG3D7598O2Dbx98++DbB98++PbBtw++ffDtg28ffPvg2wffPvj2wbcPvn3w7YNvH3z74NsH3z749sG3D7598O2Dbx98++DbB98++PbBtw++ffDtg28ffPvg2wffPvj2wbcPvn3w7YNvH3z74NsH3z749sG3D7598O2Dbx98++DbB98++PbBtw++ffDtg28ffPvg2wffPvj2wbcPvn3w7YNvH3z74NsH3z749sG3D7598O2Dbx98++DbB98++PbBtw++ffDtg28ffPvg2wffPvj2wbcPvn3w7YNvH3z74NsH3z749sG3D7598O2Dbx98++DbB98++PbBtw++ffDtg28ffPvg2wffPvj2wbcPvn3w7YNvH3z74NsH3z749sG3D7598O2Dbx98++DbB98++PbBtw++ffDtg28ffPvg2wffPvj2wbcPvn3w7YNvH3z74NsH3z749sG3D7598O2Dbx98++DbB98++PbBtw++ffDtg28ffPvg2wffPvj2wbcPvn3w7YNvH3z74NsH3z749sG3D7598O2Dbx98++DbB98++PbBtw++ffDtg28ffPvg2wffPvj2wbcPvn3w7YNvH3z74NsH3z749sG3D7598O2Dbx98++DbB98++PbBtw++ffDtg28ffPvg2wffPvj2wbcPvn3w7YNvH3z74NsH3z749sG3D7598O2Dbx98++DbB98++PbBtw++ffDtg28ffPvg2wffPvj2wbcPvn3w7YNvH3z74NsH3z749sG3D7598O2Dbx98++DbB98++PbBtw++ffDtg28ffPvg2wffPvj2wbcPvn3w7YNvH3z74NsH3z749sG3D7598O2Dbx98++DbB98++PbBtw++ffDtg28ffPvg2wffPvj2+ZNvf3/m/Nv1zfX+dp1v1+dP1//1m7/7P//0x9/90z///l/+/e/+x/97/6//6z//9bf/8bs//OuP//U//u+//fl/+ec//u73v//d//7Hf/vjH377L//zP//4L//4+z/89of/7e/efviPH/Lz99f8Zl3/8P6Xrx///P1P3u9sfnP9kN1/+M3f5U9/cvL+J+8RfP+TH/9v7/fYP/yl/uEv/RCvv//hf7+//a3zw3nrz+e9Z+W6fvP+n/n2V//0J5kf/qTrx4X3hwL7N+8n7j+f/96lXb/54T/Pn89///tz//D/mvfz/+u//uG//j8=",
      "verification_key": "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\nAAAFiSRi70jt/BTMpcaOrm4="
    }
  ],
  "outputs": {
    "globals": {
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Token"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "admin",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "minters",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000002"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000004"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "public_balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "symbol",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "name",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "decimals",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000a"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        },
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Wormhole"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "state",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "sequences",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000007"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "owner",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "receiver_address",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000009"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "token_address",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000d"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_1",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000011"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_2",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000012"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_3",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000013"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_4",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000014"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_5",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000015"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_6",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000016"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_7",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000017"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_8",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000018"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_9",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000019"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_10",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000001a"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_11",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000001b"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_12",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000001c"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_13",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000001d"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_14",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000001e"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_15",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000001f"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_16",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000020"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_17",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000021"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_18",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000022"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "guardian_19",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000023"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "current_guardian_set_index",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000024"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Wormhole::_assert_is_owner_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::_assert_is_owner_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  },
                  {
                    "name": "payloads",
                    "type": {
                      "kind": "array",
                      "length": 8,
                      "type": {
                        "kind": "array",
                        "length": 31,
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    }
                  },
                  {
                    "name": "consistency",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::_publish_message_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 64
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::_publish_message_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "body_bytes",
                    "type": {
                      "kind": "array",
                      "length": 1860,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "body_length",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::compute_vaa_hash_unconstrained_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "array",
                "length": 32,
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::compute_vaa_hash_unconstrained_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::expire_guardian_set_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::expire_guardian_set_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Wormhole::get_owner_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::get_owner_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Wormhole::get_provider_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "chain_id",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 16
                    }
                  },
                  {
                    "name": "evm_chain_id",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 16
                    }
                  }
                ],
                "kind": "struct",
                "path": "structs::Provider"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::get_provider_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Wormhole::get_receiver_address_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::get_receiver_address_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Wormhole::get_scheduled_receiver_address_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                  },
                  {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 64
                  }
                ],
                "kind": "tuple"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::get_scheduled_receiver_address_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Wormhole::get_scheduled_token_address_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                  },
                  {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 64
                  }
                ],
                "kind": "tuple"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::get_scheduled_token_address_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Wormhole::get_token_address_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::get_token_address_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::guardian_set_expired_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::guardian_set_expired_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "chain_id",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 16
                    }
                  },
                  {
                    "name": "evm_chain_id",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 16
                    }
                  },
                  {
                    "name": "owner",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "receiver_address",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_address",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::init_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::init_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "bytes",
                    "type": {
                      "kind": "array",
                      "length": 2000,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "actual_length",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::parse_vaa_unconstrained_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  },
                  {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 8
                  },
                  {
                    "kind": "array",
                    "length": 13,
                    "type": {
                      "kind": "array",
                      "length": 66,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "kind": "array",
                    "length": 1860,
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  },
                  {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                ],
                "kind": "tuple"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::parse_vaa_unconstrained_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "message_ciphertext",
                    "type": {
                      "fields": [
                        {
                          "name": "storage",
                          "type": {
                            "kind": "array",
                            "length": 17,
                            "type": {
                              "kind": "field"
                            }
                          }
                        },
                        {
                          "name": "len",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 32
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::collections::bounded_vec::BoundedVec"
                    }
                  },
                  {
                    "name": "message_context",
                    "type": {
                      "fields": [
                        {
                          "name": "tx_hash",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "unique_note_hashes_in_tx",
                          "type": {
                            "fields": [
                              {
                                "name": "storage",
                                "type": {
                                  "kind": "array",
                                  "length": 64,
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              },
                              {
                                "name": "len",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 32
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "std::collections::bounded_vec::BoundedVec"
                          }
                        },
                        {
                          "name": "first_nullifier_in_tx",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "recipient",
                          "type": {
                            "fields": [
                              {
                                "name": "inner",
                                "type": {
                                  "kind": "field"
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::messages::processing::message_context::MessageContext"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::process_message_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::process_message_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  },
                  {
                    "name": "payloads",
                    "type": {
                      "kind": "array",
                      "length": 8,
                      "type": {
                        "kind": "array",
                        "length": 31,
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    }
                  },
                  {
                    "name": "message_fee",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "consistency",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  },
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::publish_message_in_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::publish_message_in_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 64
                    }
                  },
                  {
                    "name": "payloads",
                    "type": {
                      "kind": "array",
                      "length": 8,
                      "type": {
                        "kind": "array",
                        "length": 31,
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    }
                  },
                  {
                    "name": "message_fee",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 128
                    }
                  },
                  {
                    "name": "consistency",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  },
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "token_nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::publish_message_in_public_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 64
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::publish_message_in_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian10_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian10_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian11_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian11_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian12_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian12_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian13_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian13_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian14_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian14_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian15_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian15_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian16_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian16_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian17_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian17_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian18_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian18_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian19_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian19_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian1_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian1_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian2_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian2_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian3_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian3_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian4_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian4_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian5_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian5_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian6_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian6_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian7_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian7_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian8_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian8_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "guardian",
                    "type": {
                      "fields": [
                        {
                          "name": "address",
                          "type": {
                            "fields": [
                              {
                                "name": "value0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "value19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_x31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y0",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y1",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y2",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y3",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y4",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y5",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y6",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y7",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y8",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y9",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y10",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y11",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y12",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y13",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y14",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y15",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y16",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y17",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y18",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y19",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y20",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y21",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y22",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y23",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y24",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y25",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y26",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y27",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y28",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y29",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y30",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              },
                              {
                                "name": "pub_key_y31",
                                "type": {
                                  "kind": "integer",
                                  "sign": "unsigned",
                                  "width": 8
                                }
                              }
                            ],
                            "kind": "struct",
                            "path": "structs::Guardian_PK"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Guardian"
                    }
                  },
                  {
                    "name": "index",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_guardian9_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_guardian9_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "provider",
                    "type": {
                      "fields": [
                        {
                          "name": "chain_id",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 16
                          }
                        },
                        {
                          "name": "evm_chain_id",
                          "type": {
                            "kind": "integer",
                            "sign": "unsigned",
                            "width": 16
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "structs::Provider"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_provider_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_provider_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "new_receiver_address",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_receiver_address_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_receiver_address_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "new_token_address",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::set_token_address_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::set_token_address_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Wormhole::sync_private_state_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::sync_private_state_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "new_owner",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::transfer_ownership_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::transfer_ownership_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "bytes",
                    "type": {
                      "kind": "array",
                      "length": 2000,
                      "type": {
                        "kind": "integer",
                        "sign": "unsigned",
                        "width": 8
                      }
                    }
                  },
                  {
                    "name": "actual_length",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 32
                    }
                  }
                ],
                "kind": "struct",
                "path": "Wormhole::verify_vaa_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Wormhole::verify_vaa_abi"
        }
      ]
    }
  },
  "file_map": {
    "102": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/macros/functions/call_interface_stubs.nr",
      "source": "use crate::macros::utils::{\n    add_to_field_array, AsStrQuote, compute_fn_selector, is_fn_private, is_fn_public, is_fn_view,\n};\nuse std::meta::unquote;\n\ncomptime global FROM_FIELD: TypedExpr = {\n    let from_field_trait = quote { protocol_types::traits::FromField }.as_trait_constraint();\n    let function_selector_typ =\n        quote { protocol_types::abis::function_selector::FunctionSelector }.as_type();\n    function_selector_typ.get_trait_impl(from_field_trait).unwrap().methods().filter(|m| {\n        m.name() == quote { from_field }\n    })[0]\n        .as_typed_expr()\n};\n\ncomptime global SERIALIZED_ARGS_NAME: Quoted = quote { serialized_args };\n\npub comptime fn stub_fn(f: FunctionDefinition) -> Quoted {\n    let is_static_call = is_fn_view(f);\n\n    if is_fn_private(f) {\n        if is_static_call {\n            create_private_static_stub(f)\n        } else {\n            create_private_stub(f)\n        }\n    } else if is_fn_public(f) {\n        if is_static_call {\n            create_public_static_stub(f)\n        } else {\n            create_public_stub(f)\n        }\n    } else {\n        create_utility_stub(f)\n    }\n}\n\n/// Utility function creating stubs used by all the stub functions in this file.\ncomptime fn create_stub_base(\n    f: FunctionDefinition,\n) -> (Quoted, Quoted, Quoted, Quoted, u32, Field) {\n    let fn_name = f.name();\n    let fn_parameters = f.parameters();\n    let fn_parameters_list =\n        fn_parameters.map(|(name, typ): (Quoted, Type)| quote { $name: $typ }).join(quote {,});\n    let params_num_fields =\n        fn_parameters.fold(0, |acc, (_, typ)| acc + crate::macros::utils::size_in_fields(typ));\n\n    let serialized_args_index_name = quote { serialized_args_index };\n    // Example of what the fold(...) below will generate for `target_address` and `fee_juice_limit_per_tx` function\n    // parameters:\n    // ```\n    // let mut serialized_args = [0;2];\n    // let mut serialized_args_index = 0;\n    // let target_address_serialized = aztec::protocol_types::traits::Serialize::serialize(target_address)\n    // for i in 0..target_address_serialized.len() {\n    //    serialized_args[serialized_args_index] = target_address_serialized[i];\n    //    serialized_args_index += 1;\n    // }\n    // serialized_args[serialized_args_index] = fee_juice_limit_per_tx as Field\n    // serialized_args_index += 1;\n    // ```\n    let serialized_args_array_construction = fn_parameters.fold(\n        quote {\n            let mut $SERIALIZED_ARGS_NAME = [0; $params_num_fields];\n            let mut $serialized_args_index_name: u32 = 0;\n        },\n        |args, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let arg_to_append =\n                add_to_field_array(SERIALIZED_ARGS_NAME, serialized_args_index_name, name, typ);\n            quote {\n                $args\n                $arg_to_append\n            }\n        },\n    );\n\n    let (fn_name_str, _) = fn_name.as_str_quote();\n    let fn_name_len: u32 = unquote!(quote { $fn_name_str.as_bytes().len()});\n    let fn_selector: Field = compute_fn_selector(f);\n\n    (\n        fn_name, fn_parameters_list, serialized_args_array_construction, fn_name_str, fn_name_len,\n        fn_selector,\n    )\n}\n\ncomptime fn create_private_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_array_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_array_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_public_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_utility_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::UtilityCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::UtilityCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n            )\n        }\n    }\n}\n"
    },
    "103": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "106": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr",
      "source": "use crate::macros::{\n    functions::{\n        auth_registry::AUTHORIZE_ONCE_REGISTRY, call_interface_stubs::stub_fn, stub_registry,\n    },\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_authorize_once, fn_has_noinitcheck, get_fn_visibility,\n        is_fn_contract_library_method, is_fn_initializer, is_fn_internal, is_fn_private,\n        is_fn_public, is_fn_test, is_fn_utility, is_fn_view, modify_fn_body, module_has_initializer,\n        module_has_storage,\n    },\n};\nuse std::meta::{ctstring::AsCtString, type_of};\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) {\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any. Note that the message\n    // discovery call syncs private events as well. We do not sync those here if there are no notes because we don't\n    // have an API that would access events from private functions.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject the authwit check if the function is marked with #[authorize_once].\n    let authorize_once_check = if fn_has_authorize_once(f) {\n        create_authorize_once_check(f)\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    // A quote to be injected at the beginning of the function body.\n    let to_prepend = quote {\n        dep::aztec::oracle::version::assert_compatible_oracle_version();\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n        $authorize_once_check\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) {\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n\n    let args_len_quote = if original_params.len() == 0 {\n        // If the function has no parameters, we set the args_len to 0.\n        quote { 0 }\n    } else {\n        // The following will give us <type_of_struct_member_1 as Serialize>::N + <type_of_struct_member_2 as Serialize>::N + ...\n        original_params\n            .map(|(_, param_type): (Quoted, Type)| {\n                quote {\n            <$param_type as $crate::protocol_types::traits::Serialize>::N\n        }\n            })\n            .join(quote {+})\n    };\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len_quote] = dep::aztec::context::public_context::calldata_copy(1, $args_len_quote);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // Inject the authwit check if the function is marked with #[authorize_once].\n    let authorize_once_check = if fn_has_authorize_once(f) {\n        create_authorize_once_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $authorize_once_check\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) {\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process or they may be used to sync private events from TypeScript\n    // (`sync_private_state` function gets invoked by PXE::getPrivateEvents function).\n    let message_discovery_call = create_message_discovery_call();\n\n    // A quote to be injected at the beginning of the function body.\n    let to_prepend = quote {\n        dep::aztec::oracle::version::assert_compatible_oracle_version();\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Injects an authwit verification check of the form:\n/// ```\n///   if (!from.eq(context.msg_sender())) {\n///         assert_current_call_valid_authwit::<N>(&mut context, from);\n///     } else {\n///         assert(authwit_nonce, \"Invalid authwit nonce. When 'from' and 'msg_sender' are the same, authwit_nonce must be zero\");\n///     }\n/// ```\n/// where `from` and `authwit_nonce` are the names of the parameters that are expected to be present in the function definition.\n/// This check is injected by the `#[authorize_once(\"from_arg_name\", \"nonce_arg_name\")]`, which allows the user to define\n/// which parameters to use.\npub(crate) comptime fn create_authorize_once_check(f: FunctionDefinition) -> Quoted {\n    let maybe_authorize_once_args = AUTHORIZE_ONCE_REGISTRY.get(f);\n    let authorize_once_args = if maybe_authorize_once_args.is_some() {\n        maybe_authorize_once_args.unwrap()\n    } else {\n        // We need to for authorize_once to have already executed so that we can retrieve its params - this depends on\n        // the order in which the attributes are applied.\n        panic(\n            f\"Functions marked with #[authorize_once] must have the #[private] or #[public] attribute placed last\",\n        )\n    };\n\n    let (from_arg_name, nonce_arg_name) = authorize_once_args;\n    let name: Quoted = f.name();\n\n    let from_arg_candidates =\n        f.parameters().filter(|(name, _)| name == f\"{from_arg_name}\".quoted_contents());\n    let (from_arg_name_quoted, from_arg_type) = if from_arg_candidates.len() == 1 {\n        from_arg_candidates[0]\n    } else {\n        panic(\n            f\"Function {name} does not have a {from_arg_name} parameter. Please specify which one to use in #[authorize_once(\\\"...\\\", \\\"authwit_nonce\\\")]\",\n        )\n    };\n    if from_arg_type\n        != quote { dep::protocol_types::address::aztec_address::AztecAddress }.as_type() {\n        panic(\n            f\"Argument {from_arg_name_quoted} in function {name} must be of type AztecAddress, but is of type {from_arg_type}\",\n        )\n    }\n\n    let nonce_arg_candidates =\n        f.parameters().filter(|(name, _)| name == f\"{nonce_arg_name}\".quoted_contents());\n    let (nonce_arg_name_quoted, nonce_arg_type) = if nonce_arg_candidates.len() == 1 {\n        nonce_arg_candidates[0]\n    } else {\n        panic(\n            f\"Function {name} does not have a {nonce_arg_name}. Please specify which one to use in #[authorize_once(\\\"from\\\", \\\"...\\\")]\",\n        )\n    };\n    if nonce_arg_type != quote { Field }.as_type() {\n        panic(\n            f\"Argument {nonce_arg_name_quoted} in function {name} must be of type Field, but is of type {nonce_arg_type}\",\n        );\n    }\n\n    let nonce_check_quote = f\"{nonce_arg_name_quoted} == 0\".quoted_contents();\n\n    let fn_call = if is_fn_private(f) {\n        // At this point, the original args of the fn have already been altered by the macro\n        // to include PrivateContextInputs, so we need to adjust the args_len accordingly.\n        let args_len = f.parameters().len() - 1;\n        quote { dep::aztec::authwit::auth::assert_current_call_valid_authwit::<$args_len> }\n    } else {\n        quote { dep::aztec::authwit::auth::assert_current_call_valid_authwit_public }\n    };\n    let invalid_nonce_message = f\"Invalid authwit nonce. When '{from_arg_name}' and 'msg_sender' are the same, '{nonce_arg_name}' must be zero\"\n        .as_ctstring()\n        .as_quoted_str();\n    quote {         \n        if (!$from_arg_name_quoted.eq(context.msg_sender())) {\n            $fn_call(&mut context, $from_arg_name_quoted);\n        } else {\n            assert($nonce_check_quote, $invalid_nonce_message);\n        }\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n"
    },
    "108": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/macros/notes.nr",
      "source": "use crate::note::note_getter_options::PropertySelector;\nuse std::{collections::bounded_vec::BoundedVec, meta::{ctstring::AsCtString, type_of}};\n\n/// Maximum number of note types within 1 contract.\ncomptime global MAX_NOTE_TYPES: u32 = 128;\n\n/// A BoundedVec containing all the note types within this contract.\npub comptime mut global NOTES: BoundedVec<Type, MAX_NOTE_TYPES> = BoundedVec::new();\n\ncomptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < MAX_NOTE_TYPES,\n        f\"A contract can contain at most {MAX_NOTE_TYPES} different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_type_impl(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n    let typ = s.as_type();\n    let note_type_name: str<_> = f\"{name}\".as_ctstring().as_quoted_str!();\n    let max_note_packed_len = crate::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN;\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                // This static assertion ensures the note's packed length doesn't exceed the maximum allowed size.\n                // While this check would ideally live in the Packable trait implementation, we place it here since\n                // this function is always generated by our macros and the Packable trait implementation is not.\n                // Note: We set the note type name and max packed length as local variables because injecting them\n                // directly into the error message doesn't work.\n                let note_type_name = $note_type_name;\n                let max_note_packed_len: u32 = $max_note_packed_len; // Casting to u32 to avoid the value to be printed in hex.\n                let note_packed_len = <$typ as Packable>::N;\n                std::static_assert(note_packed_len <= $max_note_packed_len, f\"{note_type_name} has a packed length of {note_packed_len} fields, which exceeds the maximum allowed length of {max_note_packed_len} fields\");\n\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::traits::Packable::pack(self).concat( [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::context::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _, _)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates the core note functionality for a struct:\n///\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - NoteHash trait implementation: Handles note hash and nullifier computation\n///\n/// # Requirements\n///\n/// The note struct must:\n/// - Have an `owner` field\n/// - Implement the `Packable` trait\n/// - Not exceed `MAX_NOTE_PACKED_LEN` when packed\n///\n/// # Registration\n///\n/// Registers the note in the global `NOTES` BoundedVec to enable note processing functionality.\n///\n/// # Generated Code\n///\n/// For detailed documentation on the generated implementations, see:\n/// - `generate_note_properties()`\n/// - `generate_note_type_impl()`\n/// - `generate_note_hash_trait_impl()`\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n    assert_has_packable(s);\n\n    // We register the note in the global `NOTES` BoundedVec because we need that information inside the #[aztec] macro\n    // to generate note processing functionality.\n    NOTES.push(s.as_type());\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_type_impl = generate_note_type_impl(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n\n    quote {\n        $note_properties\n        $note_type_impl\n        $note_hash_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n///\n/// # Requirements\n///\n/// The note struct must:\n/// - Implement the `Packable` trait\n/// - Not exceed `MAX_NOTE_PACKED_LEN` when packed\n///\n/// Unlike the `#[note]` macro, there is no requirement for an `owner` field.\n///\n/// # Registration\n///\n/// Registers the note in the global `NOTES` BoundedVec to enable note processing functionality.\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    assert_has_packable(s);\n\n    // We register the note in the global `NOTES` BoundedVec because we need that information inside the #[aztec] macro\n    // to generate note processing functionality.\n    NOTES.push(s.as_type());\n\n    let note_type_id = get_next_note_type_id();\n    let note_properties = generate_note_properties(s);\n    let note_type_impl = generate_note_type_impl(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_type_impl\n    }\n}\n\n/// Asserts that the given note implements the `Packable` trait.\n///\n/// We require that notes have the `Packable` trait implemented because it is used when emitting a note in a log or as\n/// an offchain message.\ncomptime fn assert_has_packable(note: TypeDefinition) {\n    let packable_constraint =\n        quote { crate::protocol_types::traits::Packable }.as_trait_constraint();\n    let note_name = note.name();\n\n    assert(\n        note.as_type().implements(packable_constraint),\n        f\"{note_name} does not implement Packable trait. Either implement it manually or place #[derive(Packable)] on the note struct before #[note] macro invocation.\",\n    );\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    let note_name = note.name();\n\n    assert(\n        has_owner,\n        f\"{note_name} does not have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n"
    },
    "109": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/macros/storage.nr",
      "source": "use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract.\n///\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\n///\n/// Only a single struct in the entire contract should have this macro (or `storage_no_init`) applied to it, and the\n/// struct has to be called 'Storage'.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    let struct_name = s.name();\n    if struct_name != quote { Storage } {\n        panic(\n            f\"The #[storage] macro can only be applied to a struct with name 'Storage', got '{struct_name}' instead.\",\n        )\n    }\n\n    assert(\n        !s.has_named_attribute(\"storage_no_init\"),\n        f\"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.\",\n    );\n\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ, _) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot });\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields = storage_layout_fields.push_back(\n            quote { pub $name: dep::aztec::state_vars::storage::Storable },\n        );\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::state_vars::storage::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n///\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\n///\n/// Only a single struct in the entire contract can have this macro (or storage_no_init) applied to it, and the struct\n/// has to be called 'Storage'.\npub comptime fn storage_no_init(s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n\n    // We do need to make sure that the type is called Storage, since we'll do `Storage::init` later on.\n\n    if s.name() != quote { Storage } {\n        let name = s.name();\n        panic(\n            f\"The #[storage_no_init] macro can only be applied to a struct with name 'Storage', got '{name}' instead.\",\n        )\n    }\n\n    assert(\n        !s.has_named_attribute(\"storage\"),\n        f\"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.\",\n    );\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(typ: Type, slot: Quoted) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    let constructor = if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot });\n\n        quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }\n    } else {\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        quote { $struct_name::new(context, $slot)}\n    };\n\n    (constructor, get_storage_size(typ))\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"
    },
    "111": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr",
      "source": "use protocol_types::{address::AztecAddress, debug_log::{debug_log, debug_log_format}};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod private_events;\npub mod private_notes;\npub mod process_message;\n\nuse crate::{\n    messages::{\n        discovery::{private_notes::MAX_NOTE_PACKED_LEN, process_message::do_process_message},\n        processing::{\n            get_private_logs, pending_tagged_log::PendingTaggedLog,\n            validate_enqueued_notes_and_events,\n        },\n    },\n    utils::array,\n};\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, note nonce, storage slot and note\n/// type ID and attempts to compute its note hash (not hashed by note nonce nor siloed by address) and inner nullifier\n/// (not siloed by address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, note_nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(note_nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* note nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    // First we process all private logs, which can contain different kinds of messages e.g. private notes, partial\n    // notes, private events, etc.\n    let mut logs = get_private_logs(contract_address);\n    logs.for_each(|i, pending_tagged_log: PendingTaggedLog| {\n        debug_log_format(\n            \"Processing log with tag {0}\",\n            [pending_tagged_log.log.get(0)],\n        );\n\n        // We remove the tag from the pending tagged log and process the message ciphertext contained in it.\n        let message_ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n        do_process_message(\n            contract_address,\n            compute_note_hash_and_nullifier,\n            message_ciphertext,\n            pending_tagged_log.context,\n        );\n        logs.remove(i);\n    });\n\n    // Then we process all pending partial notes, regardless of whether they were found in the current or previous\n    // executions.\n    partial_notes::fetch_and_process_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    // Finally we validate all notes and events that were found as part of the previous processes, resulting in them\n    // being added to PXE's database and retrievable via oracles (get_notes) and our TS API (PXE::getPrivateEvents).\n    validate_enqueued_notes_and_events(contract_address);\n}\n"
    },
    "112": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr",
      "source": "use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub note_nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given note nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    note_nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Found valid nonces for a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        note_nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(note_nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        note_nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let note_nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(note_nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash = compute_unique_note_hash(\n            note_nonce,\n            compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash),\n        );\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, note_nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.note_nonce, note_and_data.note_nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.note_nonce == first_note_and_data.note_nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.note_nonce == second_note_and_data.note_nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n"
    },
    "113": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr",
      "source": "use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n        processing::{\n            enqueue_note_for_validation, get_pending_partial_notes_completion_logs,\n            log_retrieval_response::LogRetrievalResponse,\n        },\n    },\n    utils::array,\n};\n\nuse protocol_types::{\n    address::AztecAddress,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for logs that would result in the completion of pending partial notes, ultimately resulting in the notes\n/// being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    // Each of the pending partial notes might get completed by a log containing its public values. For performance\n    // reasons, we fetch all of these logs concurrently and then process them one by one, minimizing the amount of time\n    // waiting for the node roundtrip.\n    let maybe_completion_logs =\n        get_pending_partial_notes_completion_logs(contract_address, pending_partial_notes);\n\n    // Each entry in the maybe completion logs array corresponds to the entry in the pending partial notes array at the\n    // same index. This means we can use the same index as we iterate through the responses to get both the partial note\n    // and the log that might complete it.\n    assert_eq(maybe_completion_logs.len(), pending_partial_notes.len());\n\n    maybe_completion_logs.for_each(|i, maybe_log: Option<LogRetrievalResponse>| {\n        // We clear the completion logs as we read them so that the array is empty by the time we next query it.\n        // TODO(#14943): use volatile arrays to avoid having to manually clear this.\n        maybe_completion_logs.remove(i);\n\n        let pending_partial_note = pending_partial_notes.get(i);\n\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log plaintext to get\n            // the complete packed content.\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                log.log_payload,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            // TODO(#11627): is there anything reasonable we can do if we get a log but it doesn't result in a note\n            // being found?\n            if discovered_notes.len() == 0 {\n                panic(\n                    f\"A partial note's completion log did not result in any notes being found - this should never happen\",\n                );\n            }\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                enqueue_note_for_validation(\n                    contract_address,\n                    pending_partial_note.storage_slot,\n                    discovered_note.note_nonce,\n                    complete_packed_note,\n                    discovered_note.note_hash,\n                    discovered_note.inner_nullifier,\n                    log.tx_hash,\n                    pending_partial_note.recipient,\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n"
    },
    "114": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/messages/discovery/private_events.nr",
      "source": "use crate::{\n    event::event_selector::EventSelector,\n    messages::{encoding::MAX_MESSAGE_CONTENT_LEN, processing::enqueue_event_for_validation},\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::GENERATOR_INDEX__EVENT_COMMITMENT,\n    hash::poseidon2_hash_with_separator_bounded_vec, traits::FromField,\n};\n\n/// The number of fields in a private event message content that are not the event's serialized representation\n/// (1 field for randomness).\nglobal PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of an event's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, randomness, etc.).\npub global MAX_EVENT_SERIALIZED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN;\n\npub unconstrained fn process_private_event_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n) {\n    // In the case of events, the msg metadata is the event selector.\n    let event_type_id = EventSelector::from_field(msg_metadata as Field);\n\n    assert(\n        msg_content.len() > PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN,\n        f\"Invalid private event message: all private event messages must have at least {PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private event message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN\",\n    );\n\n    let serialized_event_with_randomness = msg_content;\n\n    let event_commitment = poseidon2_hash_with_separator_bounded_vec(\n        serialized_event_with_randomness,\n        GENERATOR_INDEX__EVENT_COMMITMENT,\n    );\n\n    // Randomness was injected into the event payload in `emit_event_in_private` but we have already used it\n    // to compute the event commitment, so we can safely discard it now.\n    let serialized_event = array::subbvec(\n        serialized_event_with_randomness,\n        PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN,\n    );\n\n    enqueue_event_for_validation(\n        contract_address,\n        event_type_id,\n        serialized_event,\n        event_commitment,\n        tx_hash,\n        recipient,\n    );\n}\n"
    },
    "115": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr",
      "source": "use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n        processing::enqueue_note_for_validation,\n    },\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\n// See the call to `std::static_assert` below to see what's in these fields.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        enqueue_note_for_validation(\n            contract_address,\n            storage_slot,\n            discovered_note.note_nonce,\n            packed_note,\n            discovered_note.note_hash,\n            discovered_note.inner_nullifier,\n            tx_hash,\n            recipient,\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n"
    },
    "116": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/messages/discovery/process_message.nr",
      "source": "use crate::messages::{\n    discovery::{\n        ComputeNoteHashAndNullifier, partial_notes::process_partial_note_private_msg,\n        private_events::process_private_event_msg, private_notes::process_private_note_msg,\n    },\n    encoding::decode_message,\n    encryption::{aes128::AES128, log_encryption::LogEncryption},\n    msg_type::{\n        PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n    },\n    processing::message_context::MessageContext,\n};\n\nuse protocol_types::{\n    address::AztecAddress,\n    constants::PRIVATE_LOG_CIPHERTEXT_LEN,\n    debug_log::{debug_log, debug_log_format},\n};\n\n/// Processes a message that can contain notes, partial notes, or events.\n///\n/// Notes result in nonce discovery being performed prior to delivery, which requires knowledge of the transaction hash\n/// in which the notes would've been created (typically the same transaction in which the log was emitted), along with\n/// the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier` function. Once\n/// discovered, the notes are enqueued for validation.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\n///\n/// Events are processed by computing an event commitment from the serialized event data and its randomness field, then\n/// enqueueing the event data and commitment for validation.\npub unconstrained fn do_process_message<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    message_ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n    message_context: MessageContext,\n) {\n    let message = AES128::decrypt_log(message_ciphertext, message_context.recipient);\n\n    // The first thing to do after decrypting the message is to determine what type of message we're processing. We\n    // have 3 message types: private notes, partial notes and events.\n\n    // We decode the message to obtain the message type id, metadata and content.\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(message);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            message_context.tx_hash,\n            message_context.unique_note_hashes_in_tx,\n            message_context.first_nullifier_in_tx,\n            message_context.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            message_context.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        process_private_event_msg(\n            contract_address,\n            message_context.recipient,\n            msg_metadata,\n            msg_content,\n            message_context.tx_hash,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n"
    },
    "117": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/messages/encoding.nr",
      "source": "// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\npub global MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n"
    },
    "118": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress,\n    constants::{\n        GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2,\n        PRIVATE_LOG_CIPHERTEXT_LEN,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\n/**\n * Computes N close-to-uniformly-random 256 bits from a given ECDH shared_secret.\n *\n * NEVER re-use the same iv and sym_key.\n * DO NOT call this function more than once with the same shared_secret.\n *\n * This function is only known to be safe if shared_secret is computed by combining a \n * random ephemeral key with an address point. See big comment within the body of the function.\n * See big comment within the body of the function.\n */\nfn extract_many_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2_unsafe<let N: u32>(\n    shared_secret: Point,\n) -> [[u8; 32]; N] {\n    /*\n     * Unsafe because of https://eprint.iacr.org/2010/264.pdf Page 13, Lemma 2 (and the * two paragraphs below it).\n     *\n     * If you call this function, you need to be careful and aware of how the arg\n     * `shared_secret` has been derived.\n     *\n     * The paper says that the way you derive aes keys and IVs should be fine with poseidon2\n     * (modelled as a RO), as long as you _don't_ use Poseidon2 as a PRG to generate the * two exponents x & y which multiply to the shared secret S:\n     *\n     * S = [x*y]*G.\n     *\n     * (Otherwise, you would have to \"key\" poseidon2, i.e. generate a uniformly string K\n     * which can be public and compute Hash(x) as poseidon(K,x)).\n     * In that lemma, k would be 2*254=508, and m would be the number of points on the * grumpkin curve (which is close to r according to the Hasse bound).\n     *\n     * Our shared secret S is [esk * address_sk] * G, and the question is: * Can we compute hash(S) using poseidon2 instead of sha256?\n     *\n     * Well, esk is random and not generated with poseidon2, so that's good.\n     * What about address_sk?\n     * Well, address_sk = poseidon2(stuff) + ivsk, so there was some\n     * discussion about whether address_sk is independent of poseidon2.\n     * Given that ivsk is random and independent of poseidon2, the address_sk is also\n     * independent of poseidon2.\n     *\n     * Tl;dr: we believe it's safe to hash S = [esk * address_sk] * G using poseidon2,\n     * in order to derive a symmetric key.\n     *\n     * If you're calling this function for a differently-derived `shared_secret`, be\n     * careful.\n     *\n     */\n\n    /* The output of this function needs to be 32 random bytes.\n     * A single field won't give us 32 bytes of entropy.\n     * So we compute two \"random\" fields, by poseidon-hashing with two different\n     * generators.\n     * We then extract the last 16 (big endian) bytes of each \"random\" field.\n     * Note: we use to_be_bytes because it's slightly more efficient. But we have to\n     * be careful not to take bytes from the \"big end\", because the \"big\" byte is\n     * not uniformly random over the byte: it only has < 6 bits of randomness, because\n     * it's the big end of a 254-bit field element.\n     */\n\n    let mut all_bytes: [[u8; 32]; N] = std::mem::zeroed();\n    // We restrict N to be < 2^8, because of how we compute the domain separator\n    // from k below (where k <= N must be 8 bits). In practice, it's extremely\n    // unlikely that an app will want to compute >= 256 ciphertexts.\n    std::static_assert(N < 256, \"N too large\");\n    for k in 0..N {\n        // We augment the domain separator with the loop index, so that we can\n        // generate N lots of randomness.\n        let k_shift = (k as u16 << 8);\n        let separator_1 = k_shift + GENERATOR_INDEX__SYMMETRIC_KEY as u16;\n        let separator_2 = k_shift + GENERATOR_INDEX__SYMMETRIC_KEY_2 as u16;\n\n        let rand1: Field =\n            poseidon2_hash_with_separator([shared_secret.x, shared_secret.y], separator_1);\n        let rand2: Field =\n            poseidon2_hash_with_separator([shared_secret.x, shared_secret.y], separator_2);\n\n        let rand1_bytes: [u8; 32] = rand1.to_be_bytes();\n        let rand2_bytes: [u8; 32] = rand2.to_be_bytes();\n\n        let mut bytes: [u8; 32] = [0; 32];\n        for i in 0..16 {\n            // We take bytes from the \"little end\" of the be-bytes arrays:\n            let j = 32 - i - 1;\n            bytes[i] = rand1_bytes[j];\n            bytes[16 + i] = rand2_bytes[j];\n        }\n\n        all_bytes[k] = bytes;\n    }\n\n    all_bytes\n}\n\nfn derive_aes_symmetric_key_and_iv_from_uniformly_random_256_bits<let N: u32>(\n    many_random_256_bits: [[u8; 32]; N],\n) -> [([u8; 16], [u8; 16]); N] {\n    // Many (sym_key, iv) pairs:\n    let mut many_pairs: [([u8; 16], [u8; 16]); N] = std::mem::zeroed();\n    for k in 0..N {\n        let random_256_bits = many_random_256_bits[k];\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n        for i in 0..16 {\n            sym_key[i] = random_256_bits[i];\n            iv[i] = random_256_bits[i + 16];\n        }\n        many_pairs[k] = (sym_key, iv);\n    }\n\n    many_pairs\n}\n\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2_unsafe<let N: u32>(\n    shared_secret: Point,\n) -> [([u8; 16], [u8; 16]); N] {\n    let many_random_256_bits: [[u8; 32]; N] = extract_many_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2_unsafe(\n        shared_secret,\n    );\n\n    derive_aes_symmetric_key_and_iv_from_uniformly_random_256_bits(many_random_256_bits)\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PlaintextLen: u32>(\n        plaintext: [Field; PlaintextLen],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        // It is safe to call the `unsafe` function here, because we know the `shared_secret`\n        // was derived using an AztecAddress (the recipient). See the block comment\n        // at the start of this unsafe target function for more info.\n        let pairs = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2_unsafe::<2>(\n            ciphertext_shared_secret,\n        );\n        let (body_sym_key, body_iv) = pairs[0];\n        let (header_sym_key, header_iv) = pairs[1];\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, body_iv, body_sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PlaintextLen * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, header_iv, header_sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PlaintextLen * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PlaintextLen * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) != 0;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n\n        // Derive symmetric keys:\n        let pairs = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2_unsafe::<2>(\n            ciphertext_shared_secret,\n        );\n        let (body_sym_key, body_iv) = pairs[0];\n        let (header_sym_key, header_iv) = pairs[1];\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext =\n            aes128_decrypt_oracle(header_ciphertext_bvec, header_iv, header_sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, body_iv, body_sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let env = TestEnvironment::new();\n\n        // Log decryption requires oracles that are only available during private execution\n        env.private_context(|_| {\n            let plaintext = [1, 2, 3];\n\n            let recipient = AztecAddress::from_field(\n                0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n            );\n\n            // Mock random values for deterministic test\n            let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n            let _ = OracleMock::mock(\"utilityGetRandomField\").returns(eph_sk).times(1);\n\n            let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n            let _ = OracleMock::mock(\"utilityGetRandomField\").returns(randomness).times(1000000);\n\n            let _ = OracleMock::mock(\"utilityGetIndexedTaggingSecretAsSender\").returns(\n                IndexedTaggingSecret::deserialize([69420, 1337]),\n            );\n            let _ = OracleMock::mock(\"privateIncrementAppTaggingSecretIndexAsSender\").returns(());\n\n            // Encrypt the log\n            let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n            // Mock shared secret for deterministic test\n            let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n                EmbeddedCurveScalar::from_field(eph_sk),\n                recipient,\n            );\n            let _ = OracleMock::mock(\"utilityGetSharedSecret\").returns(shared_secret);\n\n            // Decrypt the log\n            let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n            // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n            // at compile time. For this reason we need to convert the original input to a BoundedVec.\n            let plaintext_bvec =\n                BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n            // Verify decryption matches original plaintext\n            assert_eq(\n                decrypted,\n                plaintext_bvec,\n                \"Decrypted bytes should match original plaintext\",\n            );\n\n            // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n            // static methods of the struct).\n            let _ = AES128 {};\n        });\n    }\n}\n"
    },
    "12": {
      "path": "std/convert.nr",
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u16 {\n    fn from(value: u8) -> u16 {\n        value as u16\n    }\n}\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u16> for u32 {\n    fn from(value: u16) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u16> for u64 {\n    fn from(value: u16) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u16> for u128 {\n    fn from(value: u16) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u16> for Field {\n    fn from(value: u16) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i16 {\n    fn from(value: i8) -> i16 {\n        value as i16\n    }\n}\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i16> for i32 {\n    fn from(value: i16) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\n\nimpl From<i16> for i64 {\n    fn from(value: i16) -> i64 {\n        value as i64\n    }\n}\n\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u16 {\n    fn from(value: bool) -> u16 {\n        value as u16\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for u128 {\n    fn from(value: bool) -> u128 {\n        value as u128\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i16 {\n    fn from(value: bool) -> i16 {\n        value as i16\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            let body = if type1 == type2 {\n                quote { self }\n            } else if type1 == quote { bool } {\n                quote { self != 0 }\n            } else {\n                quote { self as $type1 }\n            };\n\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        $body\n                    }\n                }\n            },\n            );\n        }\n    }\n\n    let u_types =\n        [quote { bool }, quote { u8 }, quote { u16 }, quote { u32 }, quote { u64 }, quote { u128 }];\n\n    for type2 in u_types {\n        let body = quote { self as Field };\n\n        impls = impls.push_back(\n            quote {\n                impl AsPrimitive<Field> for $type2 {\n                    fn as_(self) -> Field {\n                        $body\n                    }\n                }\n            },\n        );\n    }\n\n    for type1 in u_types {\n        let body = if type1 == quote { bool } {\n            quote { self != 0 }\n        } else {\n            quote { self as $type1 }\n        };\n\n        impls = impls.push_back(\n            quote {\n                impl AsPrimitive<$type1> for Field {\n                    fn as_(self) -> $type1 {\n                        $body\n                    }\n                }\n            },\n        );\n    }\n\n    impls.join(quote {})\n}\n"
    },
    "134": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/messages/processing/mod.nr",
      "source": "pub(crate) mod event_validation_request;\npub mod message_context;\npub(crate) mod note_validation_request;\npub(crate) mod log_retrieval_request;\npub(crate) mod log_retrieval_response;\npub(crate) mod pending_tagged_log;\n\nuse crate::{\n    capsules::CapsuleArray,\n    event::event_selector::EventSelector,\n    messages::{\n        discovery::{\n            partial_notes::DeliveredPendingPartialNote, private_events::MAX_EVENT_SERIALIZED_LEN,\n            private_notes::MAX_NOTE_PACKED_LEN,\n        },\n        processing::{\n            log_retrieval_request::LogRetrievalRequest,\n            log_retrieval_response::LogRetrievalResponse,\n            note_validation_request::NoteValidationRequest, pending_tagged_log::PendingTaggedLog,\n        },\n    },\n    oracle,\n};\nuse event_validation_request::EventValidationRequest;\nuse protocol_types::{address::AztecAddress, hash::sha256_to_field};\n\n// Base slot for the pending tagged log array to which the fetch_tagged_logs oracle inserts found private logs.\nglobal PENDING_TAGGED_LOG_ARRAY_BASE_SLOT: Field =\n    sha256_to_field(\"AZTEC_NR::PENDING_TAGGED_LOG_ARRAY_BASE_SLOT\".as_bytes());\n\nglobal NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\n/// Searches for private logs emitted by `contract_address` that might contain messages for one of the local accounts,\n/// and stores them in a `CapsuleArray` which is then returned.\npub(crate) unconstrained fn get_private_logs(\n    contract_address: AztecAddress,\n) -> CapsuleArray<PendingTaggedLog> {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `fetchTaggedLogs`\n    // oracle. This makes PXE synchronize tags, download logs and store the pending tagged logs in a capsule array.\n    oracle::message_processing::fetch_tagged_logs(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    CapsuleArray::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT)\n}\n\n/// Enqueues a note for validation by PXE, so that it becomes aware of a note's existence allowing for later retrieval\n/// via `get_notes` oracle. The note will be scoped to `contract_address`, meaning other contracts will not be able to\n/// access it unless authorized.\n///\n/// In order for the note validation and insertion to occur, `validate_enqueued_notes_and_events` must be later called.\n/// For optimal performance, accumulate as many note validation requests as possible and then validate them all at the\n/// end (which results in PXE minimizing the number of network round-trips).\n///\n/// The `packed_note` is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\npub(crate) unconstrained fn enqueue_note_for_validation(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) {\n    // We store requests in a `CapsuleArray`, which PXE will later read from and deserialize into its version of the\n    // Noir `NoteValidationRequest`\n    CapsuleArray::at(contract_address, NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT).push(\n        NoteValidationRequest {\n            contract_address,\n            storage_slot,\n            note_nonce,\n            packed_note,\n            note_hash,\n            nullifier,\n            tx_hash,\n            recipient,\n        },\n    )\n}\n\n/// Enqueues an event for validation by PXE, so that it can be efficiently validated and then inserted into the event\n/// store.\n///\n/// In order for the event validation and insertion to occur, `validate_enqueued_notes_and_events` must be later\n/// called. For optimal performance, accumulate as many event validation requests as possible and then validate them\n/// all at the end (which results in PXE minimizing the number of network round-trips).\npub(crate) unconstrained fn enqueue_event_for_validation(\n    contract_address: AztecAddress,\n    event_type_id: EventSelector,\n    serialized_event: BoundedVec<Field, MAX_EVENT_SERIALIZED_LEN>,\n    event_commitment: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) {\n    // We store requests in a `CapsuleArray`, which PXE will later read from and deserialize into its version of the\n    // Noir `EventValidationRequest`\n    CapsuleArray::at(contract_address, EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT).push(\n        EventValidationRequest {\n            contract_address,\n            event_type_id,\n            serialized_event,\n            event_commitment,\n            tx_hash,\n            recipient,\n        },\n    )\n}\n\n/// Validates all note and event validation requests enqueued via `enqueue_note_for_validation` and\n/// `enqueue_event_for_validation`, inserting them into the note database and event store respectively, making them\n/// queryable via `get_notes` oracle and our TS API (PXE::getPrivateEvents).\n///\n/// This automatically clears both validation request queues, so no further work needs to be done by the caller.\npub(crate) unconstrained fn validate_enqueued_notes_and_events(contract_address: AztecAddress) {\n    oracle::message_processing::validate_enqueued_notes_and_events(\n        contract_address,\n        NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT,\n        EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT,\n    );\n}\n\n/// Efficiently queries the node for logs that result in the completion of all `DeliveredPendingPartialNote`s stored in\n/// a `CapsuleArray` by performing all node communication concurrently. Returns a second `CapsuleArray` with Options for\n/// the responses that correspond to the pending partial notes at the same index.\n///\n/// For example, given an array with pending partial notes `[ p1, p2, p3 ]`, where `p1` and `p3` have corresponding\n/// completion logs but `p2` does not, the returned `CapsuleArray` will have contents\n/// `[some(p1_log), none(), some(p3_log)]`.\npub(crate) unconstrained fn get_pending_partial_notes_completion_logs(\n    contract_address: AztecAddress,\n    pending_partial_notes: CapsuleArray<DeliveredPendingPartialNote>,\n) -> CapsuleArray<Option<LogRetrievalResponse>> {\n    let log_retrieval_requests =\n        CapsuleArray::at(contract_address, LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT);\n\n    // We create a LogRetrievalRequest for each PendingPartialNote in the CapsuleArray. Because we need the indices in\n    // the request array to match the indices in the partial note array, we can't use CapsuleArray::for_each, as that\n    // function has arbitrary iteration order. Instead, we manually iterate the array from the beginning and push into\n    // the requests array, which we expect to be empty.\n    let mut i = 0;\n    let pending_partial_notes_count = pending_partial_notes.len();\n    while i < pending_partial_notes_count {\n        let pending_partial_note = pending_partial_notes.get(i);\n        log_retrieval_requests.push(\n            LogRetrievalRequest {\n                contract_address,\n                unsiloed_tag: pending_partial_note.note_completion_log_tag,\n            },\n        );\n        i += 1;\n    }\n\n    oracle::message_processing::bulk_retrieve_logs(\n        contract_address,\n        LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT,\n        LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT,\n    );\n\n    CapsuleArray::at(contract_address, LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT)\n}\n"
    },
    "14": {
      "path": "std/ecdsa_secp256k1.nr",
      "source": "// docs:start:ecdsa_secp256k1\n/// Verifies a ECDSA signature over the secp256k1 curve.\n/// - inputs:\n///     - x coordinate of public key as 32 bytes\n///     - y coordinate of public key as 32 bytes\n///     - the signature, as a 64 bytes array\n///       The signature internally will be represented as `(r, s)`,\n///       where `r` and `s` are fixed-sized big endian scalar values.\n///       As the `secp256k1` has a 256-bit modulus, we have a 64 byte signature\n///       while `r` and `s` will both be 32 bytes.\n///       We expect `s` to be normalized. This means given the curve's order,\n///       `s` should be less than or equal to `order / 2`.\n///       This is done to prevent malleability.\n///       For more context regarding malleability you can reference BIP 0062.\n///     - the hash of the message, as a vector of bytes\n/// - output: false for failure and true for success\npub fn verify_signature<let N: u32>(\n    public_key_x: [u8; 32],\n    public_key_y: [u8; 32],\n    signature: [u8; 64],\n    message_hash: [u8; N],\n) -> bool\n// docs:end:ecdsa_secp256k1\n{\n    _verify_signature(public_key_x, public_key_y, signature, message_hash, true)\n}\n\n#[foreign(ecdsa_secp256k1)]\npub fn _verify_signature<let N: u32>(\n    public_key_x: [u8; 32],\n    public_key_y: [u8; 32],\n    signature: [u8; 64],\n    message_hash: [u8; N],\n    predicate: bool,\n) -> bool {}\n"
    },
    "146": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr",
      "source": "use protocol_types::traits::{Packable, Serialize};\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, note_nonce: Field },\n//   Settled{ note_nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize, Packable)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_note_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_note_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_note_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_note_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_note_nonce }\n            }\n        } else if maybe_note_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_note_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_note_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_note_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.note_nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.note_nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    note_nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(note_nonce: Field) -> Self {\n        Self { note_nonce }\n    }\n\n    pub fn note_nonce(self) -> Field {\n        self.note_nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    note_nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(note_nonce: Field) -> Self {\n        Self { note_nonce }\n    }\n\n    pub fn note_nonce(self) -> Field {\n        self.note_nonce\n    }\n}\n"
    },
    "149": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().note_nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let note_nonce = retrieved_note.metadata.to_pending_previous_phase().note_nonce();\n\n        compute_unique_note_hash(note_nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n"
    },
    "153": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(privateCallPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"
    },
    "154": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr",
      "source": "use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize,\n{\n    let serialized_option = load_oracle(contract_address, slot, <T as Deserialize>::N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(utilityStoreCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(utilityLoadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(utilityDeleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(utilityCopyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let value = MockStruct::new(5, 6);\n            store(contract_address, SLOT, value);\n\n            assert_eq(load(contract_address, SLOT).unwrap(), value);\n        });\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let value = MockStruct::new(5, 6);\n            store(contract_address, SLOT, value);\n\n            let new_value = MockStruct::new(7, 8);\n            store(contract_address, SLOT, new_value);\n\n            assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n        });\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n            assert_eq(loaded_value, Option::none());\n        });\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let value = MockStruct::new(5, 6);\n            store(contract_address, SLOT, value);\n            delete(contract_address, SLOT);\n\n            let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n            assert_eq(loaded_value, Option::none());\n        });\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            delete(contract_address, SLOT);\n            let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n            assert_eq(loaded_value, Option::none());\n        });\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let src = 5;\n\n            let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n            store(contract_address, src, values[0]);\n            store(contract_address, src + 1, values[1]);\n            store(contract_address, src + 2, values[2]);\n\n            let dst = 10;\n            copy(contract_address, src, dst, 3);\n\n            assert_eq(load(contract_address, dst).unwrap(), values[0]);\n            assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n            assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n        });\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let src = 1;\n\n            let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n            store(contract_address, src, values[0]);\n            store(contract_address, src + 1, values[1]);\n            store(contract_address, src + 2, values[2]);\n\n            let dst = 2;\n            copy(contract_address, src, dst, 3);\n\n            assert_eq(load(contract_address, dst).unwrap(), values[0]);\n            assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n            assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n            // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n            assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n            assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n            assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n        });\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let src = 2;\n\n            let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n            store(contract_address, src, values[0]);\n            store(contract_address, src + 1, values[1]);\n            store(contract_address, src + 2, values[2]);\n\n            let dst = 1;\n            copy(contract_address, src, dst, 3);\n\n            assert_eq(load(contract_address, dst).unwrap(), values[0]);\n            assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n            assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n            // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n            assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n            assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n            assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n        });\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            copy(contract_address, SLOT, SLOT, 1);\n        });\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n            let value = MockStruct::new(5, 6);\n            store(other_contract_address, SLOT, value);\n        });\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n            let _: Option<MockStruct> = load(other_contract_address, SLOT);\n        });\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n            delete(other_contract_address, SLOT);\n        });\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n            copy(other_contract_address, SLOT, SLOT, 0);\n        });\n    }\n}\n"
    },
    "155": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(privateNotifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(privateNotifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(privateNotifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "156": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(utilityGetContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(utilityGetBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(utilityGetTimestamp)]\nunconstrained fn get_timestamp_oracle() -> u64 {}\n\n#[oracle(utilityGetChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(utilityGetVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_timestamp() -> u64 {\n    get_timestamp_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "157": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(privateStoreInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(privateLoadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "158": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(utilityGetContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\nstruct GetContractInstanceResult {\n    exists: bool,\n    member: Field,\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n\nunconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_deployer_oracle_avm(address)\n}\nunconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_class_id_oracle_avm(address)\n}\nunconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_deployer_internal_avm(address)[0] };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_class_id_internal_avm(address)[0] };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address)[0] };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "16": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars, true)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n    predicate: bool,\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: false,\n        };\n        let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2_1);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n    _predicate: bool,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    // Ensure is_infinite is comptime\n    let point1_1 = EmbeddedCurvePoint { x: point1.x, y: point1.y, is_infinite: false };\n    let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };\n    embedded_curve_add_unsafe(point1_1, point2_1)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2, true)[0]\n}\n"
    },
    "162": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr",
      "source": "use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(utilityGetPublicDataWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> PublicDataWitness {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    get_public_data_witness_oracle(block_number, public_data_tree_index)\n}\n"
    },
    "163": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(utilityGetKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n"
    },
    "164": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(utilityGetPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] != 0 } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] != 0 } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] != 0 } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] != 0 } },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "166": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/message_processing.nr",
      "source": "use protocol_types::address::AztecAddress;\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn fetch_tagged_logs(pending_tagged_log_array_base_slot: Field) {\n    fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(utilityFetchTaggedLogs)]\nunconstrained fn fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n// This must be a single oracle and not one for notes and one for events because the entire point is to validate\n// all notes and events in one go, minimizing node round-trips.\npub(crate) unconstrained fn validate_enqueued_notes_and_events(\n    contract_address: AztecAddress,\n    note_validation_requests_array_base_slot: Field,\n    event_validation_requests_array_base_slot: Field,\n) {\n    validate_enqueued_notes_and_events_oracle(\n        contract_address,\n        note_validation_requests_array_base_slot,\n        event_validation_requests_array_base_slot,\n    );\n}\n\n#[oracle(utilityValidateEnqueuedNotesAndEvents)]\nunconstrained fn validate_enqueued_notes_and_events_oracle(\n    contract_address: AztecAddress,\n    note_validation_requests_array_base_slot: Field,\n    event_validation_requests_array_base_slot: Field,\n) {}\n\npub(crate) unconstrained fn bulk_retrieve_logs(\n    contract_address: AztecAddress,\n    log_retrieval_requests_array_base_slot: Field,\n    log_retrieval_responses_array_base_slot: Field,\n) {\n    bulk_retrieve_logs_oracle(\n        contract_address,\n        log_retrieval_requests_array_base_slot,\n        log_retrieval_responses_array_base_slot,\n    );\n}\n\n#[oracle(utilityBulkRetrieveLogs)]\nunconstrained fn bulk_retrieve_logs_oracle(\n    contract_address: AztecAddress,\n    log_retrieval_requests_array_base_slot: Field,\n    log_retrieval_responses_array_base_slot: Field,\n) {}\n"
    },
    "17": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "171": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr",
      "source": "use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(utilityGetSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n"
    },
    "173": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/storage.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(utilityStorageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: u32,\n    length: u32,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(address.to_field(), storage_slot, block_number, N)\n}\n\npub unconstrained fn storage_read<T>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"utilityStorageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"utilityStorageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"
    },
    "174": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/oracle/version.nr",
      "source": "/// The ORACLE_VERSION constant is used to check that the oracle interface is in sync between PXE and Aztec.nr. We need\n/// to version the oracle interface to ensure that developers get a reasonable error message if they use incompatible\n/// versions of Aztec.nr and PXE. The TypeScript counterpart is in `oracle_version.ts`.\n///\n/// @dev Whenever a contract function or Noir test is run, the `utilityAssertCompatibleOracleVersion` oracle is called and\n/// if the oracle version is incompatible an error is thrown.\npub global ORACLE_VERSION: Field = 1;\n\n/// Asserts that the version of the oracle is compatible with the version expected by the contract.\npub fn assert_compatible_oracle_version() {\n    // Safety: This oracle call returns nothing: we only call it to check Aztec.nr and Oracle interface versions are\n    // compatible. It is therefore always safe to call.\n    unsafe {\n        assert_compatible_oracle_version_wrapper();\n    }\n}\n\nunconstrained fn assert_compatible_oracle_version_wrapper() {\n    assert_compatible_oracle_version_oracle(ORACLE_VERSION);\n}\n\n#[oracle(utilityAssertCompatibleOracleVersion)]\nunconstrained fn assert_compatible_oracle_version_oracle(version: Field) {}\n\nmod test {\n    use super::{assert_compatible_oracle_version_oracle, ORACLE_VERSION};\n\n    #[test]\n    unconstrained fn compatible_oracle_version() {\n        assert_compatible_oracle_version_oracle(ORACLE_VERSION);\n    }\n\n    #[test(should_fail_with = \"Incompatible oracle version. PXE is using version '1', but got a request for '318183437'.\")]\n    unconstrained fn incompatible_oracle_version() {\n        let arbitrary_incorrect_version = 318183437;\n        assert_compatible_oracle_version_oracle(arbitrary_incorrect_version);\n    }\n}\n"
    },
    "177": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/state_vars/delayed_public_mutable.nr",
      "source": "use dep::protocol_types::{\n    delayed_public_mutable::{\n        delayed_public_mutable_values::{unpack_delay_change, unpack_value_change},\n        DelayedPublicMutableValues,\n        ScheduledDelayChange,\n        ScheduledValueChange,\n    },\n    traits::Packable,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext, UtilityContext},\n    state_vars::storage::HasStorageSlot,\n    utils::with_hash::WithHash,\n};\n\nmod test;\n\npub struct DelayedPublicMutable<T, let InitialDelay: u64, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n\n// This will make the Aztec macros require that T implements the Packable and Eq traits, and allocate `M` storage\n// slots to this state variable.\nimpl<T, let InitialDelay: u64, Context, let M: u32> HasStorageSlot<M> for DelayedPublicMutable<T, InitialDelay, Context>\nwhere\n    WithHash<DelayedPublicMutableValues<T, InitialDelay>, _>: Packable<N = M>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\n// DelayedPublicMutable<T> stores a value of type T that is:\n//  - publicly known (i.e. unencrypted)\n//  - mutable in public\n//  - readable in private with no contention (i.e. multiple parties can all read the same value without blocking one\n//    another nor needing to coordinate)\n// This is famously a hard problem to solve. DelayedPublicMutable makes it work by introducing a delay to public mutation:\n// the value is not changed immediately but rather a value change is scheduled to happen in the future after some delay\n// measured in seconds. Reads in private are only valid as long as they are included in a block with a timestamp not\n// too far into the future, so that they can guarantee the value will not have possibly changed by then (because of the\n// delay). The delay for changing a value is initially equal to InitialDelay, but can be changed by calling\n// `schedule_delay_change`.\nimpl<T, let InitialDelay: u64, Context> DelayedPublicMutable<T, InitialDelay, Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let InitialDelay: u64> DelayedPublicMutable<T, InitialDelay, &mut PublicContext>\nwhere\n    T: Eq,\n{\n\n    pub fn schedule_value_change(self, new_value: T)\n    where\n        T: Packable,\n    {\n        let _value_change = self.schedule_and_return_value_change(new_value);\n    }\n\n    pub fn schedule_and_return_value_change(self, new_value: T) -> ScheduledValueChange<T>\n    where\n        T: Packable,\n    {\n        let mut value_change = self.read_value_change();\n        let delay_change = self.read_delay_change();\n\n        let current_timestamp = self.context.timestamp();\n        let current_delay = delay_change.get_current(current_timestamp);\n\n        // TODO: make this configurable\n        // https://github.com/AztecProtocol/aztec-packages/issues/5501\n        let timestamp_of_change = current_timestamp + current_delay;\n        value_change.schedule_change(\n            new_value,\n            current_timestamp,\n            current_delay,\n            timestamp_of_change,\n        );\n\n        self.write(value_change, delay_change);\n\n        value_change\n    }\n\n    pub fn schedule_delay_change(self, new_delay: u64)\n    where\n        T: Packable,\n    {\n        let mut delay_change = self.read_delay_change();\n\n        let current_timestamp = self.context.timestamp();\n\n        delay_change.schedule_change(new_delay, current_timestamp);\n\n        self.write(self.read_value_change(), delay_change);\n    }\n\n    pub fn get_current_value(self) -> T\n    where\n        T: Packable,\n    {\n        let current_timestamp = self.context.timestamp();\n        let value_change = self.read_value_change();\n\n        value_change.get_current_at(current_timestamp)\n    }\n\n    pub fn get_current_delay(self) -> u64\n    where\n        T: Packable,\n    {\n        let current_timestamp = self.context.timestamp();\n        self.read_delay_change().get_current(current_timestamp)\n    }\n\n    pub fn get_scheduled_value(self) -> (T, u64)\n    where\n        T: Packable,\n    {\n        self.read_value_change().get_scheduled()\n    }\n\n    pub fn get_scheduled_delay(self) -> (u64, u64)\n    where\n        T: Packable,\n    {\n        self.read_delay_change().get_scheduled()\n    }\n\n    fn read_value_change(self) -> ScheduledValueChange<T>\n    where\n        T: Packable,\n    {\n        // We don't read ScheduledValueChange directly by having it implement Packable because ScheduledValueChange\n        // and ScheduledDelayChange are packed together (sdc and svc.timestamp_of_change are stored in the same slot).\n        let packed = self.context.storage_read(self.storage_slot);\n        unpack_value_change::<T, <T as Packable>::N>(packed)\n    }\n\n    fn read_delay_change(self) -> ScheduledDelayChange<InitialDelay>\n    where\n        T: Packable,\n    {\n        // Since all ScheduledDelayChange member are packed into a single field, we can read a single storage slot\n        // here and skip the ones that correspond to ScheduledValueChange members. We are abusing the fact that\n        // the field containing the ScheduledDelayChange data is the first one in the storage layout - otherwise we'd\n        // need to offset the storage slot to get the position where it'd land.\n        // We don't read ScheduledDelayChange directly by having it implement Packable because ScheduledValueChange\n        // and ScheduledDelayChange are packed together (sdc and svc.timestamp_of_change are stored in the same slot).\n        let packed = self.context.storage_read(self.storage_slot);\n        unpack_delay_change::<InitialDelay>(packed)\n    }\n\n    fn write(\n        self,\n        value_change: ScheduledValueChange<T>,\n        delay_change: ScheduledDelayChange<InitialDelay>,\n    )\n    where\n        T: Packable,\n    {\n        // Whenever we write to public storage, we write both the value change and delay change to storage at once.\n        // We do so by wrapping them in a single struct (`DelayedPublicMutableValues`). Then we wrap the resulting struct in\n        // `WithHash`.\n        // Wrapping in `WithHash` makes for more costly writes but it also makes private proofs much simpler because\n        // they only need to produce a historical proof for the hash, which results in a single inclusion proof (as\n        // opposed to 4 in the best case scenario in which T is a single field). Private delayed public mutable reads are\n        // assumed to be much more frequent than public writes, so this tradeoff makes sense.\n        let values = WithHash::new(DelayedPublicMutableValues::new(value_change, delay_change));\n\n        self.context.storage_write(self.storage_slot, values);\n    }\n}\n\nimpl<T, let InitialDelay: u64> DelayedPublicMutable<T, InitialDelay, &mut PrivateContext>\nwhere\n    T: Eq,\n{\n    pub fn get_current_value(self) -> T\n    where\n        T: Packable,\n    {\n        // When reading the current value in private we construct a historical state proof for the public value.\n        // However, since this value might change, we must constrain the maximum transaction timestamp as this proof\n        // will only be valid for the time we can ensure the value will not change, which will depend on the\n        // current delay and any scheduled delay changes.\n        let (value_change, delay_change, historical_timestamp) =\n            self.historical_read_from_public_storage();\n\n        // We use the effective minimum delay as opposed to the current delay at the historical timestamp (timestamp of\n        // the historical block against which we are executing the private part of the tx) as this one also takes into\n        // consideration any scheduled delay changes.\n        // For example, consider a scenario in which at timestamp `x` the current delay was 86400 seconds (1 day). We\n        // may naively think that the earliest we could change the value would be at timestamp `x + 86400` by scheduling\n        // immediately after the historical timestamp, i.e. at timestamp `x + 1`. But if there was a delay change scheduled\n        // for timestamp `y` to reduce the delay to 43200 seconds (12 hours), then if a value change was scheduled at\n        // timestamp `y` it would go into effect at timestamp `y + 43200`, which is earlier than what we'd expect if we\n        // only considered the current delay.\n        let effective_minimum_delay =\n            delay_change.get_effective_minimum_delay_at(historical_timestamp);\n        let time_horizon =\n            value_change.get_time_horizon(historical_timestamp, effective_minimum_delay);\n\n        // We prevent this transaction from being included in any timestamp after the time horizon, ensuring that the\n        // historical public value matches the current one, since it can only change after the horizon.\n        self.context.set_include_by_timestamp(time_horizon);\n\n        value_change.get_current_at(historical_timestamp)\n    }\n\n    fn historical_read_from_public_storage(\n        self,\n    ) -> (ScheduledValueChange<T>, ScheduledDelayChange<InitialDelay>, u64)\n    where\n        T: Packable,\n    {\n        let header = self.context.get_block_header();\n        let address = self.context.this_address();\n\n        let historical_timestamp = header.global_variables.timestamp;\n\n        let values: DelayedPublicMutableValues<T, InitialDelay> =\n            WithHash::historical_public_storage_read(header, address, self.storage_slot);\n\n        (values.svc, values.sdc, historical_timestamp)\n    }\n}\n\nimpl<T, let InitialDelay: u64> DelayedPublicMutable<T, InitialDelay, UtilityContext>\nwhere\n    T: Eq,\n{\n    pub unconstrained fn get_current_value(self) -> T\n    where\n        T: Packable,\n    {\n        let dpmv: DelayedPublicMutableValues<T, InitialDelay> =\n            WithHash::utility_public_storage_read(self.context, self.storage_slot);\n\n        let current_timestamp = self.context.timestamp();\n        dpmv.svc.get_current_at(current_timestamp)\n    }\n}\n"
    },
    "178": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::HasStorageSlot;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\n\n/// Map\n///\n/// A key-value storage container that maps keys to state variables, similar\n/// to Solidity mappings.\n///\n/// `Map` enables you to associate keys (like addresses or other identifiers)\n/// with state variables in your Aztec smart contract. This is conceptually\n/// similar to Solidity's `mapping(K => V)` syntax, where you can store and\n/// retrieve values by their associated keys.\n///\n/// You can declare a state variable contained within a Map in your contract's\n/// #[storage] struct.\n///\n/// For example, you might use\n/// `Map<AztecAddress, PrivateMutable<ValueNote, Context>, Context>` to track\n/// token balances for different users, similar to how you'd use\n/// `mapping(address => uint256)` in Solidity.\n///\n/// > Aside: the verbose `Context` in the declaration is a consequence of\n/// > leveraging Noir's regular syntax for generics to ensure that certain\n/// > state variable methods can only be called in some contexts (private,\n/// > public, utility).\n///\n/// The methods of Map are:\n/// - `at` (access state variable for a given key)\n/// (see the method's own doc comments for more info).\n///\n/// ## Generic Parameters\n/// - `K`: The key type (must implement `ToField` trait for hashing)\n/// - `V`: The value type:\n///   - any Aztec state variable:\n///     - `PublicMutable`\n///     - `PublicImmutable`\n///     - `PrivateMutable`\n///     - `PrivateImmutable`\n///     - `PrivateSet`\n///     - `DelayedPublicMutable`\n///     - `Map`\n/// - `Context`: The execution context (handles private/public function\n///   contexts)\n///\n/// ## Usage\n/// Maps are typically declared in your contract's #[storage] struct and\n/// accessed\n/// using the `at(key)` method to get the state variable for a specific key.\n/// The resulting state variable can then be read from or written to using its\n/// own methods.\n///\n/// ## Advanced\n/// Internally, `Map` uses a single base storage slot to represent the\n/// mapping\n/// itself, similar to Solidity's approach. Individual key-value pairs are\n/// stored at derived storage slots computed by hashing the base storage\n/// slot\n/// with the key using Poseidon2. This ensures:\n/// - No storage slot collisions between different keys\n/// - Uniform distribution of storage slots across the storage space\n/// - Compatibility with Aztec's storage tree structure\n/// - Gas-efficient storage access patterns similar to Solidity mappings\n///\n/// The storage slot derivation uses `derive_storage_slot_in_map(base_slot,\n/// key)` which computes `poseidon2_hash([base_slot, key.to_field()])`,\n/// ensuring cryptographically secure slot separation.\n///\n/// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\n// Map reserves a single storage slot regardless of what it stores because\n// nothing is stored at said slot: it is only used to derive the storage slots\n// of nested state variables, which is expected to never result in collisions\n// or slots being close to one another due to these being hashes. This mirrors\n// the strategy adopted by Solidity mappings.\nimpl<K, T, Context> HasStorageSlot<1> for Map<K, T, Context> {\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    /// Initializes a new Map state variable.\n    ///\n    /// This function is usually automatically called within the #[storage]\n    /// macro.\n    /// You typically don't need to call this directly when writing smart contracts.\n    ///\n    /// # Arguments\n    ///\n    /// * `context` - One of `PrivateContext`/`PublicContext`/`UtilityContext`.\n    ///               The Context determines which methods of this struct will\n    ///               be made available to the calling smart contract function.\n    /// * `storage_slot` - A unique identifier for this Map within the contract.\n    ///                    Usually, the #[storage] macro will determine an\n    ///                    appropriate storage_slot automatically. A smart\n    ///                    contract dev shouldn't have to worry about this, as\n    ///                    it's managed behind the scenes.\n    /// * `state_var_constructor` - A function that creates the value type (V)\n    ///                             given a context and storage slot. This is\n    ///                             typically the constructor of the state\n    ///                             variable type being stored in the Map.\n    ///\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    /// Returns the state variable associated with the given key.\n    ///\n    /// This is equivalent to accessing `mapping[key]` in Solidity. It returns\n    /// the state variable instance for the specified key, which can then be\n    /// used to read or write the value at that key.\n    ///\n    /// Unlike Solidity mappings which return the value directly, this returns\n    /// the state variable wrapper (like PrivateMutable, PublicMutable, etc.)\n    /// that you then call methods on to interact with the actual value.\n    ///\n    /// # Arguments\n    ///\n    /// * `key` - The key to look up in the map. Must implement the ToField\n    ///           trait (which most basic Noir & Aztec types do).\n    ///\n    /// # Returns\n    ///\n    /// * `V` - The state variable instance for this key. You can then call\n    ///         methods like `.read()`, `.write()`, `.get_note()`, etc. on this\n    ///         depending on the specific state variable type.\n    ///\n    /// # Example\n    ///\n    /// ```noir\n    /// // Get a user's balance (assuming PrivateMutable<ValueNote>)\n    /// let user_balance = storage.balances.at(user_address);\n    /// let current_note = user_balance.get_note();\n    ///\n    /// // Update the balance\n    /// user_balance.replace(new_note);\n    /// ```\n    ///\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "18": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    unconstrained fn not_enough_limbs_brillig() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    fn not_enough_limbs() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "188": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr",
      "source": "use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::HasStorageSlot;\nuse dep::protocol_types::traits::Packable;\n\n/// # PublicMutable\n///\n/// PublicMutable is a public state variable type for values that can be read\n/// and written within #[public] functions of your smart contract.\n///\n/// You can declare a state variable of type PublicMutable within your contract's\n/// #[storage] struct:\n///\n/// E.g.:\n/// `your_variable: PublicMutable<T, Context>`\n/// or:\n/// `your_mapping: Map<Field, PublicMutable<T, Context>>`\n///\n/// The methods of PublicMutable are:\n/// - `read`\n/// - `write`\n/// (see the methods' own doc comments for more info).\n///\n/// ## Example.\n///\n/// A voting contract's proposal count can be represented as a PublicMutable<u64>.\n/// The count can be read by anyone to see how many proposals exist, and incremented\n/// when new proposals are submitted.\n///\n/// # Generic Parameters:\n///\n/// * `T` - The type of value stored (must implement Packable).\n/// * `Context` - The execution context (PublicContext or UtilityContext).\n///\n/// # Advanced\n///\n/// Unlike private state variables which use notes, PublicMutable stores values\n/// directly in Aztec's public data tree. This enables direct read and write\n/// access to the current state during public function execution.\n///\n/// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let M: u32> HasStorageSlot<M> for PublicMutable<T, Context>\nwhere\n    T: Packable<N = M>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    /// Initializes a new PublicMutable state variable.\n    ///\n    /// This function is usually automatically called within the #[storage] macro.\n    /// You typically don't need to call this directly when writing smart contracts.\n    ///\n    /// # Arguments\n    ///\n    /// * `context` - One of `PublicContext`/`UtilityContext`. The Context determines\n    ///               which methods of this struct will be made available to the calling\n    ///               smart contract function.\n    /// * `storage_slot` - A unique identifier for this state variable within the\n    ///                    contract. Usually, the #[storage] macro will determine an\n    ///                    appropriate storage_slot automatically. A smart contract\n    ///                    dev shouldn't have to worry about this, as it's managed\n    ///                    behind the scenes.\n    ///\n    /// docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    /// Reads the current value stored in this PublicMutable state variable.\n    ///\n    /// # Returns\n    ///\n    /// * `T` - The current value stored in this PublicMutable.\n    ///\n    /// docs:start:public_mutable_struct_read\n    pub fn read(self) -> T\n    where\n        T: Packable,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    /// Writes a new value to this PublicMutable state variable.\n    ///\n    /// # Arguments\n    ///\n    /// * `value` - The new value to store in this PublicMutable.\n    ///\n    /// # Advanced\n    ///\n    /// This function updates the value stored in Aztec's public data tree.\n    /// The new value becomes immediately available to subsequent reads within\n    /// the same transaction.\n    ///\n    /// docs:start:public_mutable_struct_write\n    pub fn write(self, value: T)\n    where\n        T: Packable,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    /// Reads the current value stored in this PublicMutable state variable.\n    ///\n    /// Notice that this function is executable only within a UtilityContext, which\n    /// is an unconstrained environment on the user's local device.\n    ///\n    /// # Returns\n    ///\n    /// * `T` - The current value stored in this PublicMutable.\n    ///\n    pub unconstrained fn read(self) -> T\n    where\n        T: Packable,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"
    },
    "19": {
      "path": "std/hash/mod.nr",
      "source": "// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{\n    if crate::runtime::is_unconstrained() {\n        // Temporary measure while Barretenberg is main proving system.\n        // Please open an issue if you're working on another proving system and running into problems due to this.\n        crate::static_assert(\n            N <= 1024,\n            \"Barretenberg cannot prove blake3 hashes with inputs larger than 1024 bytes\",\n        );\n    }\n    __blake3(input)\n}\n\n#[foreign(blake3)]\nfn __blake3<let N: u32>(input: [u8; N]) -> [u8; 32] {}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars, true)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn poseidon2_permutation<let N: u32>(input: [Field; N], state_len: u32) -> [Field; N] {\n    assert_eq(input.len(), state_len);\n    poseidon2_permutation_internal(input)\n}\n\n#[foreign(poseidon2_permutation)]\nfn poseidon2_permutation_internal<let N: u32>(input: [Field; N]) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::hash::Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: $crate::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher {\n    type H: Hasher;\n\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    type H = H;\n\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u8 as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u16 as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u32 as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u64 as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n"
    },
    "204": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/utils/array/append.nr",
      "source": "/// Appends the elements of the second `BoundedVec` to the end of the first one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let ALen: u32, let BLen: u32, let DstLen: u32>(\n    a: BoundedVec<T, ALen>,\n    b: BoundedVec<T, BLen>,\n) -> BoundedVec<T, DstLen> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n"
    },
    "207": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DstLen` elements from a source array, starting at `offset`. `DstLen` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SrcLen: u32, let DstLen: u32>(src: [T; SrcLen], offset: u32) -> [T; DstLen] {\n    assert(offset + DstLen <= SrcLen, \"DstLen too large for offset\");\n\n    let mut dst: [T; DstLen] = std::mem::zeroed();\n    for i in 0..DstLen {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DstLen to be 0, so we always get back an empty array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DstLen too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "208": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DstMaxLen` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DstLen` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DstLen` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SrcMaxLen: u32, let DstMaxLen: u32>(\n    bvec: BoundedVec<T, SrcMaxLen>,\n    offset: u32,\n) -> BoundedVec<T, DstMaxLen> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DstLen too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DstLen too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "210": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr",
      "source": "use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n"
    },
    "211": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr",
      "source": "// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n"
    },
    "213": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/utils/field.nr",
      "source": "use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n"
    },
    "215": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n"
    },
    "220": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr",
      "source": "use crate::{\n    context::{PublicContext, UtilityContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    abis::block_header::BlockHeader, address::AztecAddress, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `M` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `M`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let M: u32> {\n    value: T,\n    packed: [Field; M],\n    hash: Field,\n}\n\nimpl<T, let M: u32> WithHash<T, M>\nwhere\n    T: Packable<N = M> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn utility_public_storage_read(\n        context: UtilityContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + M as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\n// Note: I don't derive Packable on `WithHash` because `derive_serialize` function does not support setting \"N = M\"\n// as I do here 3 lines below. This could be worked around by placing the \"where\" clause directly on the `WithHash`\n// struct, but Jake mentioned that the syntax is not expected to be supported at least until Noir 1.0.\n// Relevant discussion on Slack:\n// https://aztecprotocol.slack.com/archives/C04QF64EDNV/p1752593876160699?thread_ts=1752589887.955379&cid=C04QF64EDNV\nimpl<T, let M: u32> Packable for WithHash<T, M>\nwhere\n    T: Packable<N = M>,\n{\n    let N: u32 = M + 1;\n\n    fn pack(self) -> [Field; Self::N] {\n        let mut result: [Field; Self::N] = std::mem::zeroed();\n        for i in 0..M {\n            result[i] = self.packed[i];\n        }\n        result[M] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; Self::N]) -> Self {\n        let mut value_packed = [0; M];\n        for i in 0..M {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[M];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::test::OracleMock;\n\n    global STORAGE_SLOT: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let env = TestEnvironment::new();\n\n        env.private_context(|context| {\n            let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n                context.historical_header,\n                context.this_address(),\n                STORAGE_SLOT,\n            );\n\n            assert_eq(result, std::mem::zeroed());\n        });\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        env.public_context(|context| { context.storage_write(STORAGE_SLOT, value_with_hash); });\n\n        env.private_context(|context| {\n            let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n                context.historical_header,\n                context.this_address(),\n                STORAGE_SLOT,\n            );\n            assert_eq(result, value);\n        });\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn bad_hint_uninitialized_value() {\n        let env = TestEnvironment::new();\n\n        env.private_context(|context| {\n            let block_header = context.historical_header;\n            let address = context.this_address();\n\n            // Mock the oracle to return a non-zero hint/packed value\n            let value_packed = MockStruct { a: 1, b: 1 }.pack();\n            let _ = OracleMock::mock(\"utilityStorageRead\")\n                .with_params((\n                    address.to_field(), STORAGE_SLOT, block_header.global_variables.block_number,\n                    value_packed.len(),\n                ))\n                .returns(value_packed)\n                .times(1);\n\n            // This should fail because the hint value is non-zero and the hash is zero (default value of storage)\n            let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n                block_header,\n                address,\n                STORAGE_SLOT,\n            );\n        });\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn bad_hint_initialized_value() {\n        let env = TestEnvironment::new();\n\n        env.public_context(|context| {\n            // Write the value and hash separately so that the hash is wrong\n            let value = MockStruct { a: 5, b: 3 };\n            context.storage_write(STORAGE_SLOT, value);\n\n            let incorrect_hash = 13;\n            let hash_storage_slot = STORAGE_SLOT + (value.pack().len() as Field);\n            context.storage_write(hash_storage_slot, [incorrect_hash]);\n        });\n\n        env.private_context(|context| {\n            let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n                context.historical_header,\n                context.this_address(),\n                STORAGE_SLOT,\n            );\n        });\n    }\n}\n"
    },
    "227": {
      "path": "/Users/ngjupeng/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr",
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "246": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\nuse std::meta::derive;\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct FunctionSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    pub inner: u32,\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "25": {
      "path": "std/meta/expr.nr",
      "source": "//! Contains methods on the built-in `Expr` type for quoted, syntactically valid expressions.\n\nuse crate::meta::op::BinaryOp;\nuse crate::meta::op::UnaryOp;\nuse crate::option::Option;\n\nimpl Expr {\n    /// If this expression is an array literal `[elem1, ..., elemN]`, this returns a slice of each element in the array.\n    #[builtin(expr_as_array)]\n    // docs:start:as_array\n    pub comptime fn as_array(self) -> Option<[Expr]> {}\n    // docs:end:as_array\n\n    /// If this expression is an assert, this returns the assert expression and the optional message.\n    #[builtin(expr_as_assert)]\n    // docs:start:as_assert\n    pub comptime fn as_assert(self) -> Option<(Expr, Option<Expr>)> {}\n    // docs:end:as_assert\n\n    /// If this expression is an assert_eq, this returns the left-hand-side and right-hand-side\n    /// expressions, together with the optional message.\n    #[builtin(expr_as_assert_eq)]\n    // docs:start:as_assert_eq\n    pub comptime fn as_assert_eq(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_assert_eq\n\n    /// If this expression is an assignment, this returns a tuple with the left hand side\n    /// and right hand side in order.\n    #[builtin(expr_as_assign)]\n    // docs:start:as_assign\n    pub comptime fn as_assign(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_assign\n\n    /// If this expression is a binary operator operation `<lhs> <op> <rhs>`,\n    /// return the left-hand side, operator, and the right-hand side of the operation.\n    #[builtin(expr_as_binary_op)]\n    // docs:start:as_binary_op\n    pub comptime fn as_binary_op(self) -> Option<(Expr, BinaryOp, Expr)> {}\n    // docs:end:as_binary_op\n\n    /// If this expression is a block `{ stmt1; stmt2; ...; stmtN }`, return\n    /// a slice containing each statement.\n    #[builtin(expr_as_block)]\n    // docs:start:as_block\n    pub comptime fn as_block(self) -> Option<[Expr]> {}\n    // docs:end:as_block\n\n    /// If this expression is a boolean literal, return that literal.\n    #[builtin(expr_as_bool)]\n    // docs:start:as_bool\n    pub comptime fn as_bool(self) -> Option<bool> {}\n    // docs:end:as_bool\n\n    /// If this expression is a cast expression `expr as type`, returns the casted\n    /// expression and the type to cast to.\n    // docs:start:as_cast\n    #[builtin(expr_as_cast)]\n    pub comptime fn as_cast(self) -> Option<(Expr, UnresolvedType)> {}\n    // docs:end:as_cast\n\n    /// If this expression is a `comptime { stmt1; stmt2; ...; stmtN }` block,\n    /// return each statement in the block.\n    #[builtin(expr_as_comptime)]\n    // docs:start:as_comptime\n    pub comptime fn as_comptime(self) -> Option<[Expr]> {}\n    // docs:end:as_comptime\n\n    /// If this expression is a constructor `Type { field1: expr1, ..., fieldN: exprN }`,\n    /// return the type and the fields.\n    #[builtin(expr_as_constructor)]\n    // docs:start:as_constructor\n    pub comptime fn as_constructor(self) -> Option<(UnresolvedType, [(Quoted, Expr)])> {}\n    // docs:end:as_constructor\n\n    /// If this expression is a for statement over a single expression, return the identifier,\n    /// the expression and the for loop body.\n    #[builtin(expr_as_for)]\n    // docs:start:as_for\n    pub comptime fn as_for(self) -> Option<(Quoted, Expr, Expr)> {}\n    // docs:end:as_for\n\n    /// If this expression is a for statement over a range, return the identifier,\n    /// the range start, the range end and the for loop body.\n    #[builtin(expr_as_for_range)]\n    // docs:start:as_for_range\n    pub comptime fn as_for_range(self) -> Option<(Quoted, Expr, Expr, Expr)> {}\n    // docs:end:as_for_range\n\n    /// If this expression is a function call `foo(arg1, ..., argN)`, return\n    /// the function and a slice of each argument.\n    #[builtin(expr_as_function_call)]\n    // docs:start:as_function_call\n    pub comptime fn as_function_call(self) -> Option<(Expr, [Expr])> {}\n    // docs:end:as_function_call\n\n    /// If this expression is an `if condition { then_branch } else { else_branch }`,\n    /// return the condition, then branch, and else branch. If there is no else branch,\n    /// `None` is returned for that branch instead.\n    #[builtin(expr_as_if)]\n    // docs:start:as_if\n    pub comptime fn as_if(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_if\n\n    /// If this expression is an index into an array `array[index]`, return the\n    /// array and the index.\n    #[builtin(expr_as_index)]\n    // docs:start:as_index\n    pub comptime fn as_index(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_index\n\n    /// If this expression is an integer literal, return the integer as a field\n    /// as well as whether the integer is negative (true) or not (false).\n    #[builtin(expr_as_integer)]\n    // docs:start:as_integer\n    pub comptime fn as_integer(self) -> Option<(Field, bool)> {}\n    // docs:end:as_integer\n\n    /// If this expression is a lambda, returns the parameters, return type and body.\n    #[builtin(expr_as_lambda)]\n    // docs:start:as_lambda\n    pub comptime fn as_lambda(\n        self,\n    ) -> Option<([(Expr, Option<UnresolvedType>)], Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_lambda\n\n    /// If this expression is a let statement, returns the let pattern as an `Expr`,\n    /// the optional type annotation, and the assigned expression.\n    #[builtin(expr_as_let)]\n    // docs:start:as_let\n    pub comptime fn as_let(self) -> Option<(Expr, Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_let\n\n    /// If this expression is a member access `foo.bar`, return the struct/tuple\n    /// expression and the field. The field will be represented as a quoted value.\n    #[builtin(expr_as_member_access)]\n    // docs:start:as_member_access\n    pub comptime fn as_member_access(self) -> Option<(Expr, Quoted)> {}\n    // docs:end:as_member_access\n\n    /// If this expression is a method call `foo.bar::<generic1, ..., genericM>(arg1, ..., argN)`, return\n    /// the receiver, method name, a slice of each generic argument, and a slice of each argument.\n    #[builtin(expr_as_method_call)]\n    // docs:start:as_method_call\n    pub comptime fn as_method_call(self) -> Option<(Expr, Quoted, [UnresolvedType], [Expr])> {}\n    // docs:end:as_method_call\n\n    /// If this expression is a repeated element array `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_array)]\n    // docs:start:as_repeated_element_array\n    pub comptime fn as_repeated_element_array(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_array\n\n    /// If this expression is a repeated element slice `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_slice)]\n    // docs:start:as_repeated_element_slice\n    pub comptime fn as_repeated_element_slice(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_slice\n\n    /// If this expression is a slice literal `&[elem1, ..., elemN]`,\n    /// return each element of the slice.\n    #[builtin(expr_as_slice)]\n    // docs:start:as_slice\n    pub comptime fn as_slice(self) -> Option<[Expr]> {}\n    // docs:end:as_slice\n\n    /// If this expression is a tuple `(field1, ..., fieldN)`,\n    /// return each element of the tuple.\n    #[builtin(expr_as_tuple)]\n    // docs:start:as_tuple\n    pub comptime fn as_tuple(self) -> Option<[Expr]> {}\n    // docs:end:as_tuple\n\n    /// If this expression is a unary operation `<op> <rhs>`,\n    /// return the unary operator as well as the right-hand side expression.\n    #[builtin(expr_as_unary_op)]\n    // docs:start:as_unary_op\n    pub comptime fn as_unary_op(self) -> Option<(UnaryOp, Expr)> {}\n    // docs:end:as_unary_op\n\n    /// If this expression is an `unsafe { stmt1; ...; stmtN }` block,\n    /// return each statement inside in a slice.\n    #[builtin(expr_as_unsafe)]\n    // docs:start:as_unsafe\n    pub comptime fn as_unsafe(self) -> Option<[Expr]> {}\n    // docs:end:as_unsafe\n\n    /// Returns `true` if this expression is trailed by a semicolon.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// comptime {\n    ///     let expr1 = quote { 1 + 2 }.as_expr().unwrap();\n    ///     let expr2 = quote { 1 + 2; }.as_expr().unwrap();\n    ///\n    ///     assert(expr1.as_binary_op().is_some());\n    ///     assert(expr2.as_binary_op().is_some());\n    ///\n    ///     assert(!expr1.has_semicolon());\n    ///     assert(expr2.has_semicolon());\n    /// }\n    /// ```\n    #[builtin(expr_has_semicolon)]\n    // docs:start:has_semicolon\n    pub comptime fn has_semicolon(self) -> bool {}\n    // docs:end:has_semicolon\n\n    /// Returns `true` if this expression is `break`.\n    #[builtin(expr_is_break)]\n    // docs:start:is_break\n    pub comptime fn is_break(self) -> bool {}\n    // docs:end:is_break\n\n    /// Returns `true` if this expression is `continue`.\n    #[builtin(expr_is_continue)]\n    // docs:start:is_continue\n    pub comptime fn is_continue(self) -> bool {}\n    // docs:end:is_continue\n\n    /// Applies a mapping function to this expression and to all of its sub-expressions.\n    /// `f` will be applied to each sub-expression first, then applied to the expression itself.\n    ///\n    /// This happens recursively for every expression within `self`.\n    ///\n    /// For example, calling `modify` on `(&[1], &[2, 3])` with an `f` that returns `Option::some`\n    /// for expressions that are integers, doubling them, would return `(&[2], &[4, 6])`.\n    // docs:start:modify\n    pub comptime fn modify<Env>(self, f: fn[Env](Expr) -> Option<Expr>) -> Expr {\n        // docs:end:modify\n        let result = modify_array(self, f);\n        let result = result.or_else(|| modify_assert(self, f));\n        let result = result.or_else(|| modify_assert_eq(self, f));\n        let result = result.or_else(|| modify_assign(self, f));\n        let result = result.or_else(|| modify_binary_op(self, f));\n        let result = result.or_else(|| modify_block(self, f));\n        let result = result.or_else(|| modify_cast(self, f));\n        let result = result.or_else(|| modify_comptime(self, f));\n        let result = result.or_else(|| modify_constructor(self, f));\n        let result = result.or_else(|| modify_if(self, f));\n        let result = result.or_else(|| modify_index(self, f));\n        let result = result.or_else(|| modify_for(self, f));\n        let result = result.or_else(|| modify_for_range(self, f));\n        let result = result.or_else(|| modify_lambda(self, f));\n        let result = result.or_else(|| modify_let(self, f));\n        let result = result.or_else(|| modify_function_call(self, f));\n        let result = result.or_else(|| modify_member_access(self, f));\n        let result = result.or_else(|| modify_method_call(self, f));\n        let result = result.or_else(|| modify_repeated_element_array(self, f));\n        let result = result.or_else(|| modify_repeated_element_slice(self, f));\n        let result = result.or_else(|| modify_slice(self, f));\n        let result = result.or_else(|| modify_tuple(self, f));\n        let result = result.or_else(|| modify_unary_op(self, f));\n        let result = result.or_else(|| modify_unsafe(self, f));\n        if result.is_some() {\n            let result = result.unwrap_unchecked();\n            let modified = f(result);\n            modified.unwrap_or(result)\n        } else {\n            f(self).unwrap_or(self)\n        }\n    }\n\n    /// Returns this expression as a `Quoted` value. It's the same as `quote { $self }`.\n    // docs:start:quoted\n    pub comptime fn quoted(self) -> Quoted {\n        // docs:end:quoted\n        quote { $self }\n    }\n\n    /// Resolves and type-checks this expression and returns the result as a `TypedExpr`.\n    ///\n    /// The `in_function` argument specifies where the expression is resolved:\n    /// - If it's `none`, the expression is resolved in the function where `resolve` was called\n    /// - If it's `some`, the expression is resolved in the given function\n    ///\n    /// If any names used by this expression are not in scope or if there are any type errors,\n    /// this will give compiler errors as if the expression was written directly into\n    /// the current `comptime` function.\n    #[builtin(expr_resolve)]\n    // docs:start:resolve\n    pub comptime fn resolve(self, in_function: Option<FunctionDefinition>) -> TypedExpr {}\n    // docs:end:resolve\n}\n\ncomptime fn modify_array<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_array().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_array(exprs)\n    })\n}\n\ncomptime fn modify_assert<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert().map(|(predicate, msg)| {\n        let predicate = predicate.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert(predicate, msg)\n    })\n}\n\ncomptime fn modify_assert_eq<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert_eq().map(|(lhs, rhs, msg)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert_eq(lhs, rhs, msg)\n    })\n}\n\ncomptime fn modify_assign<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assign().map(|expr| {\n        let (lhs, rhs) = expr;\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_assign(lhs, rhs)\n    })\n}\n\ncomptime fn modify_binary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_binary_op().map(|(lhs, op, rhs)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_binary_op(lhs, op, rhs)\n    })\n}\n\ncomptime fn modify_block<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_block().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_block(exprs)\n    })\n}\n\ncomptime fn modify_cast<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_cast().map(|(expr, typ)| {\n        let expr = expr.modify(f);\n        new_cast(expr, typ)\n    })\n}\n\ncomptime fn modify_comptime<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_comptime().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_comptime(exprs)\n    })\n}\n\ncomptime fn modify_constructor<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_constructor().map(|(typ, fields)| {\n        let fields = fields.map(|(name, value)| (name, value.modify(f)));\n        new_constructor(typ, fields)\n    })\n}\n\ncomptime fn modify_function_call<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_function_call().map(|(function, arguments)| {\n        let function = function.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_function_call(function, arguments)\n    })\n}\n\ncomptime fn modify_if<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_if().map(|(condition, consequence, alternative)| {\n        let condition = condition.modify(f);\n        let consequence = consequence.modify(f);\n        let alternative = alternative.map(|alternative| alternative.modify(f));\n        new_if(condition, consequence, alternative)\n    })\n}\n\ncomptime fn modify_index<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_index().map(|(object, index)| {\n        let object = object.modify(f);\n        let index = index.modify(f);\n        new_index(object, index)\n    })\n}\n\ncomptime fn modify_for<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for().map(|(identifier, array, body)| {\n        let array = array.modify(f);\n        let body = body.modify(f);\n        new_for(identifier, array, body)\n    })\n}\n\ncomptime fn modify_for_range<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for_range().map(|(identifier, from, to, body)| {\n        let from = from.modify(f);\n        let to = to.modify(f);\n        let body = body.modify(f);\n        new_for_range(identifier, from, to, body)\n    })\n}\n\ncomptime fn modify_lambda<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_lambda().map(|(params, return_type, body)| {\n        let params = params.map(|(name, typ)| (name.modify(f), typ));\n        let body = body.modify(f);\n        new_lambda(params, return_type, body)\n    })\n}\n\ncomptime fn modify_let<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_let().map(|(pattern, typ, expr)| {\n        let pattern = pattern.modify(f);\n        let expr = expr.modify(f);\n        new_let(pattern, typ, expr)\n    })\n}\n\ncomptime fn modify_member_access<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_member_access().map(|(object, name)| {\n        let object = object.modify(f);\n        new_member_access(object, name)\n    })\n}\n\ncomptime fn modify_method_call<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_method_call().map(|(object, name, generics, arguments)| {\n        let object = object.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_method_call(object, name, generics, arguments)\n    })\n}\n\ncomptime fn modify_repeated_element_array<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_array().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_array(expr, length)\n    })\n}\n\ncomptime fn modify_repeated_element_slice<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_slice().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_slice(expr, length)\n    })\n}\n\ncomptime fn modify_slice<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_slice().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_slice(exprs)\n    })\n}\n\ncomptime fn modify_tuple<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_tuple().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_tuple(exprs)\n    })\n}\n\ncomptime fn modify_unary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unary_op().map(|(op, rhs)| {\n        let rhs = rhs.modify(f);\n        new_unary_op(op, rhs)\n    })\n}\n\ncomptime fn modify_unsafe<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unsafe().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_unsafe(exprs)\n    })\n}\n\ncomptime fn modify_expressions<Env>(exprs: [Expr], f: fn[Env](Expr) -> Option<Expr>) -> [Expr] {\n    exprs.map(|expr| expr.modify(f))\n}\n\ncomptime fn new_array(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { [$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_assert(predicate: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert($predicate, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert($predicate) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assert_eq(lhs: Expr, rhs: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert_eq($lhs, $rhs, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert_eq($lhs, $rhs) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assign(lhs: Expr, rhs: Expr) -> Expr {\n    quote { $lhs = $rhs }.as_expr().unwrap()\n}\n\ncomptime fn new_binary_op(lhs: Expr, op: BinaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { ($lhs) $op ($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_block(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_cast(expr: Expr, typ: UnresolvedType) -> Expr {\n    quote { ($expr) as $typ }.as_expr().unwrap()\n}\n\ncomptime fn new_comptime(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { comptime { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_constructor(typ: UnresolvedType, fields: [(Quoted, Expr)]) -> Expr {\n    let fields = fields.map(|(name, value)| quote { $name: $value }).join(quote { , });\n    quote { $typ { $fields }}.as_expr().unwrap()\n}\n\ncomptime fn new_if(condition: Expr, consequence: Expr, alternative: Option<Expr>) -> Expr {\n    if alternative.is_some() {\n        let alternative = alternative.unwrap();\n        quote { if $condition { $consequence } else { $alternative }}.as_expr().unwrap()\n    } else {\n        quote { if $condition { $consequence } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_for(identifier: Quoted, array: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $array { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_for_range(identifier: Quoted, from: Expr, to: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $from .. $to { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_index(object: Expr, index: Expr) -> Expr {\n    quote { $object[$index] }.as_expr().unwrap()\n}\n\ncomptime fn new_lambda(\n    params: [(Expr, Option<UnresolvedType>)],\n    return_type: Option<UnresolvedType>,\n    body: Expr,\n) -> Expr {\n    let params = params\n        .map(|(name, typ)| {\n            if typ.is_some() {\n                let typ = typ.unwrap();\n                quote { $name: $typ }\n            } else {\n                quote { $name }\n            }\n        })\n        .join(quote { , });\n\n    if return_type.is_some() {\n        let return_type = return_type.unwrap();\n        quote { |$params| -> $return_type { $body } }.as_expr().unwrap()\n    } else {\n        quote { |$params| { $body } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_let(pattern: Expr, typ: Option<UnresolvedType>, expr: Expr) -> Expr {\n    if typ.is_some() {\n        let typ = typ.unwrap();\n        quote { let $pattern : $typ = $expr; }.as_expr().unwrap()\n    } else {\n        quote { let $pattern = $expr; }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_member_access(object: Expr, name: Quoted) -> Expr {\n    quote { $object.$name }.as_expr().unwrap()\n}\n\ncomptime fn new_function_call(function: Expr, arguments: [Expr]) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    quote { $function($arguments) }.as_expr().unwrap()\n}\n\ncomptime fn new_method_call(\n    object: Expr,\n    name: Quoted,\n    generics: [UnresolvedType],\n    arguments: [Expr],\n) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    if generics.len() == 0 {\n        quote { $object.$name($arguments) }.as_expr().unwrap()\n    } else {\n        let generics = generics.map(|generic| quote { $generic }).join(quote { , });\n        quote { $object.$name::<$generics>($arguments) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_repeated_element_array(expr: Expr, length: Expr) -> Expr {\n    quote { [$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_repeated_element_slice(expr: Expr, length: Expr) -> Expr {\n    quote { &[$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_slice(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { &[$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_tuple(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { ($exprs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unary_op(op: UnaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { $op($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unsafe(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { \n        // Safety: generated by macro\n        unsafe { $exprs }\n    }\n        .as_expr()\n        .unwrap()\n}\n\ncomptime fn join_expressions(exprs: [Expr], separator: Quoted) -> Quoted {\n    exprs.map(|expr| expr.quoted()).join(separator)\n}\n"
    },
    "292": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\nuse std::meta::derive;\n\n// Aztec address\n#[derive(Deserialize, Eq, Packable, Serialize)]\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    // We use the AZTEC_ADDRESS_LENGTH constant to ensure that there is a match between the derived trait\n    // implementation and the constant.\n    let serialized: [Field; AZTEC_ADDRESS_LENGTH] = address.serialize();\n    let deserialized = AztecAddress::deserialize(serialized);\n    assert_eq(address, deserialized);\n}\n"
    },
    "3": {
      "path": "std/array/mod.nr",
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        let sorted = unsafe { quicksort::quicksort(self, ordering) };\n\n        if !is_unconstrained() {\n            for i in 0..N - 1 {\n                assert(\n                    ordering(sorted[i], sorted[i + 1]),\n                    \"Array has not been sorted correctly according to `ordering`.\",\n                );\n            }\n            check_shuffle::check_shuffle(self, sorted);\n        }\n        sorted\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    global arr_with_100_values: [u32; 100] = [\n        42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2, 54,\n        89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41, 19, 98,\n        53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21, 43, 86, 35,\n        21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15, 127, 81, 30, 8,\n        125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n    ];\n    global expected_with_100_values: [u32; 100] = [\n        0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30, 32,\n        32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58, 61, 62,\n        62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82, 84, 84, 86,\n        86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114, 114, 116, 118,\n        119, 120, 121, 123, 123, 123, 125, 126, 127,\n    ];\n    fn sort_u32(a: u32, b: u32) -> bool {\n        a <= b\n    }\n\n    #[test]\n    fn test_sort() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values_comptime() {\n        let sorted = arr_with_100_values.sort();\n        assert(sorted == expected_with_100_values);\n    }\n\n    #[test]\n    fn test_sort_via() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_via_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n"
    },
    "306": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr",
      "source": "use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"
    },
    "308": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(utilityDebugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "310": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/delayed_public_mutable/delayed_public_mutable_values.nr",
      "source": "use crate::{\n    delayed_public_mutable::{\n        scheduled_delay_change::ScheduledDelayChange, scheduled_value_change::ScheduledValueChange,\n    },\n    hash::poseidon2_hash,\n    traits::{Hash, Packable},\n    utils::arrays,\n};\nuse std::meta::derive;\n\nmod test;\n\n/// DelayedPublicMutableValues is just a wrapper around ScheduledValueChange and ScheduledDelayChange that then allows us\n/// to wrap both of these values in WithHash. WithHash allows for efficient read of values in private.\n///\n/// Note that the WithHash optimization does not work in public (due to there being no unconstrained). But we also want\n/// to be able to read the values efficiently in public and we want to be able to read each value separately. Reading\n/// the values separately is tricky because ScheduledValueChange and ScheduledDelayChange are packed together (sdc and\n/// svc.timestamp_of_change are stored in the same slot). For that reason we expose `unpack_value_change` and\n/// `unpack_delay_change` functions that can be used to extract the values from the packed representation. This\n/// is \"hacky\" but there is no way around it.\n#[derive(Eq)]\npub struct DelayedPublicMutableValues<T, let INITIAL_DELAY: u64> {\n    pub svc: ScheduledValueChange<T>,\n    pub sdc: ScheduledDelayChange<INITIAL_DELAY>,\n}\n\nimpl<T, let INITIAL_DELAY: u64> DelayedPublicMutableValues<T, INITIAL_DELAY> {\n    pub fn new(svc: ScheduledValueChange<T>, sdc: ScheduledDelayChange<INITIAL_DELAY>) -> Self {\n        DelayedPublicMutableValues { svc, sdc }\n    }\n}\n\npub fn unpack_value_change<T, let M: u32>(packed: [Field; 2 * M + 1]) -> ScheduledValueChange<T>\nwhere\n    T: Packable<N = M>,\n{\n    let svc_pre_packed = arrays::subarray(packed, 1);\n    let svc_post_packed = arrays::subarray(packed, M + 1);\n\n    // We first cast to u32 as the timestamp_of_change is packed into the same field as the delay change and it\n    // occupies the first 32 bits of the field.\n    let timestamp_of_change = (packed[0] as u32) as u64;\n    ScheduledValueChange::new(\n        T::unpack(svc_pre_packed),\n        T::unpack(svc_post_packed),\n        timestamp_of_change,\n    )\n}\n\npub fn unpack_delay_change<let INITIAL_DELAY: u64>(\n    packed: Field,\n) -> ScheduledDelayChange<INITIAL_DELAY> {\n    // This function expects to be called with just the first field of the packed representation, which contains sdc\n    // and svc timestamp_of_change. We'll discard the svc component.\n    let svc_timestamp_of_change = packed as u32;\n\n    let mut tmp = (packed - svc_timestamp_of_change as Field) / TWO_POW_32;\n    let sdc_timestamp_of_change = tmp as u32;\n\n    tmp = (tmp - sdc_timestamp_of_change as Field) / TWO_POW_32;\n    let sdc_post_is_some = (tmp as u1) != 0;\n\n    tmp = (tmp - sdc_post_is_some as Field) / TWO_POW_8;\n    let sdc_post_inner = tmp as u32;\n\n    tmp = (tmp - sdc_post_inner as Field) / TWO_POW_32;\n    let sdc_pre_is_some = (tmp as u1) != 0;\n\n    tmp = (tmp - sdc_pre_is_some as Field) / TWO_POW_8;\n    let sdc_pre_inner = tmp as u32;\n\n    // Note that below we cast the values to u64 as that is the default type of timestamp in the system. Us packing\n    // the values as u32 is a tech debt that is not worth tackling.\n    ScheduledDelayChange {\n        pre: if sdc_pre_is_some {\n            Option::some(sdc_pre_inner as u64)\n        } else {\n            Option::none()\n        },\n        post: if sdc_post_is_some {\n            Option::some(sdc_post_inner as u64)\n        } else {\n            Option::none()\n        },\n        timestamp_of_change: sdc_timestamp_of_change as u64,\n    }\n}\n\nglobal TWO_POW_32: Field = 2.pow_32(32);\nglobal TWO_POW_8: Field = 2.pow_32(8);\n\n// We pack to `2 * N + 1` fields because ScheduledValueChange contains T twice (hence `2 * N`) and we need one extra\n// field to store ScheduledDelayChange and the timestamp_of_change of ScheduledValueChange.\nimpl<T, let INITIAL_DELAY: u64> Packable for DelayedPublicMutableValues<T, INITIAL_DELAY>\nwhere\n    T: Packable,\n{\n    let N: u32 = 2 * <T as Packable>::N + 1;\n\n    fn pack(self) -> [Field; Self::N] {\n        let mut result = [0; Self::N];\n\n        // We pack sdc.pre, sdc.post, sdc.timestamp_of_change and svc.timestamp_of_change into a single field as follows:\n        // [ sdc.pre_inner: u32 | sdc.pre_is_some: u8 | sdc.post_inner: u32 | sdc.post_is_some: u8 | sdc.timestamp_of_change: u32 | svc.timestamp_of_change: u32 ]\n        // Note that the code below no longer works after 2106 as by that time the timestamp will overflow u32. This is a tech debt that is not worth tackling.\n        result[0] = self.svc.timestamp_of_change as Field\n            + ((self.sdc.timestamp_of_change as Field) * 2.pow_32(32))\n            + ((self.sdc.post.is_some() as Field) * 2.pow_32(64))\n            + ((self.sdc.post.unwrap_unchecked() as Field) * 2.pow_32(72))\n            + ((self.sdc.pre.is_some() as Field) * 2.pow_32(104))\n            + ((self.sdc.pre.unwrap_unchecked() as Field) * 2.pow_32(112));\n\n        // Pack the pre and post values from ScheduledValueChange\n        let svc_pre_packed = self.svc.pre.pack();\n        let svc_post_packed = self.svc.post.pack();\n        for i in 0..<T as Packable>::N {\n            result[i + 1] = svc_pre_packed[i];\n            result[i + 1 + <T as Packable>::N] = svc_post_packed[i];\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        let svc = unpack_value_change::<T, _>(fields);\n        let sdc = unpack_delay_change::<INITIAL_DELAY>(fields[0]);\n        Self::new(svc, sdc)\n    }\n}\n\nimpl<T, let INITIAL_DELAY: u64> Hash for DelayedPublicMutableValues<T, INITIAL_DELAY>\nwhere\n    T: Packable,\n{\n    fn hash(self) -> Field {\n        poseidon2_hash(self.pack())\n    }\n}\n"
    },
    "313": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/delayed_public_mutable/scheduled_delay_change.nr",
      "source": "use crate::traits::Empty;\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by DelayedPublicMutable to store the minimum delay with which a ScheduledValueChange object can\n// schedule a change.\n// This delay is initially equal to INITIAL_DELAY, and can be safely mutated to any other value over time. This mutation\n// is performed via `schedule_change` in order to satisfy ScheduleValueChange constraints: if e.g. we allowed for the\n// delay to be decreased immediately then it'd be possible for the state variable to schedule a value change with a\n// reduced delay, invalidating prior private reads.\npub struct ScheduledDelayChange<let INITIAL_DELAY: u64> {\n    // Both pre and post are stored in public storage, so by default they are zeroed. By wrapping them in an Option,\n    // they default to Option::none(), which we detect and replace with INITIAL_DELAY. The end result is that a\n    // ScheduledDelayChange that has not been initialized has a delay equal to INITIAL_DELAY, which is the desired\n    // effect. Once initialized, the Option will never be none again.\n    pub(crate) pre: Option<u64>,\n    pub(crate) post: Option<u64>,\n    // Timestamp at which `post` value is used instead of `pre`\n    pub(crate) timestamp_of_change: u64,\n}\n\nimpl<let INITIAL_DELAY: u64> ScheduledDelayChange<INITIAL_DELAY> {\n    pub fn new(pre: Option<u64>, post: Option<u64>, timestamp_of_change: u64) -> Self {\n        Self { pre, post, timestamp_of_change }\n    }\n\n    /// Returns the current value of the delay stored in the data structure.\n    /// This function only returns a meaningful value when called in public with the current timestamp - for\n    /// historical private reads use `get_effective_minimum_delay_at` instead.\n    pub fn get_current(self, current_timestamp: u64) -> u64 {\n        // The post value becomes the current one at the timestamp of change, so any transaction that is included at or after\n        // the timestamp of change will use the post value.\n        if current_timestamp < self.timestamp_of_change {\n            self.pre.unwrap_or(INITIAL_DELAY)\n        } else {\n            self.post.unwrap_or(INITIAL_DELAY)\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change delay and the timestamp at which it will become the current\n    /// delay. Note that this timestamp may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub fn get_scheduled(self) -> (u64, u64) {\n        (self.post.unwrap_or(INITIAL_DELAY), self.timestamp_of_change)\n    }\n\n    /// Mutates the delay change by scheduling a change at the current timestamp. This function is only meaningful\n    /// when called in public with the current timestamp.\n    /// The timestamp at which the new delay will become effective is determined automatically:\n    ///  - when increasing the delay, the change is effective immediately\n    ///  - when reducing the delay, the change will take effect after a delay equal to the difference between old and\n    ///    new delay. For example, if reducing from 3 days to 1 day, the reduction will be scheduled to happen after 2\n    ///    days.\n    pub fn schedule_change(&mut self, new: u64, current_timestamp: u64) {\n        let current = self.get_current(current_timestamp);\n\n        // When changing the delay value we must ensure that it is not possible to produce a value change with a delay\n        // shorter than the current one.\n        let time_until_change = if new > current {\n            // Increasing the delay value can therefore be done immediately: this does not invalidate prior constraints\n            // about how quickly a value might be changed (indeed it strengthens them).\n            0\n        } else {\n            // Decreasing the delay requires waiting for the difference between current and new delay in order to ensure\n            // that overall the current delay is respected.\n            //\n            //      current                    delay              earliest value timestamp of change\n            //      timestamp             timestamp of change         if delay remained unchanged\n            //  =======N=========================|================================X=================>\n            //         ^                         ^                                ^\n            //         |-------------------------|--------------------------------|\n            //         |   time until change               new delay              |\n            //         ------------------------------------------------------------\n            //                            current delay\n            current - new\n        };\n\n        self.pre = Option::some(current);\n        self.post = Option::some(new);\n        self.timestamp_of_change = current_timestamp + time_until_change;\n    }\n\n    /// Returns the minimum delay before a value might mutate due to a scheduled change, from the perspective of some\n    /// historical timestamp (timestamp of a historical block). It only returns a meaningful value when called in\n    /// private with historical timestamps. This function can be used alongside\n    /// `ScheduledValueChange.get_time_horizon` to properly constrain the `include_by_timestamp` transaction\n    /// property when reading delayed mutable state.\n    /// This value typically equals the current delay at the timestamp following the historical one (the earliest one in\n    /// which a value change could be scheduled), but it also considers scenarios in which a delay reduction is\n    /// scheduled to happen in the near future, resulting in a way to schedule a change with an overall delay lower than\n    /// the current one.\n    pub fn get_effective_minimum_delay_at(self, historical_timestamp: u64) -> u64 {\n        if self.timestamp_of_change <= historical_timestamp {\n            // If no delay changes were scheduled, then the delay value at the historical timestamp (post) is guaranteed to\n            // hold due to how further delay changes would be scheduled by `schedule_change`.\n            self.post.unwrap_or(INITIAL_DELAY)\n        } else {\n            // If a change is scheduled, then the effective delay might be lower than the current one (pre). At the\n            // timestamp of change the current delay will be the scheduled one, with an overall delay from the historical\n            // timestamp equal to the time until the change plus the new delay. If this value is lower\n            // than the current delay, then that is the effective minimum delay.\n            //\n            //       historical\n            //        timestamp                delay                  actual earliest value\n            //           v              timestamp of change           timestamp of change\n            //  =========NS=====================|=============================X===========Y=====>\n            //            ^                     ^                             ^           ^\n            //     earliest timestamp in        |                             |           |\n            //   which to schedule change       |                             |           |\n            //           |                      |                             |           |\n            //           |----------------------|------------------------------           |\n            //           |          time                  new delay                       |\n            //           |      until change                                              |\n            //           |                                                                |\n            //           |----------------------------------------------------------------|\n            //                        current delay at the earliest timestamp in\n            //                             which to scheduled value change\n            let time_until_change = self.timestamp_of_change - (historical_timestamp + 1);\n\n            min(\n                self.pre.unwrap_or(INITIAL_DELAY),\n                time_until_change + self.post.unwrap_or(INITIAL_DELAY),\n            )\n        }\n    }\n}\n\nimpl<let INITIAL_DELAY: u64> Eq for ScheduledDelayChange<INITIAL_DELAY> {\n    fn eq(self, other: Self) -> bool {\n        (self.pre == other.pre)\n            & (self.post == other.post)\n            & (self.timestamp_of_change == other.timestamp_of_change)\n    }\n}\n\nimpl<let INITIAL_DELAY: u64> Empty for ScheduledDelayChange<INITIAL_DELAY> {\n    fn empty() -> Self {\n        Self { pre: Option::none(), post: Option::none(), timestamp_of_change: 0 }\n    }\n}\n"
    },
    "315": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/delayed_public_mutable/scheduled_value_change.nr",
      "source": "use crate::traits::Empty;\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by DelayedPublicMutable to represent a value that changes from `pre` to `post` at some timestamp\n// called the `timestamp_of_change`. The value can only be made to change by scheduling a change event at some future\n// timestamp after some minimum delay measured in seconds has elapsed. This means that at any given timestamp we know\n// both the current value and the smallest timestamp at which the value might change - this is called the\n// 'time horizon'.\npub struct ScheduledValueChange<T> {\n    pub(crate) pre: T,\n    pub(crate) post: T,\n    // Timestamp at which `post` value is used instead of `pre`\n    pub(crate) timestamp_of_change: u64,\n}\n\nimpl<T> ScheduledValueChange<T> {\n    pub fn new(pre: T, post: T, timestamp_of_change: u64) -> Self {\n        Self { pre, post, timestamp_of_change }\n    }\n\n    /// Returns the value stored in the data structure at a given timestamp. This function can be called both in public\n    /// (where `timestamp` is simply the current timestamp, i.e. the timestamp at which the current transaction will be\n    /// included) and in private (where `timestamp` is the historical timestamp that is used to construct the proof).\n    /// Reading in private is only safe if the transaction's `include_by_timestamp` property is set to a value lower or\n    /// equal to the time horizon (see `get_time_horizon()`).\n    pub fn get_current_at(self, timestamp: u64) -> T {\n        // The post value becomes the current one at the timestamp of change. This means different things in each realm:\n        // - in public, any transaction that is included at the timestamp of change will use the post value\n        // - in private, any transaction that includes the timestamp of change as part of the historical state will use\n        //   the post value (barring any follow-up changes)\n        if timestamp < self.timestamp_of_change {\n            self.pre\n        } else {\n            self.post\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change value and the timestamp at which it will become the current\n    /// value. Note that this timestamp may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub fn get_scheduled(self) -> (T, u64) {\n        (self.post, self.timestamp_of_change)\n    }\n\n    // Returns the previous value. This is the value that is current up until the timestamp of change. Note that this\n    // value might not be the current anymore since timestamp of change might have already passed.\n    pub fn get_previous(self) -> (T, u64) {\n        (self.pre, self.timestamp_of_change)\n    }\n\n    /// Returns the largest timestamp at which the value returned by `get_current_at` is known to remain the current\n    /// value. This value is only meaningful in private when constructing a proof at some `historical_timestamp`\n    /// (timestamp of a historical block at which we are constructing a proof), since due to its asynchronous nature\n    /// private execution cannot know about any later scheduled changes.\n    /// The caller of this function must know how quickly the value can change due to a scheduled change in the form of\n    /// `minimum_delay`. If the delay itself is immutable, then this is just its duration. If the delay is mutable\n    /// however, then this value is the 'effective minimum delay' (obtained by calling\n    /// `ScheduledDelayChange.get_effective_minimum_delay_at`), which equals the minimum time in seconds that needs to\n    /// elapse from the next block's timestamp until the value changes, regardless of further delay changes.\n    /// The value returned by `get_current_at` in private when called with a historical timestamp is only safe to use\n    /// if the transaction's `include_by_timestamp` property is set to a value lower or equal to the time horizon\n    /// computed using the same historical timestamp.\n    pub fn get_time_horizon(self, historical_timestamp: u64, minimum_delay: u64) -> u64 {\n        // The time horizon is the very last timestamp in which the current value is known. Any timestamp past the\n        // horizon (i.e. with a timestamp larger than the time horizon) may have a different current value.\n        // Reading the current value in private typically requires constraining the maximum valid timestamp to be equal\n        // to the time horizon.\n        if historical_timestamp >= self.timestamp_of_change {\n            // Once the timestamp of change has passed (block with timestamp >= timestamp_of_change was mined),\n            // the current value (post) will not change unless a new value change is scheduled. This did not happen at\n            // the historical timestamp (or else it would not be greater or equal to the timestamp of change), and\n            // therefore could only happen after the historical timestamp. The earliest would be the immediate next\n            // timestamp, and so the smallest possible next timestamp of change equals `historical_timestamp + 1 +\n            // minimum_delay`. Our time horizon is simply the previous timestamp to that one.\n            //\n            //   timestamp of    historical\n            //      change       timestamp          time horizon\n            //   =======|=============N===================H===========>\n            //                         ^                   ^\n            //                         ---------------------\n            //                             minimum delay\n            historical_timestamp + minimum_delay\n        } else {\n            // If the timestamp of change has not yet been reached however, then there are two possible scenarios.\n            //   a) It could be so far into the future that the time horizon is actually determined by the minimum\n            //      delay, because a new change could be scheduled and take place _before_ the currently scheduled one.\n            //      This is similar to the scenario where the timestamp of change is in the past: the time horizon is\n            //      the timestamp prior to the earliest one in which a new timestamp of change might land.\n            //\n            //         historical\n            //         timestamp                      time horizon    timestamp of change\n            //        =====N=================================H=================|=========>\n            //              ^                                 ^\n            //              |                                 |\n            //              -----------------------------------\n            //                        minimum delay\n            //\n            //   b) It could be fewer than `minimum_delay` seconds away from the historical timestamp, in which case\n            //      the timestamp of change would become the limiting factor for the time horizon, which would equal\n            //      the timestamp right before the timestamp of change (since by definition the value changes at the\n            //      timestamp of change).\n            //\n            //           historical                         time horizon\n            //           timestamp   timestamp of change    if not scheduled\n            //        =======N=============|===================H=================>\n            //                ^           ^                     ^\n            //                |     actual horizon              |\n            //                -----------------------------------\n            //                          minimum delay\n            //\n            // Note that the current implementation does not allow the caller to set the timestamp of change to an\n            // arbitrary value, and therefore scenario a) is not currently possible. However implementing #5501 would\n            // allow for this to happen.\n            // Because historical_timestamp < self.timestamp_of_change, then timestamp_of_change > 0 and we can safely\n            // subtract 1.\n            min(\n                self.timestamp_of_change - 1,\n                historical_timestamp + minimum_delay,\n            )\n        }\n    }\n\n    /// Mutates the value by scheduling a change at the current timestamp. This function is only meaningful when\n    /// called in public with the current timestamp.\n    pub fn schedule_change(\n        &mut self,\n        new_value: T,\n        current_timestamp: u64,\n        minimum_delay: u64,\n        timestamp_of_change: u64,\n    ) {\n        assert(timestamp_of_change >= current_timestamp + minimum_delay);\n\n        self.pre = self.get_current_at(current_timestamp);\n        self.post = new_value;\n        self.timestamp_of_change = timestamp_of_change;\n    }\n}\n\nimpl<T> Eq for ScheduledValueChange<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        (self.pre == other.pre)\n            & (self.post == other.post)\n            & (self.timestamp_of_change == other.timestamp_of_change)\n    }\n}\n\nimpl<T> Empty for ScheduledValueChange<T>\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        Self { pre: T::empty(), post: T::empty(), timestamp_of_change: 0 }\n    }\n}\n"
    },
    "317": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        CONTRACT_CLASS_LOG_SIZE_IN_FIELDS, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE,\n        GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__SILOED_NOTE_HASH,\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::L2ToL1Message,\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::field::{field_from_bytes, field_from_bytes_32_trunc},\n};\nuse std::embedded_curve_ops::EmbeddedCurveScalar;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(note_nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [note_nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_nonce_and_unique_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    let note_nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n    compute_unique_note_hash(note_nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        compute_nonce_and_unique_note_hash(siloed_note_hash, first_nullifier, note_index_in_tx)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    // Q: shouldn't we be checking whether the _whole_ nullifier is empty?\n    // A: We don't have to. The init and inner circuits add contract address to non-empty nullifiers.\n    // So we know we should silo it if the contract address is not empty.\n    if nullifier.contract_address.is_zero() {\n        // Q: I don't understand this comment. We could still compute a siloed nullifier from a zero contract address.\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog::new(fields, private_log.inner.log.length)\n    }\n}\n\npub fn compute_contract_class_log_hash(log: [Field; CONTRACT_CLASS_LOG_SIZE_IN_FIELDS]) -> Field {\n    poseidon2_hash(log)\n}\n\npub fn compute_app_secret_key(\n    master_secret_key: EmbeddedCurveScalar,\n    app_address: AztecAddress,\n    app_secret_generator: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [master_secret_key.hi, master_secret_key.lo, app_address.to_field()],\n        app_secret_generator,\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let contract_address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    let recipient_bytes: [u8; 20] = recipient.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let rollup_version_id_bytes: [u8; 32] = rollup_version_id.to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n\n    let mut bytes: [u8; 148] = std::mem::zeroed();\n    for i in 0..32 {\n        bytes[i] = contract_address_bytes[i];\n        bytes[i + 32] = rollup_version_id_bytes[i];\n        // 64 - 84 are for recipient.\n        bytes[i + 84] = chain_id_bytes[i];\n        bytes[i + 116] = content_bytes[i];\n    }\n\n    for i in 0..20 {\n        bytes[64 + i] = recipient_bytes[i];\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: Scoped<L2ToL1Message>,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.inner.recipient,\n            msg.inner.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n/// Computes sha256 hash of 2 input fields.\n///\n/// @returns A truncated field (i.e., the first byte is always 0).\npub fn accumulate_sha256(v0: Field, v1: Field) -> Field {\n    // Concatenate two fields into 32 x 2 = 64 bytes\n    let v0_as_bytes: [u8; 32] = v0.to_be_bytes();\n    let v1_as_bytes: [u8; 32] = v1.to_be_bytes();\n    let hash_input_flattened = v0_as_bytes.concat(v1_as_bytes);\n\n    sha256_to_field(hash_input_flattened)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    poseidon::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = [separator.to_field()].concat(inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as poseidon::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert_eq(input[in_len - remainder + i], 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n// This function is  unconstrained because it is intended to be used in unconstrained context only as\n// in constrained contexts it would be too inefficient.\npub unconstrained fn poseidon2_hash_with_separator_bounded_vec<let N: u32, T>(\n    inputs: BoundedVec<Field, N>,\n    separator: T,\n) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs.get(i));\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = poseidon::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = poseidon::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0x3b18c58c739716e76429634a61375c45b3b5cd470c22ab6d3e14cee23dd992);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0xaab2a5828156782b12a1dc6f336e2bc627eb1b9514b02d511f66296990c050);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        L2ToL1Message { recipient: EthAddress::from_field(1), content: 2 }.scope(\n            AztecAddress::from_field(3),\n        ),\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `yarn-project/stdlib/src/hash/hash.test.ts`\n    let hash_from_typescript = 0x0081edf209e087ad31b3fd24263698723d57190bd1d6e9fe056fc0c0a68ee661;\n\n    assert_eq(hash, hash_from_typescript);\n}\n\n#[test]\nunconstrained fn poseidon2_hash_with_separator_bounded_vec_matches_non_bounded_vec_version() {\n    let inputs = BoundedVec::<Field, 4>::from_array([1, 2, 3]);\n    let separator = 42;\n\n    // Hash using bounded vec version\n    let bounded_result = poseidon2_hash_with_separator_bounded_vec(inputs, separator);\n\n    // Hash using regular version\n    let regular_result = poseidon2_hash_with_separator([1, 2, 3], separator);\n\n    // Results should match\n    assert_eq(bounded_result, regular_result);\n}\n"
    },
    "327": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr",
      "source": "use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"
    },
    "331": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr",
      "source": "/// Generates the generic parameter declarations for a struct's trait implementation.\n///\n/// This function takes a struct type definition and generates the generic parameter declarations\n/// that go after the `impl` keyword. For example, given a struct with generics `N: u32` and `T`,\n/// it generates `<let N: u32, T>`.\n///\n/// # Parameters\n/// - `s`: The struct type definition to generate generic declarations for\n///\n/// # Returns\n/// A quoted code block containing the generic parameter declarations, or an empty quote if the struct\n/// has no generic parameters\n///\n/// # Example\n/// For a struct defined as:\n/// ```\n/// struct Container<T, let N: u32> {\n///     items: [T; N],\n///     count: u32\n/// }\n/// ```\n///\n/// This function generates:\n/// ```\n/// <let N: u32, T>\n/// ```\ncomptime fn get_generics_declarations(s: TypeDefinition) -> Quoted {\n    let generics = s.generics();\n\n    if generics.len() > 0 {\n        let generics_declarations_items = generics\n            .map(|(name, maybe_integer_typ)| {\n                // The second item in the generics tuple is an Option of an integer type that is Some only if\n                // the generic is numeric.\n                if maybe_integer_typ.is_some() {\n                    // The generic is numeric, so we return a quote defined as e.g. \"let N: u32\"\n                    let integer_type = maybe_integer_typ.unwrap();\n                    quote {let $name: $integer_type}\n                } else {\n                    // The generic is not numeric, so we return a quote containing the name of the generic (e.g. \"T\")\n                    quote {$name}\n                }\n            })\n            .join(quote {,});\n        quote {<$generics_declarations_items>}\n    } else {\n        // The struct doesn't have any generics defined, so we just return an empty quote.\n        quote {}\n    }\n}\n\n/// Generates the `where` clause for a trait implementation that constrains non-numeric generic type parameters.\n///\n/// This function takes a struct type definition and a trait name, and generates a `where` clause that\n/// requires all non-numeric generic type parameters to implement the specified trait.\n///\n/// # Parameters\n/// - `s`: The struct type definition to generate the where clause for\n/// - `trait_name`: The name of the trait that non-numeric generic parameters must implement\n///\n/// # Returns\n/// A quoted code block containing the where clause, or an empty quote if the struct has no non-numeric\n/// generic parameters\n///\n/// # Example\n/// For a struct defined as:\n/// ```\n/// struct Container<T, let N: u32> {\n///     items: [T; N],\n///     count: u32\n/// }\n/// ```\n///\n/// And trait name \"Serialize\", this function generates:\n/// ```\n/// where T: Serialize\n/// ```\ncomptime fn get_where_trait_clause(s: TypeDefinition, trait_name: Quoted) -> Quoted {\n    let generics = s.generics();\n\n    // The second item in the generics tuple is an Option of an integer type that is Some only if the generic is\n    // numeric.\n    let non_numeric_generics =\n        generics.filter(|(_, maybe_integer_typ)| maybe_integer_typ.is_none());\n\n    if non_numeric_generics.len() > 0 {\n        let non_numeric_generics_declarations =\n            non_numeric_generics.map(|(name, _)| quote {$name: $trait_name}).join(quote {,});\n        quote {where $non_numeric_generics_declarations}\n    } else {\n        // There are no non-numeric generics, so we return an empty quote.\n        quote {}\n    }\n}\n\n/// Generates a `Serialize` trait implementation for a struct type.\n///\n/// # Parameters\n/// - `s`: The struct type definition to generate the implementation for\n///\n/// # Returns\n/// A quoted code block containing the trait implementation\n///\n/// # Example\n/// For a struct defined as:\n/// ```\n/// struct Log<N> {\n///     fields: [Field; N],\n///     length: u32\n/// }\n/// ```\n///\n/// This function generates code equivalent to:\n/// ```\n/// impl<let N: u32> Serialize for Log<N> {\n///     let N: u32 = <[Field; N] as Serialize>::N + <u32 as Serialize>::N;\n///\n///     #[inline_always]\n///     fn serialize(self) -> [Field; Self::N] {\n///         let mut result = [0; _];\n///         let mut offset = 0;\n///\n///         let serialized_member = Serialize::serialize(self.fields);\n///         let serialized_member_len = <[Field; N] as Serialize>::N;\n///         for i in 0..serialized_member_len {\n///             result[i + offset] = serialized_member[i];\n///         }\n///         offset += serialized_member_len;\n///\n///         let serialized_member = Serialize::serialize(self.length);\n///         let serialized_member_len = <u32 as Serialize>::N;\n///         for i in 0..serialized_member_len {\n///             result[i + offset] = serialized_member[i];\n///         }\n///         offset += serialized_member_len;\n///\n///         result\n///     }\n/// }\n/// ```\npub comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let nested_struct = typ.as_data_type().unwrap();\n    let params = nested_struct.0.fields(nested_struct.1);\n\n    // Generates the generic parameter declarations (to be placed after the `impl` keyword) and the `where` clause\n    // for the `Serialize` trait.\n    let generics_declarations = get_generics_declarations(s);\n    let where_serialize_clause = get_where_trait_clause(s, quote {Serialize});\n\n    // The following will give us <type_of_struct_member_1 as Serialize>::N + <type_of_struct_member_2 as Serialize>::N + ...\n    let right_hand_side_of_definition_of_n = params\n        .map(|(_, param_type, _): (Quoted, Type, Quoted)| {\n            quote {\n            <$param_type as $crate::traits::Serialize>::N\n        }\n        })\n        .join(quote {+});\n\n    // For structs containing a single member, we can enhance performance by directly returning the serialized member,\n    // bypassing the need for loop-based array construction. While this optimization yields significant benefits in\n    // Brillig where the loops are expected to not be optimized, it is not relevant in ACIR where the loops are\n    // expected to be optimized away.\n    let function_body = if params.len() > 1 {\n        // For multiple struct members, generate serialization code that:\n        // 1. Serializes each member\n        // 2. Copies the serialized fields into the result array at the correct offset\n        // 3. Updates the offset for the next member\n        let serialization_of_struct_members = params\n            .map(|(param_name, param_type, _): (Quoted, Type, Quoted)| {\n                quote {\n                let serialized_member = $crate::traits::Serialize::serialize(self.$param_name);\n                let serialized_member_len = <$param_type as $crate::traits::Serialize>::N;\n                for i in 0..serialized_member_len {\n                    result[i + offset] = serialized_member[i];\n                }\n                offset += serialized_member_len;\n            }\n            })\n            .join(quote {});\n\n        quote {\n            let mut result = [0; _];\n            let mut offset = 0;\n\n            $serialization_of_struct_members\n\n            result\n        }\n    } else {\n        let param_name = params[0].0;\n        quote {\n            $crate::traits::Serialize::serialize(self.$param_name)\n        }\n    };\n\n    quote {\n        impl$generics_declarations $crate::traits::Serialize for $typ\n            $where_serialize_clause\n        {\n            let N: u32 = $right_hand_side_of_definition_of_n;\n\n            #[inline_always]\n            fn serialize(self) -> [Field; Self::N] {\n                $function_body\n            }\n        }\n    }\n}\n\n/// Generates a `Deserialize` trait implementation for a given struct `s`.\n///\n/// # Arguments\n/// * `s` - The struct type definition to generate the implementation for\n///\n/// # Returns\n/// A `Quoted` block containing the generated trait implementation\n///\n/// # Requirements\n/// Each struct member type must implement the `Deserialize` trait (it gets used in the generated code).\n///\n/// # Example\n/// For a struct like:\n/// ```\n/// struct MyStruct {\n///     x: AztecAddress,\n///     y: Field,\n/// }\n/// ```\n///\n/// This generates:\n/// ```\n/// impl Deserialize for MyStruct {\n///     let N: u32 = <AztecAddress as Deserialize>::N + <Field as Deserialize>::N;\n///\n///     fn deserialize(serialized: [Field; Self::N]) -> Self {\n///         let mut offset = 0;\n///         let mut member_fields = [0; <AztecAddress as Deserialize>::N];\n///         for i in 0..<AztecAddress as Deserialize>::N {\n///             member_fields[i] = serialized[i + offset];\n///         }\n///         let x = <AztecAddress as Deserialize>::deserialize(member_fields);\n///         offset += <AztecAddress as Deserialize>::N;\n///\n///         let mut member_fields = [0; <Field as Deserialize>::N];\n///         for i in 0..<Field as Deserialize>::N {\n///             member_fields[i] = serialized[i + offset];\n///         }\n///         let y = <Field as Deserialize>::deserialize(member_fields);\n///         offset += <Field as Deserialize>::N;\n///\n///         Self { x, y }\n///     }\n/// }\n/// ```\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let nested_struct = typ.as_data_type().unwrap();\n    let params = nested_struct.0.fields(nested_struct.1);\n\n    // Generates the generic parameter declarations (to be placed after the `impl` keyword) and the `where` clause\n    // for the `Deserialize` trait.\n    let generics_declarations = get_generics_declarations(s);\n    let where_deserialize_clause = get_where_trait_clause(s, quote {Deserialize});\n\n    // The following will give us <type_of_struct_member_1 as Deserialize>::N + <type_of_struct_member_2 as Deserialize>::N + ...\n    let right_hand_side_of_definition_of_n = params\n        .map(|(_, param_type, _): (Quoted, Type, Quoted)| {\n            quote {\n            <$param_type as $crate::traits::Deserialize>::N\n        }\n        })\n        .join(quote {+});\n\n    // For structs containing a single member, we can enhance performance by directly deserializing the input array,\n    // bypassing the need for loop-based array construction. While this optimization yields significant benefits in\n    // Brillig where the loops are expected to not be optimized, it is not relevant in ACIR where the loops are\n    // expected to be optimized away.\n    let function_body = if params.len() > 1 {\n        // This generates deserialization code for each struct member and concatenates them together.\n        let deserialization_of_struct_members = params\n            .map(|(param_name, param_type, _): (Quoted, Type, Quoted)| {\n                quote {\n                    let mut member_fields = [0; <$param_type as Deserialize>::N];\n                    for i in 0..<$param_type as Deserialize>::N {\n                        member_fields[i] = serialized[i + offset];\n                    }\n                    let $param_name = <$param_type as Deserialize>::deserialize(member_fields);\n                    offset += <$param_type as Deserialize>::N;\n                }\n            })\n            .join(quote {});\n\n        // We join the struct member names with a comma to be used in the `Self { ... }` syntax\n        // This will give us e.g. `a, b, c` for a struct with three fields named `a`, `b`, and `c`.\n        let struct_members = params\n            .map(|(param_name, _, _): (Quoted, Type, Quoted)| quote { $param_name })\n            .join(quote {,});\n\n        quote {\n            let mut offset = 0;\n\n            $deserialization_of_struct_members\n\n            Self { $struct_members }\n        }\n    } else {\n        let param_name = params[0].0;\n        quote {\n            Self { $param_name: $crate::traits::Deserialize::deserialize(serialized) }\n        }\n    };\n\n    quote {\n        impl$generics_declarations $crate::traits::Deserialize for $typ\n            $where_deserialize_clause\n        {\n            let N: u32 = $right_hand_side_of_definition_of_n;\n\n            #[inline_always]\n            fn deserialize(serialized: [Field; Self::N]) -> Self {\n                $function_body\n            }\n        }\n    }\n}\n\n/// Generates a `Packable` trait implementation for a given struct `s`.\n///\n/// # Arguments\n/// * `s` - The struct type definition to generate the implementation for\n///\n/// # Returns\n/// A `Quoted` block containing the generated trait implementation\n///\n/// # Requirements\n/// Each struct member type must implement the `Packable` trait (it gets used in the generated code).\n///\n/// # Example\n/// For a struct like:\n/// ```\n/// struct MyStruct {\n///     x: AztecAddress,\n///     y: Field,\n/// }\n/// ```\n///\n/// This generates:\n/// ```\n/// impl Packable for MyStruct {\n///     let N: u32 = 2;\n///\n///     fn pack(self) -> [Field; 2] {\n///         let mut result: [Field; 2] = [0_Field; 2];\n///         let mut offset: u32 = 0_u32;\n///         let packed_member: [Field; 1] = self.x.pack();\n///         let packed_member_len: u32 = <Field as Packable>::N;\n///         for i in 0_u32..packed_member_len {\n///             {\n///                 result[i + offset] = packed_member[i];\n///             }\n///         }\n///         offset = offset + packed_member_len;\n///         let packed_member: [Field; 1] = self.y.pack();\n///         let packed_member_len: u32 = <Field as Packable>::N;\n///         for i in 0_u32..packed_member_len {\n///             {\n///                 result[i + offset] = packed_member[i];\n///             }\n///         }\n///         offset = offset + packed_member_len;\n///         result\n///     }\n///\n///     fn unpack(packed: [Field; 2]) -> Self {\n///         let mut offset: u32 = 0_u32;\n///         let mut member_fields: [Field; 1] = [0_Field; 1];\n///         for i in 0_u32..<AztecAddress as Packable>::N {\n///             member_fields[i] = packed[i + offset];\n///         }\n///         let x: AztecAddress = <AztecAddress as Packable>::unpack(member_fields);\n///         offset = offset + <AztecAddress as Packable>::N;\n///         let mut member_fields: [Field; 1] = [0_Field; 1];\n///         for i in 0_u32..<Field as Packable>::N {\n///             member_fields[i] = packed[i + offset];\n///         }\n///         let y: Field = <Field as Packable>::unpack(member_fields);\n///         offset = offset + <Field as Packable>::N;\n///         Self { x: x, y: y }\n///     }\n/// }\n/// ```\npub comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let nested_struct = typ.as_data_type().unwrap();\n    let params = nested_struct.0.fields(nested_struct.1);\n\n    // Generates the generic parameter declarations (to be placed after the `impl` keyword) and the `where` clause\n    // for the `Packable` trait.\n    let generics_declarations = get_generics_declarations(s);\n    let where_packable_clause = get_where_trait_clause(s, quote {Packable});\n\n    // The following will give us <type_of_struct_member_1 as Packable>::N + <type_of_struct_member_2 as Packable>::N + ...\n    let right_hand_side_of_definition_of_n = params\n        .map(|(_, param_type, _): (Quoted, Type, Quoted)| {\n            quote {\n            <$param_type as $crate::traits::Packable>::N\n        }\n        })\n        .join(quote {+});\n\n    // For structs containing a single member, we can enhance performance by directly returning the packed member,\n    // bypassing the need for loop-based array construction. While this optimization yields significant benefits in\n    // Brillig where the loops are expected to not be optimized, it is not relevant in ACIR where the loops are\n    // expected to be optimized away.\n    let pack_function_body = if params.len() > 1 {\n        // For multiple struct members, generate packing code that:\n        // 1. Packs each member\n        // 2. Copies the packed fields into the result array at the correct offset\n        // 3. Updates the offset for the next member\n        let packing_of_struct_members = params\n            .map(|(param_name, param_type, _): (Quoted, Type, Quoted)| {\n                quote {\n                    let packed_member = $crate::traits::Packable::pack(self.$param_name);\n                    let packed_member_len = <$param_type as $crate::traits::Packable>::N;\n                    for i in 0..packed_member_len {\n                        result[i + offset] = packed_member[i];\n                    }\n                    offset += packed_member_len;\n                }\n            })\n            .join(quote {});\n\n        quote {\n            let mut result = [0; Self::N];\n            let mut offset = 0;\n\n            $packing_of_struct_members\n\n            result\n        }\n    } else {\n        let param_name = params[0].0;\n        quote {\n            $crate::traits::Packable::pack(self.$param_name)\n        }\n    };\n\n    // For structs containing a single member, we can enhance performance by directly unpacking the input array,\n    // bypassing the need for loop-based array construction. While this optimization yields significant benefits in\n    // Brillig where the loops are expected to not be optimized, it is not relevant in ACIR where the loops are\n    // expected to be optimized away.\n    let unpack_function_body = if params.len() > 1 {\n        // For multiple struct members, generate unpacking code that:\n        // 1. Unpacks each member\n        // 2. Copies packed fields into member array at correct offset\n        // 3. Updates offset for next member\n        let unpacking_of_struct_members = params\n            .map(|(param_name, param_type, _): (Quoted, Type, Quoted)| {\n                quote {\n                    let mut member_fields = [0; <$param_type as $crate::traits::Packable>::N];\n                    for i in 0..<$param_type as $crate::traits::Packable>::N {\n                        member_fields[i] = packed[i + offset];\n                    }\n                    let $param_name = <$param_type as $crate::traits::Packable>::unpack(member_fields);\n                    offset += <$param_type as $crate::traits::Packable>::N;\n                }\n            })\n            .join(quote {});\n\n        // We join the struct member names with a comma to be used in the `Self { ... }` syntax\n        let struct_members = params\n            .map(|(param_name, _, _): (Quoted, Type, Quoted)| quote { $param_name })\n            .join(quote {,});\n\n        quote {\n            let mut offset = 0;\n            $unpacking_of_struct_members\n            Self { $struct_members }\n        }\n    } else {\n        let param_name = params[0].0;\n        quote {\n            Self { $param_name: $crate::traits::Packable::unpack(packed) }\n        }\n    };\n\n    quote {\n        impl$generics_declarations $crate::traits::Packable for $typ\n            $where_packable_clause\n        {\n            let N: u32 = $right_hand_side_of_definition_of_n;\n\n            #[inline_always]\n            fn pack(self) -> [Field; Self::N] {\n                $pack_function_body\n            }\n\n            #[inline_always]\n            fn unpack(packed: [Field; Self::N]) -> Self {\n                $unpack_function_body\n            }\n        }\n    }\n}\n\nmod test {\n    use crate::traits::{Deserialize, Packable, Serialize};\n\n    #[derive(Deserialize, Eq, Packable, Serialize)]\n    pub struct Smol {\n        a: Field,\n        b: Field,\n    }\n\n    #[derive(Deserialize, Eq, Serialize)]\n    pub struct HasArray {\n        a: [Field; 2],\n        b: bool,\n    }\n\n    #[derive(Deserialize, Eq, Serialize)]\n    pub struct Fancier {\n        a: Smol,\n        b: [Field; 2],\n        c: [u8; 3],\n        d: str<16>,\n    }\n\n    #[derive(Deserialize, Eq, Packable, Serialize)]\n    pub struct HasArrayWithGenerics<T, let N: u32> {\n        pub fields: [T; N],\n        pub length: u32,\n    }\n\n    #[test]\n    fn serde_on_smol() {\n        let smol = Smol { a: 1, b: 2 };\n        let serialized = smol.serialize();\n        assert(serialized == [1, 2], serialized);\n        let deserialized = Smol::deserialize(serialized);\n        assert(deserialized == smol);\n\n        // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n        let packed = smol.pack();\n        assert_eq(packed, serialized, \"Packed does not match serialized\");\n    }\n\n    #[test]\n    fn serde_on_has_array() {\n        let has_array = HasArray { a: [1, 2], b: true };\n        let serialized = has_array.serialize();\n        assert(serialized == [1, 2, 1], serialized);\n        let deserialized = HasArray::deserialize(serialized);\n        assert(deserialized == has_array);\n    }\n\n    #[test]\n    fn serde_on_fancier() {\n        let fancier =\n            Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n        let serialized = fancier.serialize();\n        assert(\n            serialized\n                == [\n                    1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                    0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n                ],\n            serialized,\n        );\n        let deserialized = Fancier::deserialize(serialized);\n        assert(deserialized == fancier);\n    }\n\n    #[test]\n    fn serde_on_contains_array_with_generics() {\n        let struct_with_array_of_generics = HasArrayWithGenerics { fields: [1, 2, 3], length: 3 };\n        let serialized = struct_with_array_of_generics.serialize();\n        assert(serialized == [1, 2, 3, 3], serialized);\n        let deserialized = HasArrayWithGenerics::deserialize(serialized);\n        assert(deserialized == struct_with_array_of_generics);\n    }\n\n    #[test]\n    fn packable_on_contains_array_with_generics() {\n        let struct_with_array_of_generics = HasArrayWithGenerics { fields: [1, 2, 3], length: 3 };\n        let packed = struct_with_array_of_generics.pack();\n        assert(packed == [1, 2, 3, 3], packed);\n\n        let unpacked = HasArrayWithGenerics::unpack(packed);\n        assert(unpacked == struct_with_array_of_generics);\n    }\n\n}\n"
    },
    "332": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\n// Note: Not deriving this because it's not supported to call derive_serialize on a \"remote\" struct (and it will never\n// be supported).\nimpl Serialize for Point {\n    let N: u32 = POINT_LENGTH;\n\n    fn serialize(self: Self) -> [Field; Self::N] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize for Point {\n    let N: u32 = POINT_LENGTH;\n\n    fn deserialize(serialized: [Field; Self::N]) -> Self {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] != 0 }\n    }\n}\n\n// TODO(#11356): use compact representation here.\nimpl Packable for Point {\n    let N: u32 = POINT_LENGTH;\n\n    fn pack(self) -> [Field; Self::N] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; Self::N]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "333": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\nuse crate::traits::{Deserialize, Serialize};\nuse std::meta::derive;\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "343": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::{default::Default, meta::derive};\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nmod test {\n    use crate::{\n        point::POINT_LENGTH,\n        public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n        traits::{Deserialize, Serialize},\n    };\n    use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\n    #[test]\n    unconstrained fn compute_public_keys_hash() {\n        let keys = PublicKeys {\n            npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n            ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n            ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n            tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n        };\n\n        let actual = keys.hash();\n        let expected_public_keys_hash =\n            0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n        assert(actual.to_field() == expected_public_keys_hash);\n    }\n\n    #[test]\n    unconstrained fn compute_default_hash() {\n        let keys = PublicKeys::default();\n\n        let actual = keys.hash();\n        let test_data_default_hash =\n            0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n        assert(actual.to_field() == test_data_default_hash);\n    }\n\n    #[test]\n    unconstrained fn serde() {\n        let keys = PublicKeys {\n            npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n            ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n            ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n            tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n        };\n\n        // We use the PUBLIC_KEYS_LENGTH constant to ensure that there is a match between the derived trait\n        let serialized: [Field; POINT_LENGTH * 4] = keys.serialize();\n        let deserialized = PublicKeys::deserialize(serialized);\n\n        assert_eq(keys, deserialized);\n    }\n}\n"
    },
    "345": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "358": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty: Eq {\n    fn empty() -> Self;\n\n    fn is_empty(self) -> bool {\n        self.eq(Self::empty())\n    }\n\n    // Requires this Noir fix: https://github.com/noir-lang/noir/issues/9002\n    // fn assert_not_empty<let U: u32>(self, msg: str<U>) { // This msg version was failing with weird compiler errors.\n    //     // We provide a default impl but it's likely inefficient.\n    //     // The reason we include this function is because there's a lot of\n    //     // opportunity for optimisation on a per-struct basis.\n    //     // You only need to show one element is not empty to know that the whole thing\n    //     // is not empty.\n    //     // If you know an element of your struct which should always be nonempty,\n    //     // you can write an impl that solely checks that that element is nonempty.\n    //     assert(!self.is_empty(), msg);\n    // }\n\n    // This default impl is overwritten by types like arrays, because there's a much\n    // more efficient approach.\n    fn assert_empty<let S: u32>(self, msg: str<S>) {\n        assert(self.is_empty(), msg);\n    }\n}\n\nimpl Empty for Field {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u16 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    #[inline_always]\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n\n    fn is_empty(self) -> bool {\n        self.all(|elem| elem.is_empty())\n    }\n\n    fn assert_empty<let S: u32>(self, msg: str<S>) -> () {\n        self.for_each(|elem| elem.assert_empty(msg))\n    }\n}\n\nimpl<T> Empty for [T]\nwhere\n    T: Empty,\n{\n    #[inline_always]\n    fn empty() -> Self {\n        [T::empty()]\n    }\n\n    fn is_empty(self) -> bool {\n        self.all(|elem| elem.is_empty())\n    }\n\n    fn assert_empty<let S: u32>(self, msg: str<S>) -> () {\n        self.for_each(|elem| elem.assert_empty(msg))\n    }\n}\nimpl<A, B> Empty for (A, B)\nwhere\n    A: Empty,\n    B: Empty,\n{\n    #[inline_always]\n    fn empty() -> Self {\n        (A::empty(), B::empty())\n    }\n}\n\nimpl<T> Empty for Option<T>\nwhere\n    T: Eq,\n{\n    #[inline_always]\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\n// pub fn is_empty<T>(item: T) -> bool\n// where\n//     T: Empty,\n// {\n//     item.eq(T::empty())\n// }\n\n// pub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\n// where\n//     T: Empty,\n// {\n//     array.all(|elem| is_empty(elem))\n// }\n\n// pub fn assert_empty<T>(item: T) -> ()\n// where\n//     T: Empty,\n// {\n//     assert(item.eq(T::empty()))\n// }\n\n// pub fn assert_empty_array<T, let N: u32>(array: [T; N]) -> ()\n// where\n//     T: Empty,\n// {\n//     // A cheaper option than `is_empty_array` for if you don't need to gracefully\n//     // handle a bool result.\n//     // Avoids the `&` operator of `is_empty_array`'s `.all()` call.\n//     for i in 0..N {\n//         assert(is_empty(array[i]));\n//     }\n// }\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u16 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value != 0\n    }\n}\nimpl FromField for u1 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u16 {\n    fn from_field(value: Field) -> Self {\n        value as u16\n    }\n}\nimpl FromField for u32 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Associated Constants\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize for str<N> {\n///     let N: u32 = N;\n///\n///     fn serialize(self) -> [Field; Self::N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; Self::N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize {\n    let N: u32;\n\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let M: u32> Serialize for str<M> {\n    let N: u32 = M;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; Self::N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n/// Implementation of Deserialize for BoundedVec.\n///\n/// This implementation deserializes a BoundedVec from an array of Fields. The array contains:\n/// 1. The serialized items, each taking up T::N Fields\n/// 2. The length of the BoundedVec as the last Field\n///\n/// # Type Parameters\n/// * `T` - The type of items stored in the BoundedVec, must implement Deserialize\n/// * `M` - The maximum length of the BoundedVec\n///\n/// # Fields Array Layout\n/// [item1_field1, item1_field2, ..., item2_field1, item2_field2, ..., length]\n/// Where:\n/// - itemN_fieldM: The M-th Field of the N-th item (T::N Fields per item)\n/// - length: The number of items in the BoundedVec (1 Field)\n///\n/// Total length N = T::N * M + 1, where:\n/// - T::N is the number of Fields needed to deserialize one item\n/// - M is the maximum length of the BoundedVec\n/// - +1 is for storing the length\n///\n/// # Note\n/// Not deriving this because it's not supported to call derive_deserialize on a \"remote\" struct (and it will never\n/// be supported).\nimpl<T, let M: u32> Deserialize for BoundedVec<T, M>\nwhere\n    T: Deserialize,\n{\n    let N: u32 = <T as Deserialize>::N * M + 1;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        let mut new_bounded_vec: BoundedVec<T, M> = BoundedVec::new();\n\n        // Length is stored in the last field as we need to match intrinsic Noir serialization and the `len` struct\n        // field is after `storage` struct field (see `bounded_vec.nr` in noir-stdlib)\n        let len = fields[<T as Deserialize>::N * M] as u32;\n\n        for i in 0..len {\n            let mut nested_fields = [0; <T as Deserialize>::N];\n            for j in 0..<T as Deserialize>::N {\n                nested_fields[j] = fields[i * <T as Deserialize>::N + j];\n            }\n\n            let item = T::deserialize(nested_fields);\n            new_bounded_vec.push(item);\n        }\n\n        new_bounded_vec\n    }\n}\n\n// This may cause issues if used as program input, because noir disallows empty arrays for program input.\n// I think this is okay because I don't foresee a unit type being used as input. But leaving this comment as a hint\n// if someone does run into this in the future.\nimpl Deserialize for () {\n    let N: u32 = 0;\n\n    fn deserialize(_fields: [Field; Self::N]) -> Self {\n        ()\n    }\n}\n\n// Note: Not deriving this because it's not supported to call derive_serialize on a \"remote\" struct (and it will never\n// be supported).\nimpl<T, let M: u32> Serialize for BoundedVec<T, M>\nwhere\n    T: Serialize,\n{\n    let N: u32 = <T as Serialize>::N * M + 1; // +1 for the length of the BoundedVec\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        let mut fields = [0; Self::N];\n\n        let storage = self.storage();\n\n        for i in 0..M {\n            let serialized_item = storage[i].serialize();\n\n            for j in 0..<T as Serialize>::N {\n                fields[i * <T as Serialize>::N + j] = serialized_item[j];\n            }\n        }\n\n        // Length is stored in the last field as we need to match intrinsic Noir serialization and the `len` struct\n        // field is after `storage` struct field (see `bounded_vec.nr` in noir-stdlib)\n        fields[<T as Serialize>::N * M] = self.len() as Field;\n\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Associated Constants\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let M: u32> Deserialize for str<M> {\n///     let N: u32 = M;\n///\n///     #[inline_always]\n///     fn deserialize(fields: [Field; Self::N]) -> Self {\n///         str::<Self::N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize {\n    let N: u32;\n\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let M: u32> Deserialize for str<M> {\n    let N: u32 = M;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        str::<Self::N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Associated Constants\n/// * `N` - The length of the Field array, known at compile time\n#[derive_via(derive_packable)]\npub trait Packable {\n    let N: u32;\n\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n\n#[test]\nunconstrained fn bounded_vec_serialization() {\n    // Test empty BoundedVec\n    let empty_vec: BoundedVec<Field, 3> = BoundedVec::from_array([]);\n    let serialized = empty_vec.serialize();\n    let deserialized = BoundedVec::<Field, 3>::deserialize(serialized);\n    assert_eq(empty_vec, deserialized);\n    assert_eq(deserialized.len(), 0);\n\n    // Test partially filled BoundedVec\n    let partial_vec: BoundedVec<[u32; 2], 3> = BoundedVec::from_array([[1, 2]]);\n    let serialized = partial_vec.serialize();\n    let deserialized = BoundedVec::<[u32; 2], 3>::deserialize(serialized);\n    assert_eq(partial_vec, deserialized);\n    assert_eq(deserialized.len(), 1);\n    assert_eq(deserialized.get(0), [1, 2]);\n\n    // Test full BoundedVec\n    let full_vec: BoundedVec<[u32; 2], 3> = BoundedVec::from_array([[1, 2], [3, 4], [5, 6]]);\n    let serialized = full_vec.serialize();\n    let deserialized = BoundedVec::<[u32; 2], 3>::deserialize(serialized);\n    assert_eq(full_vec, deserialized);\n    assert_eq(deserialized.len(), 3);\n    assert_eq(deserialized.get(0), [1, 2]);\n    assert_eq(deserialized.get(1), [3, 4]);\n    assert_eq(deserialized.get(2), [5, 6]);\n}\n"
    },
    "359": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/tuple_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\n// Create a slice of the given length with each element made from `f(i)` where `i` is the current index\ncomptime fn make_slice<Env, T>(length: u32, f: fn[Env](u32) -> T) -> [T] {\n    let mut slice = &[];\n    for i in 0..length {\n        slice = slice.push_back(f(i));\n    }\n    slice\n}\n\n// Implements Serialize and Deserialize for an arbitrary tuple type\ncomptime fn impl_serialize_for_tuple(_m: Module, length: u32) -> Quoted {\n    // `T0`, `T1`, `T2`\n    let type_names = make_slice(length, |i| f\"T{i}\".quoted_contents());\n\n    // `result0`, `result1`, `result2`\n    let result_names = make_slice(length, |i| f\"result{i}\".quoted_contents());\n\n    // `T0, T1, T2`\n    let field_generics = type_names.join(quote [,]);\n\n    // `<T0 as Serialize>::N + <T1 as Serialize>::N + <T2 as Serialize>::N`\n    let full_size_serialize = type_names\n        .map(|type_name| quote {\n        <$type_name as Serialize>::N\n    })\n        .join(quote [+]);\n\n    // `<T0 as Deserialize>::N + <T1 as Deserialize>::N + <T2 as Deserialize>::N`\n    let full_size_deserialize = type_names\n        .map(|type_name| quote {\n        <$type_name as Deserialize>::N\n    })\n        .join(quote [+]);\n\n    // `T0: Serialize, T1: Serialize, T2: Serialize,`\n    let serialize_constraints = type_names\n        .map(|field_name| quote {\n        $field_name: Serialize,\n    })\n        .join(quote []);\n\n    // `T0: Deserialize, T1: Deserialize, T2: Deserialize,`\n    let deserialize_constraints = type_names\n        .map(|field_name| quote {\n        $field_name: Deserialize,\n    })\n        .join(quote []);\n\n    // Statements to serialize each field\n    let serialized_fields = type_names\n        .mapi(|i, type_name| quote {\n        let serialized = self.$i.serialize();\n        for i in 0 .. <$type_name as Serialize>::N {\n            result[offset + i] = serialized[i];\n        }\n        offset += <$type_name as Serialize>::N;\n    })\n        .join(quote []);\n\n    // Statements to deserialize each field\n    let deserialized_fields = type_names\n        .mapi(|i, type_name| {\n            let result_name = result_names[i];\n            quote {\n            let mut element_fields = [0; <$type_name as Deserialize>::N];\n            for i in 0 .. <$type_name as Deserialize>::N {\n                element_fields[i] = fields[i + offset];\n            }\n            offset += <$type_name as Deserialize>::N;\n            let $result_name = $type_name::deserialize(element_fields);\n        }\n        })\n        .join(quote []);\n    let deserialize_results = result_names.join(quote [,]);\n\n    quote {\n        impl<$field_generics> Serialize for ($field_generics) where $serialize_constraints {\n            let N: u32 = $full_size_serialize;\n\n            fn serialize(self) -> [Field; Self::N] {\n                let mut result: [Field; Self::N] = std::mem::zeroed();\n                let mut offset = 0;\n                $serialized_fields\n                result\n            }\n        }\n\n        impl<$field_generics> Deserialize for ($field_generics) where $deserialize_constraints {\n            let N: u32 = $full_size_deserialize;\n\n            fn deserialize(fields: [Field; Self::N]) -> Self {\n                let mut offset = 0;\n                $deserialized_fields\n                ($deserialize_results)\n            }\n        }\n    }\n}\n\n// Keeping these manual impls. They are more efficient since they do not\n// require copying sub-arrays from any serialized arrays.\nimpl<T1> Serialize for (T1,)\nwhere\n    T1: Serialize,\n{\n    let N: u32 = <T1 as Serialize>::N;\n\n    fn serialize(self) -> [Field; Self::N] {\n        self.0.serialize()\n    }\n}\n\nimpl<T1> Deserialize for (T1,)\nwhere\n    T1: Deserialize,\n{\n    let N: u32 = <T1 as Deserialize>::N;\n\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        (T1::deserialize(fields),)\n    }\n}\n\n#[impl_serialize_for_tuple(2)]\n#[impl_serialize_for_tuple(3)]\n#[impl_serialize_for_tuple(4)]\n#[impl_serialize_for_tuple(5)]\n#[impl_serialize_for_tuple(6)]\nmod impls {\n    use crate::traits::{Deserialize, Serialize};\n}\n"
    },
    "360": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable for bool {\n    let N: u32 = BOOL_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> bool {\n        (fields[0] as u1) != 0\n    }\n}\n\nimpl Packable for u8 {\n    let N: u32 = U8_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable for u16 {\n    let N: u32 = U16_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable for u32 {\n    let N: u32 = U32_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable for u64 {\n    let N: u32 = U64_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable for u128 {\n    let N: u32 = U128_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable for Field {\n    let N: u32 = FIELD_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable for i8 {\n    let N: u32 = I8_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as u8 as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u8 as i8\n    }\n}\n\nimpl Packable for i16 {\n    let N: u32 = I16_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as u16 as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u16 as i16\n    }\n}\n\nimpl Packable for i32 {\n    let N: u32 = I32_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as u32 as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u32 as i32\n    }\n}\n\nimpl Packable for i64 {\n    let N: u32 = I64_PACKED_LEN;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        [self as u64 as Field]\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        fields[0] as u64 as i64\n    }\n}\n\nimpl<T, let M: u32> Packable for [T; M]\nwhere\n    T: Packable,\n{\n    let N: u32 = M * <T as Packable>::N;\n\n    #[inline_always]\n    fn pack(self) -> [Field; Self::N] {\n        let mut result: [Field; Self::N] = std::mem::zeroed();\n        for i in 0..M {\n            let serialized = self[i].pack();\n            for j in 0..<T as Packable>::N {\n                result[i * <T as Packable>::N + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    #[inline_always]\n    fn unpack(fields: [Field; Self::N]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; M] = std::mem::zeroed();\n        reader.read_struct_array::<T, <T as Packable>::N, M>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "361": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize for bool {\n    let N: u32 = BOOL_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize for bool {\n    let N: u32 = BOOL_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> bool {\n        fields[0] != 0\n    }\n}\n\nimpl Serialize for u8 {\n    let N: u32 = U8_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize for u8 {\n    let N: u32 = U8_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize for u16 {\n    let N: u32 = U16_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize for u16 {\n    let N: u32 = U16_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize for u32 {\n    let N: u32 = U32_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize for u32 {\n    let N: u32 = U32_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize for u64 {\n    let N: u32 = U64_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize for u64 {\n    let N: u32 = U64_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize for u128 {\n    let N: u32 = U128_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize for u128 {\n    let N: u32 = U128_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize for Field {\n    let N: u32 = FIELD_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self]\n    }\n}\n\nimpl Deserialize for Field {\n    let N: u32 = FIELD_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize for i8 {\n    let N: u32 = I8_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as u8 as Field]\n    }\n}\n\nimpl Deserialize for i8 {\n    let N: u32 = I8_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u8 as i8\n    }\n}\n\nimpl Serialize for i16 {\n    let N: u32 = I16_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as u16 as Field]\n    }\n}\n\nimpl Deserialize for i16 {\n    let N: u32 = I16_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u16 as i16\n    }\n}\n\nimpl Serialize for i32 {\n    let N: u32 = I32_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as u32 as Field]\n    }\n}\n\nimpl Deserialize for i32 {\n    let N: u32 = I32_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u32 as i32\n    }\n}\n\nimpl Serialize for i64 {\n    let N: u32 = I64_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        [self as u64 as Field]\n    }\n}\n\nimpl Deserialize for i64 {\n    let N: u32 = I64_SERIALIZED_LEN;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        fields[0] as u64 as i64\n    }\n}\n\nimpl<T, let M: u32> Serialize for [T; M]\nwhere\n    T: Serialize,\n{\n    let N: u32 = <T as Serialize>::N * M;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        let mut result: [Field; _] = std::mem::zeroed();\n        for i in 0..M {\n            let serialized_t = self[i].serialize();\n            for j in 0..<T as Serialize>::N {\n                result[i * <T as Serialize>::N + j] = serialized_t[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let M: u32> Deserialize for [T; M]\nwhere\n    T: Deserialize,\n{\n    let N: u32 = <T as Deserialize>::N * M;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; M] = std::mem::zeroed();\n        reader.read_struct_array::<T, <T as Deserialize>::N, M>(Deserialize::deserialize, result)\n    }\n}\n\nimpl<T> Serialize for Option<T>\nwhere\n    T: Serialize,\n{\n    let N: u32 = <T as Serialize>::N + 1;\n\n    #[inline_always]\n    fn serialize(self) -> [Field; Self::N] {\n        let mut result: [Field; Self::N] = std::mem::zeroed();\n\n        result[0] = if self.is_some() { 1 } else { 0 };\n\n        let value_serialized = self.unwrap_unchecked().serialize();\n        for i in 0..<T as Serialize>::N {\n            result[1 + i] = value_serialized[i];\n        }\n\n        result\n    }\n}\n\nimpl<T> Deserialize for Option<T>\nwhere\n    T: Deserialize,\n{\n    let N: u32 = <T as Deserialize>::N + 1;\n\n    #[inline_always]\n    fn deserialize(fields: [Field; Self::N]) -> Self {\n        if fields[0] == 1 {\n            let mut value_fields = [0; <T as Deserialize>::N];\n            for i in 0..<T as Deserialize>::N {\n                value_fields[i] = fields[1 + i];\n            }\n\n            Option::some(T::deserialize(value_fields))\n        } else {\n            Option::none()\n        }\n    }\n}\n\nmod test {\n    use crate::traits::{Deserialize, Serialize};\n\n    #[test]\n    fn u16_serialization() {\n        let a: u16 = 10;\n        assert_eq(a, u16::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i8_serialization() {\n        let a: i8 = -10;\n        assert_eq(a, i8::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i16_serialization() {\n        let a: i16 = -10;\n        assert_eq(a, i16::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i32_serialization() {\n        let a: i32 = -10;\n        assert_eq(a, i32::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i64_serialization() {\n        let a: i64 = -10;\n        assert_eq(a, i64::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn option_field_serialization() {\n        let opt_some = Option::some(5);\n        assert_eq(Option::<_>::deserialize(opt_some.serialize()), opt_some);\n\n        let opt_none = Option::none();\n        assert_eq(Option::<Field>::deserialize(opt_none.serialize()), opt_none);\n    }\n\n    #[test]\n    fn option_array_serialization() {\n        let opt_some = Option::some([2, 5]);\n        assert_eq(Option::<_>::deserialize(opt_some.serialize()), opt_some);\n\n        let opt_none = Option::none();\n        assert_eq(Option::<Field>::deserialize(opt_none.serialize()), opt_none);\n    }\n}\n"
    },
    "377": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_padded_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_padded_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod find_index;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped,\n    assert_array_appended_reversed_to_empty_dest, assert_array_appended_reversed_up_to_some_length,\n    assert_array_appended_scoped, assert_array_appended_to_empty_dest,\n    assert_array_appended_to_empty_dest_and_scoped, assert_array_appended_to_empty_dest_scoped,\n};\npub use assert_array_prepended::{assert_array_prepended, assert_array_prepended_up_to_some_length};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_padded_array::{\n    assert_sorted_transformed_i_padded_array_capped_size,\n    assert_sorted_transformed_padded_array_capped_size, validate_padded_items,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    get_split_order_hints::{get_split_order_hints_asc, SplitOrderHints},\n};\npub use assert_split_transformed_padded_arrays::assert_split_transformed_padded_arrays;\npub use find_index::{find_first_index, find_last_index};\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use get_sorted_tuple::{get_sorted_tuple, SortedTuple};\npub use sort_by_counter::sort_by_counter_asc;\n\nuse crate::traits::{Deserialize, Empty, Serialize};\nuse super::for_loop::{for_i_in_0_, for_i_only_in_0_};\n\n//**********************************************************************************\n// ARRAY\n//**********************************************************************************\n\n// TODO: Consider making this a part of the noir stdlib.\npub fn subarray<let SrcLen: u32, let DstLen: u32>(\n    src: [Field; SrcLen],\n    offset: u32,\n) -> [Field; DstLen] {\n    let mut dst: [Field; DstLen] = std::mem::zeroed();\n    for i in 0..DstLen {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper fn to create a subarray from a given array\n// TODO: rename to `slice`. This is not a splice.\n// TODO: looks very similar to `subarray` above.\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate.\n// If the element is not found, the function returns Option::none.\n// TODO: Consider making this a part of the noir stdlib.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> Option<u32> {\n    let mut index: Option<u32> = Option::none();\n    for i in 0..N {\n        if find(array[i]) {\n            index = Option::some(i);\n            break;\n        }\n    }\n    index\n}\n\n// Helper function to find the index of the first element (starting from the back) of an array that satisfies a given predicate.\n// If the element is not found, the function returns Option::none.\n// TODO: Consider making this a part of the noir stdlib.\npub unconstrained fn find_index_hint_in_reverse<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> Option<u32> {\n    let mut index: Option<u32> = Option::none();\n    for i in 0..N {\n        let j = N - i - 1;\n        if find(array[j]) {\n            index = Option::some(j);\n            break;\n        }\n    }\n    index\n}\n\n//**********************************************************************************\n// FREE ARRAY FUNCTIONS (to deprecate or make into methods of array wrappers)\n//**********************************************************************************\n\n/// Deprecated.\n///\n/// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n/// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n/// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if array[i].is_empty() {\n            seen_empty = true;\n        } else {\n            assert_eq(seen_empty, false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n/// Deprecated.\n///\n/// Helper function to count the number of non-empty elements in a validated array.\n/// Important: Only use it for validated arrays where validate_array(array) returns true,\n/// which ensures that:\n/// 1. All elements before the first empty element are non-empty\n/// 2. All elements after and including the first empty element are empty\n/// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let maybe_length = unsafe { find_index_hint(array, |elem: T| elem.is_empty()) };\n\n    let mut length = N;\n    if maybe_length.is_some() {\n        length = maybe_length.unwrap_unchecked();\n\n        array[length].assert_empty(\"Expected array empty\");\n\n        if length != 0 {\n            assert(!array[length - 1].is_empty());\n        }\n    }\n\n    length\n}\n\n// Returns an array length defined by fully trimming _all_ \"empty\" items\n// from the RHS.\npub unconstrained fn trimmed_array_length_hint<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty,\n{\n    let maybe_index_of_last_nonempty =\n        find_index_hint_in_reverse(array, |elem: T| !elem.is_empty());\n    let length: u32 = if maybe_index_of_last_nonempty.is_some() {\n        1 + maybe_index_of_last_nonempty.unwrap_unchecked()\n    } else {\n        0\n    };\n    length\n}\n\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !elem.is_empty() {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !elem.is_empty() {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n/// Helper function to convert a validated array to BoundedVec.\n/// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Returns the number of consecutive elements at the start of the array for which the predicate returns false.\n// This function ensures that any element after the first matching element (predicate returns true) also matches the predicate.\npub fn array_length_until<T, let N: u32, Env>(array: [T; N], predicate: fn[Env](T) -> bool) -> u32 {\n    let mut length = 0;\n    let mut stop = false;\n    for i in 0..N {\n        if predicate(array[i]) {\n            stop = true;\n        } else {\n            assert(\n                stop == false,\n                \"matching element found after already encountering a non-matching element\",\n            );\n            length += 1;\n        }\n    }\n    length\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to check if an array is padded with a given value from a given index.\n// Different to padded_array_length in that it allows the elements before the given index to be the same as the padded value.\npub fn array_padded_with<T, let N: u32>(array: [T; N], from_index: u32, padded_with: T) -> bool\nwhere\n    T: Eq,\n{\n    let mut is_valid = true;\n    let mut should_check = false;\n    for i in 0..N {\n        should_check |= i == from_index;\n        is_valid &= !should_check | (array[i] == padded_with);\n    }\n    is_valid\n}\n\n//**********************************************************************************\n// ARRAY WRAPPERS\n//**********************************************************************************\n\n/*\n *\n *\n *                                                                                                    \n *                          |-----------------------------------------|------------------------------| \n *                          | LHS                                     | RHS                          |\n *                          |-----------------------------------------|------------------------------|\n *       ClaimedLengthArray | Interspersed 0s possible.               | Unvalidated.                 |\n *                          | Possibly not fully trimmed.             | Nonempty elements possible.  |\n *                          |-----------------------------------------|------------------------------|\n *            EmptyRHSArray | Interspersed 0s possible.               | All 0s (validated).          |\n *                          | Possibly not fully trimmed.             |                              |\n *                          |-----------------------------------------|------------------------------|\n *             TrimmedArray | Interspersed 0s possible.               | All 0s (validated)           |\n *                          | Last lhs element validated as nonempty. |                              |\n *                          | (I.e. fully trimmed)                    |                              |\n *                          |-----------------------------------------|------------------------------|\n *        DenseTrimmedArray | Dense (validated).                      | All 0s (validated)           |\n *                          |-----------------------------------------|------------------------------|\n *\n *\n *                          | What guarantees do we have?                      |\n *                          |--------|--------|--------------------------------| \n *                          | Dense? | RHS    | Length vs Fully Trimmed Length |\n *                          |--------|--------|--------------------------------|\n *       ClaimedLengthArray | ?      | ?      | ?                              |\n *                          |        |        |                                |\n *                          |--------|--------|--------------------------------|\n *            EmptyRHSArray | ?      | All 0s | Length >= Fully Trimmed Length |\n *                          |        |        |                                |\n *                          |--------|--------|--------------------------------|\n *             TrimmedArray | ?      | All 0s | Length == Fully Trimmed Length |\n *                          |        |        |                                |\n *                          |        |        |                                |\n *                          |--------|--------|--------------------------------|\n *        DenseTrimmedArray | Yes    | All 0s | Length == Fully Trimmed Length |\n *                          |--------|--------|--------------------------------|\n *\n *\n * An ClaimedLengthArray is distinct from a regular array [T; N], because it carries a length.\n * \n */\n\n/// ClaimedLengthArray - An array interpreted by Kernel circuits.\n/// Its `length` is merely a claim that must eventually be validated.\n/// Validation must include:\n/// - Asserting all items to the LHS of the length are nonempty (dense).\n/// - Asserting all items to the RHS of the length are empty.\n#[derive(Deserialize, Serialize)]\npub struct ClaimedLengthArray<T, let N: u32> {\n    pub array: [T; N],\n    pub length: u32,\n}\n\nimpl<T, let N: u32> ClaimedLengthArray<T, N>\nwhere\n    T: Empty,\n{\n    // No constructor. Append to an empty one.\n\n    // For constrained append functions, see the dedicated file: assert_array_appended.nr\n\n    pub fn push(&mut self, item: T) {\n        assert(self.length != N, \"Array full\");\n\n        let next_index = self.length;\n        self.array[next_index] = item;\n        self.length += 1;\n    }\n\n    pub fn assert_dense_trimmed(self) {\n        for_i_in_0_(\n            self.length,\n            self.array.len(),\n            |i| {\n                assert(!self.array[i].is_empty(), \"LHS of input array is not dense\")\n                // Requires Noir #9002:\n                // self.array[i].assert_not_empty(\"LHS of input array is not dense\"); // LHS of input array is not dense.\n            },\n            |i| self.array[i].assert_empty(\"RHS of input array is not empty\"),\n            false,\n        );\n    }\n\n    pub fn assert_empty<let S: u32>(self, msg: str<S>) {\n        for i in 0..N {\n            self.array[i].assert_empty(msg);\n        }\n        assert_eq(self.length, 0);\n    }\n\n    pub unconstrained fn push_hint(&mut self, item: T) {\n        assert(self.length != N, \"Array full\");\n\n        let mut next_index = self.length;\n        self.array[next_index] = item;\n        self.length += 1;\n    }\n\n    pub unconstrained fn pop_hint(&mut self) -> T {\n        assert(self.length != 0, \"Array empty\");\n\n        let mut top_index = self.length - 1;\n        let popped_item = self.array[top_index];\n        self.array[top_index] = T::empty();\n        self.length -= 1;\n        popped_item\n    }\n\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        // We pass `false`, because by construction, we should know that self.length <= self.array.len().\n        for_i_only_in_0_(self.length, self.array.len(), |i| f(self.array[i]), false);\n    }\n\n    // E.g.\n    // dest.for_each_i(|source_item, i| { assert_eq(dest.array[i], source_item, \"bad copy\"); })\n    pub fn for_each_i<Env>(self, f: fn[Env](T, u32) -> ()) {\n        // We pass `false`, because by construction, we should know that self.length <= self.array.len().\n        for_i_only_in_0_(\n            self.length,\n            self.array.len(),\n            |i| f(self.array[i], i),\n            false,\n        );\n    }\n\n    pub fn from_bounded_vec(vec: BoundedVec<T, N>) -> Self {\n        Self { array: vec.storage(), length: vec.len() }\n    }\n}\n\n// TODO: compiler bug. No idea why this is needed, if we have #[derive(Eq)] above the struct definition.\nimpl<T, let N: u32> Eq for ClaimedLengthArray<T, N>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        (self.array == other.array) & (self.length == other.length)\n    }\n}\n\nimpl<T, let N: u32> Empty for ClaimedLengthArray<T, N>\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        Self { array: [T::empty(); N], length: 0 }\n    }\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nfn test_array_length_until() {\n    let array = [11, 22, 33, 44, 55];\n    assert_eq(array_length_until(array, |x| x == 55), 4);\n    assert_eq(array_length_until(array, |x| x == 56), 5);\n    assert_eq(array_length_until(array, |x| x > 40), 3);\n    assert_eq(array_length_until(array, |x| x > 10), 0);\n}\n\n#[test(should_fail_with = \"matching element found after already encountering a non-matching element\")]\nfn test_array_length_until_non_consecutive_fails() {\n    let array = [1, 1, 0, 1, 0];\n    let _ = array_length_until(array, |x| x == 0);\n}\n\n#[test(should_fail_with = \"matching element found after already encountering a non-matching element\")]\nfn test_array_length_until_first_non_matching_fails() {\n    let array = [1, 0, 0, 0, 0];\n    let _ = array_length_until(array, |x| x == 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let maybe_index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(maybe_index.unwrap_unchecked(), 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let maybe_index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(maybe_index.is_none(), true);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test]\nfn test_array_padded_with() {\n    let array = [11, 22, 33, 44, 44];\n    assert_eq(array_padded_with(array, 0, 44), false);\n    assert_eq(array_padded_with(array, 1, 44), false);\n    assert_eq(array_padded_with(array, 2, 44), false);\n    assert_eq(array_padded_with(array, 3, 44), true);\n    assert_eq(array_padded_with(array, 4, 44), true);\n    assert_eq(array_padded_with(array, 4, 33), false);\n    assert_eq(array_padded_with(array, 5, 44), true); // Index out of bounds.\n    assert_eq(array_padded_with(array, 0, 11), false);\n}\n"
    },
    "378": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr",
      "source": "pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO: This currently only exists to aid point compression in compress_to_blob_commitment().\n// Once compression is part of BigCurve it can either be removed or optimized to be used elsewhere.\npub fn byte_to_bits_be(byte: u8) -> [u1; 8] {\n    let mut mut_byte = byte;\n    let mut bits: [u1; 8] = [0; 8];\n    for i in 0..8 {\n        bits[7 - i] = (mut_byte & 1) as u1;\n        mut_byte >>= 1;\n    }\n    bits\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"
    },
    "381": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_u64(&mut self) -> u64 {\n        self.read() as u64\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() != 0\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert_eq(self.offset, self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "392": {
      "path": "/Users/ngjupeng/nargo/github.com/noir-lang/keccak256/v0.1.0/src/keccak256.nr",
      "source": "mod tests;\n\nuse std::runtime::is_unconstrained;\nuse std::hash::keccak::keccakf1600;\n\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\nglobal NUM_KECCAK_LANES: u32 = 25;\n\n#[no_predicates]\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\n    assert(N >= message_size);\n\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\n    if is_unconstrained() {\n        for i in 0..message_size {\n            block_bytes[i] = input[i];\n        }\n    } else {\n        for i in 0..N {\n            if i < message_size {\n                block_bytes[i] = input[i];\n            }\n        }\n    }\n\n    //1. format_input_lanes\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    //maximum number of bytes to hash\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\n\n    block_bytes[message_size] = 1;\n    block_bytes[real_blocks_bytes - 1] = 0x80;\n\n    // populate a vector of 64-bit limbs from our byte array\n    let mut sliced_buffer =\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\n    for i in 0..sliced_buffer.len() {\n        let limb_start = WORD_SIZE * i;\n\n        let mut sliced = 0;\n        let mut v = 1;\n        for k in 0..WORD_SIZE {\n            sliced += v * (block_bytes[limb_start + k] as Field);\n            v *= 256;\n        }\n\n        sliced_buffer[i] = sliced as u64;\n    }\n\n    //2. sponge_absorb\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\n    // thus allowing us to simplify the loop body.\n    if is_unconstrained() {\n        for i in 0..real_max_blocks {\n            if (i == 0) {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = sliced_buffer[j];\n                }\n            } else {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n            }\n            state = keccakf1600(state);\n        }\n    } else {\n        // `real_max_blocks` is guaranteed to at least be `1`\n        // We peel out the first block as to avoid a conditional inside of the loop.\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\n        for j in 0..LIMBS_PER_BLOCK {\n            state[j] = sliced_buffer[j];\n        }\n        state = keccakf1600(state);\n        for i in 1..max_blocks {\n            if i < real_max_blocks {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n                state = keccakf1600(state);\n            }\n        }\n    }\n\n    //3. sponge_squeeze\n    let mut result = [0; 32];\n    for i in 0..4 {\n        let lane = state[i] as Field;\n        let lane_le: [u8; 8] = lane.to_le_bytes();\n        for j in 0..8 {\n            result[8 * i + j] = lane_le[j];\n        }\n    }\n    result\n}\n"
    },
    "414": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/uint-note/src/uint_note.nr",
      "source": "use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    history::nullifier_inclusion::ProveNullifierInclusion,\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    messages::logs::note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{\n            GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER,\n            GENERATOR_INDEX__PARTIAL_NOTE_VALIDITY_COMMITMENT, PRIVATE_LOG_SIZE_IN_FIELDS,\n        },\n        hash::{compute_siloed_nullifier, poseidon2_hash_with_separator},\n        traits::{Deserialize, FromField, Hash, Packable, Serialize, ToField},\n    },\n};\n\n// UintNote supports partial notes, i.e. the ability to create an incomplete note in private, hiding certain values (the\n// owner, storage slot and randomness), and then completing the note in public with the ones missing (the amount).\n// Partial notes are being actively developed and are not currently fully supported via macros, and so we rely on the\n// #[custom_note] macro to implement it manually, resulting in some boilerplate. This is expected to be unnecessary once\n// macro support is expanded.\n\n/// A private note representing a numeric value associated to an account (e.g. a token balance).\n#[derive(Eq, Serialize, Packable)]\n#[custom_note]\npub struct UintNote {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintPartialNotePrivateContent, and\n    //   b) have the public field at the end\n    // Correct ordering is checked by the tests in this module.\n\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The number stored in the note.\n    value: u128,\n}\n\nimpl NoteHash for UintNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        // Partial notes can be implemented by having the note hash be either the result of multiscalar multiplication\n        // (MSM), or two rounds of poseidon. MSM results in more constraints and is only required when multiple variants\n        // of partial notes are supported. Because UintNote has just one variant (where the value is public), we use\n        // poseidon instead.\n\n        // We must compute the same note hash as would be produced by a partial note created and completed with the same\n        // values, so that notes all behave the same way regardless of how they were created. To achieve this, we\n        // perform both steps of the partial note computation.\n\n        // First we create the partial note from a commitment to the private content (including storage slot).\n        let private_content =\n            UintPartialNotePrivateContent { owner: self.owner, randomness: self.randomness };\n        let partial_note = PartialUintNote {\n            commitment: private_content.compute_partial_commitment(storage_slot),\n        };\n\n        // Then compute the completion note hash. In a real partial note this step would be performed in public.\n        partial_note.compute_complete_note_hash(self.value)\n    }\n\n    // The nullifiers are nothing special - this is just the canonical implementation that would be injected by the\n    // #[note] macro.\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: u128, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness }\n    }\n\n    pub fn get_value(self) -> u128 {\n        self.value\n    }\n\n    pub fn get_owner(self) -> AztecAddress {\n        self.owner\n    }\n\n    /// Creates a partial note that will hide the owner and storage slot but not the value, since the note will be later\n    /// completed in public. This is a powerful technique for scenarios in which the value cannot be known in private\n    /// (e.g. because it depends on some public state, such as a DEX).\n    ///\n    /// This function inserts a partial note validity commitment into the nullifier tree to be later on able to verify\n    /// that the partial note and completer are legitimate. See function docs of `compute_validity_commitment` for more\n    /// details.\n    ///\n    /// Each partial note should only be used once, since otherwise multiple notes would be linked together and known to\n    /// belong to the same owner.\n    ///\n    /// As part of the partial note creation process, a log will be sent to `recipient` so that they can discover the\n    /// note. `recipient` will typically be the same as `owner`.\n    pub fn partial(\n        owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        recipient: AztecAddress,\n        completer: AztecAddress,\n    ) -> PartialUintNote {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        // We create a commitment to the private data, which we then use to construct the log we send to the recipient.\n        let commitment = UintPartialNotePrivateContent { owner, randomness }\n            .compute_partial_commitment(storage_slot);\n\n        // Our partial note log encoding scheme includes a field with the tag of the public completion log, and we use\n        // the commitment as the tag. This is good for multiple reasons:\n        //  - the commitment is uniquely tied to this partial note\n        //  - the commitment is already public information, so we're not revealing anything else\n        //  - we don't need to create any additional information, private or public, for the tag\n        //  - other contracts cannot impersonate us and emit logs with the same tag due to public log siloing\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n\n        let encrypted_log =\n            note::compute_partial_note_log(private_log_content, storage_slot, recipient);\n        // Regardless of the original content size, the log is padded with random bytes up to\n        // `PRIVATE_LOG_SIZE_IN_FIELDS` to prevent leaking information about the actual size.\n        let length = encrypted_log.len();\n        context.emit_private_log(encrypted_log, length);\n\n        let partial_note = PartialUintNote { commitment };\n\n        // Now we compute the validity commitment and push it to the nullifier tree. It can be safely pushed to\n        // the nullifier tree since it uses its own separator, making collisions with actual note nullifiers\n        // practically impossible.\n        let validity_commitment = partial_note.compute_validity_commitment(completer);\n        context.push_nullifier(validity_commitment);\n\n        partial_note\n    }\n}\n\n/// The private content of a partial UintNote, i.e. the fields that will remain private. All other note fields will be\n/// made public.\n#[derive(Packable)]\nstruct UintPartialNotePrivateContent {\n    // The ordering of these fields is important given that it must match that of UintNote.\n    // Correct ordering is checked by the tests in this module.\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl UintPartialNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n        // Here we commit to all private values, including the storage slot.\n        poseidon2_hash_with_separator(\n            self.pack().concat([storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\n#[derive(Packable)]\nstruct PrivateUintPartialNotePrivateLogContent {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintNote, and\n    //   b) have the public log tag at the beginning\n    // Correct ordering is checked by the tests in this module.\n    public_log_tag: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NoteType for PrivateUintPartialNotePrivateLogContent {\n    fn get_id() -> Field {\n        UintNote::get_id()\n    }\n}\n\n/// A partial instance of a UintNote. This value represents a private commitment to the owner, randomness and storage\n/// slot, but the value field has not yet been set. A partial note can be completed in public with the `complete`\n/// function (revealing the value to the public), resulting in a UintNote that can be used like any other one (except\n/// of course that its value is known).\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct PartialUintNote {\n    commitment: Field,\n}\n\nglobal NOTE_COMPLETION_LOG_LENGTH: u32 = 2;\n\nimpl PartialUintNote {\n    /// Completes the partial note, creating a new note that can be used like any other UintNote.\n    pub fn complete(self, context: &mut PublicContext, completer: AztecAddress, value: u128) {\n        // A note with a value of zero is valid, but we cannot currently complete a partial note with such a value\n        // because this will result in the completion log having its last field set to 0. Public logs currently do not\n        // track their length, and so trailing zeros are simply trimmed. This results in the completion log missing its\n        // last field (the value), and note discovery failing.\n        // TODO(#11636): remove this\n        assert(value != 0, \"Cannot complete a PartialUintNote with a value of 0\");\n\n        // We verify that the partial note we're completing is valid (i.e. completer is correct, it uses the correct\n        // state variable's storage slot, and it is internally consistent).\n        let validity_commitment = self.compute_validity_commitment(completer);\n        assert(\n            context.nullifier_exists(validity_commitment, context.this_address()),\n            \"Invalid partial note or completer\",\n        );\n\n        // We need to do two things:\n        //  - emit a public log containing the public fields (the value). The contract will later find it by searching\n        //  for the expected tag (which is simply the partial note commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_public_log(self.compute_note_completion_log(value));\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    /// Completes the partial note, creating a new note that can be used like any other UintNote. Same as `complete`\n    /// function but works from private context.\n    pub fn complete_from_private(\n        self,\n        context: &mut PrivateContext,\n        completer: AztecAddress,\n        value: u128,\n    ) {\n        // We verify that the partial note we're completing is valid (i.e. completer is correct, it uses the correct\n        // state variable's storage slot, and it is internally consistent).\n        let validity_commitment = self.compute_validity_commitment(completer);\n        // `prove_nullifier_inclusion` function expects the nullifier to be siloed (hashed with the address of\n        // the contract that emitted the nullifier) as it checks the value directly against the nullifier tree and all\n        // the nullifiers in the tree are siloed by the protocol.\n        let siloed_validity_commitment =\n            compute_siloed_nullifier(context.this_address(), validity_commitment);\n        context.get_block_header().prove_nullifier_inclusion(siloed_validity_commitment);\n\n        // We need to do two things:\n        //  - emit an unencrypted log containing the public fields (the value) via the private log channel. The\n        //  contract will later find it by searching for the expected tag (which is simply the partial note\n        //  commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_private_log(\n            self.compute_note_completion_log_padded_for_private_log(value),\n            NOTE_COMPLETION_LOG_LENGTH,\n        );\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    /// Computes a validity commitment for this partial note. The commitment cryptographically binds the note's private\n    /// data with the designated completer address. When the note is later completed in public execution, we can load\n    /// this commitment from the nullifier tree and verify that both the partial note (e.g. that the storage slot\n    /// corresponds to the correct owner, and that we're using the correct state variable) and completer are\n    /// legitimate.\n    pub fn compute_validity_commitment(self, completer: AztecAddress) -> Field {\n        poseidon2_hash_with_separator(\n            [self.commitment, completer.to_field()],\n            GENERATOR_INDEX__PARTIAL_NOTE_VALIDITY_COMMITMENT,\n        )\n    }\n\n    fn compute_note_completion_log(self, value: u128) -> [Field; NOTE_COMPLETION_LOG_LENGTH] {\n        // The first field of this log must be the tag that the recipient of the partial note private field logs\n        // expects, which is equal to the partial note commitment.\n        [self.commitment, value.to_field()]\n    }\n\n    fn compute_note_completion_log_padded_for_private_log(\n        self,\n        value: u128,\n    ) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS] {\n        let note_completion_log = self.compute_note_completion_log(value);\n        let padding = [0; PRIVATE_LOG_SIZE_IN_FIELDS - NOTE_COMPLETION_LOG_LENGTH];\n        note_completion_log.concat(padding)\n    }\n\n    fn compute_complete_note_hash(self, value: u128) -> Field {\n        // Here we finalize the note hash by including the (public) value into the partial note commitment. Note that we\n        // use the same generator index as we used for the first round of poseidon - this is not an issue.\n        poseidon2_hash_with_separator(\n            [self.commitment, value.to_field()],\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\nimpl ToField for PartialUintNote {\n    fn to_field(self) -> Field {\n        self.commitment\n    }\n}\n\nimpl FromField for PartialUintNote {\n    fn from_field(field: Field) -> Self {\n        Self { commitment: field }\n    }\n}\n\nmod test {\n    use super::{\n        PartialUintNote, PrivateUintPartialNotePrivateLogContent, UintNote,\n        UintPartialNotePrivateContent,\n    };\n    use dep::aztec::{\n        note::note_interface::NoteHash,\n        protocol_types::{address::AztecAddress, traits::{Deserialize, FromField, Packable}},\n        utils::array::subarray,\n    };\n\n    global value: u128 = 17;\n    global randomness: Field = 42;\n    global owner: AztecAddress = AztecAddress::from_field(50);\n    global storage_slot: Field = 13;\n\n    #[test]\n    fn note_hash_matches_completed_partial_note_hash() {\n        // Tests that a UintNote has the same note hash as a PartialUintNote created and then completed with the same\n        // private values. This requires for the same hash function to be used in both flows, with the fields in the\n        // same order.\n\n        let note = UintNote { value, randomness, owner };\n        let note_hash = note.compute_note_hash(storage_slot);\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n\n        let partial_note = PartialUintNote {\n            commitment: partial_note_private_content.compute_partial_commitment(storage_slot),\n        };\n        let completed_partial_note_hash = partial_note.compute_complete_note_hash(value);\n\n        assert_eq(note_hash, completed_partial_note_hash);\n    }\n\n    #[test]\n    fn unpack_from_partial_note_encoding() {\n        // Tests that the packed representation of a regular UintNote can be reconstructed given the partial note\n        // private fields log and the public completion log, ensuring the recipient will be able to compute the\n        // completed note as if it were a regular UintNote.\n\n        let note = UintNote { value, randomness, owner };\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n        let commitment = partial_note_private_content.compute_partial_commitment(storage_slot);\n\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n        // The following is a misuse of the `deserialize` function, but this is just a test and it's better than\n        // letting devs manually construct it when they shouldn't be able to.\n        let partial_note = PartialUintNote::deserialize([commitment]);\n\n        // The first field of the partial note private content is the public completion log tag, so it should match the\n        // first field of the public log.\n        assert_eq(\n            private_log_content.pack()[0],\n            partial_note.compute_note_completion_log(value)[0],\n        );\n\n        // Then we extract all fields except the first of both logs (i.e. the public log tag), and combine them to\n        // produce the note's packed representation. This requires that the members of the intermediate structs are in\n        // the same order as in UintNote.\n        let private_log_without_public_tag: [_; 2] = subarray(private_log_content.pack(), 1);\n        let public_log_without_tag: [_; 1] =\n            subarray(partial_note.compute_note_completion_log(value), 1);\n\n        assert_eq(private_log_without_public_tag.concat(public_log_without_tag), note.pack());\n    }\n}\n"
    },
    "42": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "43": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "46": {
      "path": "std/slice.nr",
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n"
    },
    "5": {
      "path": "std/cmp.nr",
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { $crate::cmp::Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        if result {\n            for i in 0..self.len() {\n                result &= self[i].eq(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::cmp::Ord };\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> $crate::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == $crate::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = $crate::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let self_len = self.len();\n        let other_len = other.len();\n        let min_len = if self_len < other_len {\n            self_len\n        } else {\n            other_len\n        };\n\n        let mut result = Ordering::equal();\n        for i in 0..min_len {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self_len.cmp(other_len)\n        }\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use super::{Eq, max, min, Ord};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0_u64, 1), 0);\n        assert_eq(min(0_u64, 0), 0);\n        assert_eq(min(1_u64, 1), 1);\n        assert_eq(min(255_u8, 0), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0_u64, 1), 1);\n        assert_eq(max(0_u64, 0), 0);\n        assert_eq(max(1_u64, 1), 1);\n        assert_eq(max(255_u8, 0), 255);\n    }\n\n    #[test]\n    fn correctly_handles_unequal_length_slices() {\n        let slice_1 = &[0, 1, 2, 3];\n        let slice_2 = &[0, 1, 2];\n        assert(!slice_1.eq(slice_2));\n    }\n\n    #[test]\n    fn lexicographic_ordering_for_slices() {\n        assert(&[2_u32].cmp(&[1_u32, 1_u32, 1_u32]) == super::Ordering::greater());\n        assert(&[1_u32, 2_u32].cmp(&[1_u32, 2_u32, 3_u32]) == super::Ordering::less());\n    }\n}\n"
    },
    "50": {
      "path": "/Users/ngjupeng/quantum3labs/aztec/wormhole/aztec/contracts/src/main.nr",
      "source": "use dep::aztec::macros::aztec;\nmod structs;\n\n/*\nAztec Wormhole contract for the Wormhole bridge on Aztec testnet.\n\nThis contract is responsible for:\n- Parsing and verifying Wormhole VAA messages\n- Managing guardian sets and their expiration\n- Publishing messages to the Wormhole network\n- Receiving messages from the Wormhole network\n\nTo deploy this contract, follow the instructions in the deploy.md file, or use the deploy.sh script.\n\nTODO: Fix hardcoded addresses in private functions.\n*/\n\n#[aztec]\npub contract Wormhole {\n    use crate::structs::{Guardian, Provider, Signature, WormholeStorage};\n    use dep::keccak256::keccak256;\n\n    use dep::aztec::{\n        macros::{functions::{initializer, internal, private, public, utility}, storage::storage},\n        state_vars::{map::Map, public_mutable::PublicMutable, delayed_public_mutable::DelayedPublicMutable},\n        protocol_types::{\n            address::AztecAddress,\n            traits::ToField,\n        },\n    };\n\n    use dep::token::Token;\n\n    // ============================================================================\n    // STORAGE STRUCTURE\n    // ============================================================================\n\n    #[storage]\n    struct Storage<Context> {\n        state: PublicMutable<WormholeStorage, Context>,\n        sequences: Map<AztecAddress, PublicMutable<u64, Context>, Context>,\n        owner: PublicMutable<AztecAddress, Context>,\n        receiver_address: DelayedPublicMutable<AztecAddress, 87000, Context>, // Delay slightly over 1 day.\n        token_address: DelayedPublicMutable<AztecAddress, 87000, Context>, // Delay slightly over 1 day.\n        guardian_1: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_2: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_3: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_4: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_5: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_6: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_7: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_8: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_9: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_10: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_11: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_12: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_13: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_14: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_15: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_16: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_17: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_18: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        guardian_19: Map<u32, PublicMutable<Guardian, Context>, Context>,\n        current_guardian_set_index: Map<u32, PublicMutable<u64, Context>, Context>,\n    }\n\n    // ============================================================================\n    // CONTRACT INITIALIZATION\n    // ============================================================================\n\n    #[public]\n    #[initializer]\n    fn init(\n        chain_id: u16,\n        evm_chain_id: u16,\n        owner: AztecAddress,\n        receiver_address: AztecAddress,\n        token_address: AztecAddress,\n    ) {\n        let provider: Provider = Provider { chain_id, evm_chain_id };\n        storage.state.write(WormholeStorage::init(provider));\n        storage.owner.write(owner);\n        storage.receiver_address.schedule_value_change(receiver_address);\n        storage.token_address.schedule_value_change(token_address);\n        storage.current_guardian_set_index.at(0).write(18_446_744_073_709_551_615);\n    }\n\n    // ============================================================================\n    // CORE FUNCTIONALITY - MESSAGE PUBLISHING\n    // ============================================================================\n\n    #[public]\n    fn publish_message_in_public(\n        nonce: u64,\n        payloads: [[u8; 31]; 8],\n        message_fee: u128,\n        consistency: u8,\n        from: AztecAddress,\n        token_nonce: Field,\n    ) -> u64 {\n        assert(storage.state.read().message_fee <= message_fee, \"insufficient fee\");\n\n        let receiver_address = storage.receiver_address.get_current_value();\n        let token_address = storage.token_address.get_current_value();\n\n        // Only transfer tokens if fee is greater than 0\n        if message_fee > 0 {\n            let _ = Token::at(token_address)\n                .transfer_in_public(from, receiver_address, message_fee, token_nonce)\n                .call(&mut context);\n        }\n\n        let sequence = storage.sequences.at(context.msg_sender()).read();\n        storage.sequences.at(context.msg_sender()).write(sequence + 1);\n\n        let msg: [Field; 13] = [\n            context.msg_sender().to_field(),\n            sequence as Field,\n            nonce as Field,\n            consistency as Field,\n            context.timestamp() as Field,\n            Field::from_le_bytes(payloads[0]),\n            Field::from_le_bytes(payloads[1]),\n            Field::from_le_bytes(payloads[2]),\n            Field::from_le_bytes(payloads[3]),\n            Field::from_le_bytes(payloads[4]),\n            Field::from_le_bytes(payloads[5]),\n            Field::from_le_bytes(payloads[6]),\n            Field::from_le_bytes(payloads[7]),\n        ];\n\n        context.emit_public_log(msg);\n        sequence\n    }\n\n    #[private]\n    fn publish_message_in_private(\n        nonce: u64,\n        payloads: [[u8; 31]; 8],\n        message_fee: u128,\n        consistency: u8,\n        from: AztecAddress,\n        token_nonce: Field,\n    ) {\n        assert(0 <= message_fee, \"insufficient fee\");\n\n        let receiver_address = storage.receiver_address.get_current_value();\n        let token_address = storage.token_address.get_current_value();\n\n        // Only transfer tokens if fee is greater than 0\n        if message_fee > 0 {\n            let _ = Token::at(token_address)\n                .transfer_in_private(from, receiver_address, message_fee, token_nonce)\n                .call(&mut context);\n        }\n\n        Wormhole::at(context.this_address())._publish_message(nonce, payloads, consistency).enqueue(\n            &mut context,\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn _publish_message(nonce: u64, payloads: [[u8; 31]; 8], consistency: u8) -> u64 {\n        let sequence = storage.sequences.at(context.msg_sender()).read();\n        storage.sequences.at(context.msg_sender()).write(sequence + 1);\n\n        let msg: [Field; 13] = [\n            context.msg_sender().to_field(),\n            sequence as Field,\n            nonce as Field,\n            consistency as Field,\n            context.timestamp() as Field,\n            Field::from_le_bytes(payloads[0]),\n            Field::from_le_bytes(payloads[1]),\n            Field::from_le_bytes(payloads[2]),\n            Field::from_le_bytes(payloads[3]),\n            Field::from_le_bytes(payloads[4]),\n            Field::from_le_bytes(payloads[5]),\n            Field::from_le_bytes(payloads[6]),\n            Field::from_le_bytes(payloads[7]),\n        ];\n\n        context.emit_public_log(msg);\n        sequence\n    }\n\n    // ============================================================================\n    // CORE FUNCTIONALITY - VAA VERIFICATION\n    // ============================================================================\n    \n    #[utility]\n    unconstrained fn parse_vaa_unconstrained(\n        bytes: [u8; 2000],\n        actual_length: u32,\n    ) -> (u32, u8, [[u8; 66]; 13], [u8; 1860], u32) {\n        let guardian_set_index: u32 = (bytes[1] as u32) << 24\n            | (bytes[2] as u32) << 16\n            | (bytes[3] as u32) << 8\n            | (bytes[4] as u32);\n\n        let signatures_len = bytes[5];\n\n        // Parse signatures\n        let mut signatures = [[0; 66]; 13];\n        for i in 0..13 {\n            if i < signatures_len {\n                let sig_start: u32 = 6 + (i as u32 * 66);\n                for j in 0..66 {\n                    let byte_index: u32 = sig_start + j as u32;\n                    if byte_index < actual_length {\n                        signatures[i as u32][j] = bytes[byte_index];\n                    }\n                }\n            }\n        }\n\n        // Calculate where the body starts\n        let body_start: u32 = 6 + (signatures_len as u32 * 66);\n\n        // Calculate actual body length\n        let body_length: u32 = actual_length - body_start;\n\n        let mut body_bytes = [0; 1860];\n        for i in 0..1860 {\n            if i < body_length {\n                body_bytes[i] = bytes[body_start + i];\n            }\n        }\n\n        (guardian_set_index, signatures_len, signatures, body_bytes, body_length)\n    }\n\n    #[utility]\n    unconstrained fn compute_vaa_hash_unconstrained(\n        body_bytes: [u8; 1860],\n        body_length: u32,\n    ) -> [u8; 32] {\n        // Extract only the actual body content\n        let mut actual_body = [0; 1860];\n        for i in 0..body_length {\n            actual_body[i] = body_bytes[i];\n        }\n\n        // Double hash as per Wormhole spec\n        let hash: [u8; 32] = keccak256(actual_body, body_length);\n        let double_hash: [u8; 32] = keccak256(hash, 32);\n\n        double_hash\n    }\n\n    #[contract_library_method]\n    pub unconstrained fn verify_vaa_unconstrained(\n        bytes: [u8; 2000],\n        actual_length: u32,\n    ) -> ([[u8; 32]; 13], [[u8; 32]; 13], [[u8; 64]; 13], [u8; 32], u8) {\n        let version = bytes[0];\n        assert(version == 1, \"VM version incompatible\");\n\n        let (_, signatures_len, signatures, body_bytes, body_length) =\n            parse_vaa_unconstrained(bytes, actual_length);\n\n        assert(signatures_len >= 1, \"Need at least 1 signature\");\n        assert(signatures_len <= 13, \"Too many signatures\");\n\n        // Compute the VAA hash\n        let hash = compute_vaa_hash_unconstrained(body_bytes, body_length);\n\n        let guardian = crate::structs::Guardian::new(\n            [\n                0x13, 0x94, 0x7b, 0xd4, 0x8b, 0x18, 0xe5, 0x3f, 0xda, 0xee, 0xe7, 0x7f, 0x34, 0x73,\n                0x39, 0x1a, 0xc7, 0x27, 0xc6, 0x38,\n            ],\n            [\n                0xfa, 0x9d, 0x6b, 0x47, 0x04, 0x3b, 0x15, 0xb4, 0xb3, 0x3c, 0xf0, 0x5b, 0xb1, 0xde,\n                0x0f, 0x13, 0xda, 0x70, 0x31, 0x36, 0xb2, 0xcd, 0x15, 0x73, 0x24, 0xeb, 0x61, 0x5e,\n                0xc9, 0xee, 0x95, 0x12,\n            ],\n            [\n                0x38, 0xc6, 0x7b, 0x54, 0xd0, 0x3e, 0x3c, 0x18, 0x2e, 0x0e, 0x77, 0xb8, 0x5f, 0x88,\n                0x3c, 0xcd, 0x74, 0xdd, 0xdf, 0xc5, 0x90, 0x10, 0xfb, 0xf4, 0x75, 0xa0, 0xbe, 0xe6,\n                0x59, 0x3c, 0xe2, 0xbd,\n            ],\n        );\n\n        // Prepare arrays for constrained verification\n        let mut pub_keys_x = [[0; 32]; 13];\n        let mut pub_keys_y = [[0; 32]; 13];\n        let mut signature_bytes_array = [[0; 64]; 13];\n\n        for i in 0..13 {\n            if i < signatures_len {\n                let sig = Signature::from_bytes(signatures[i as u32]);\n                let guardian_idx = sig.guardian_index;\n\n                assert(guardian_idx < 19, \"guardian index out of bounds\");\n\n                // Get public key components as byte arrays\n                let pub_key_x = guardian.get_pub_key_x();\n                let pub_key_y = guardian.get_pub_key_y();\n\n                pub_keys_x[i as u32] = pub_key_x;\n                pub_keys_y[i as u32] = pub_key_y;\n\n                // Prepare signature bytes\n                let mut signature_bytes = [0; 64];\n                for j in 0..32 {\n                    signature_bytes[j] = sig.r[j];\n                    signature_bytes[32 + j] = sig.s[j];\n                }\n                signature_bytes_array[i as u32] = signature_bytes;\n            }\n        }\n        \n        (pub_keys_x, pub_keys_y, signature_bytes_array, hash, signatures_len)\n    }\n\n    #[private]\n    fn verify_vaa(bytes: [u8; 2000], actual_length: u32) {\n        // Safety: verify_vaa_unconstrained performs parsing and validation that doesn't need constraints\n        let (pub_keys_x, pub_keys_y, signature_bytes_array, hash, _signatures_len) =\n            unsafe { verify_vaa_unconstrained(bytes, actual_length) };\n\n        let required_signatures = 1;\n        let mut verified_count = 0;\n\n        // Testnet VAA verification only utilizes a single guardian.\n\n        // TODO: Uncomment this when ECDSA verification in loop is implemented.\n        // See issue: https://github.com/noir-lang/noir/pull/8993\n        \n        // for i in 0..13 {\n        //     if i < signatures_len {\n        //        let is_valid = std::ecdsa_secp256k1::verify_signature(\n        //            pub_keys_x[i as u32],\n        //            pub_keys_y[i as u32],\n        //            signature_bytes_array[i as u32],\n        //            hash,\n        //        );\n\n        //        if is_valid {\n        //            verified_count += 1;\n        //        }\n        //    }\n        //}\n\n        let is_valid = std::ecdsa_secp256k1::verify_signature(\n            pub_keys_x[0 as u32],\n            pub_keys_y[0 as u32],\n            signature_bytes_array[0 as u32],\n            hash,\n        );\n\n        if is_valid {\n            verified_count += 1;\n        }\n\n        assert(verified_count >= required_signatures, \"Insufficient valid signatures\");\n    }\n\n    // ============================================================================\n    // GUARDIAN MANAGEMENT\n    // ============================================================================\n    \n    // Individual guardian setters\n    #[public]\n    fn set_guardian1(guardian: Guardian, index: u32) {\n        storage.guardian_1.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian2(guardian: Guardian, index: u32) {\n        storage.guardian_2.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian3(guardian: Guardian, index: u32) {\n        storage.guardian_3.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian4(guardian: Guardian, index: u32) {\n        storage.guardian_4.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian5(guardian: Guardian, index: u32) {\n        storage.guardian_5.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian6(guardian: Guardian, index: u32) {\n        storage.guardian_6.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian7(guardian: Guardian, index: u32) {\n        storage.guardian_7.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian8(guardian: Guardian, index: u32) {\n        storage.guardian_8.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian9(guardian: Guardian, index: u32) {\n        storage.guardian_9.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian10(guardian: Guardian, index: u32) {\n        storage.guardian_10.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian11(guardian: Guardian, index: u32) {\n        storage.guardian_11.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian12(guardian: Guardian, index: u32) {\n        storage.guardian_12.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian13(guardian: Guardian, index: u32) {\n        storage.guardian_13.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian14(guardian: Guardian, index: u32) {\n        storage.guardian_14.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian15(guardian: Guardian, index: u32) {\n        storage.guardian_15.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian16(guardian: Guardian, index: u32) {\n        storage.guardian_16.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian17(guardian: Guardian, index: u32) {\n        storage.guardian_17.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian18(guardian: Guardian, index: u32) {\n        storage.guardian_18.at(index).write(guardian);\n    }\n\n    #[public]\n    fn set_guardian19(guardian: Guardian, index: u32) {\n        storage.guardian_19.at(index).write(guardian);\n    }\n\n    // ============================================================================\n    // GOVERNANCE FUNCTIONS\n    // ============================================================================\n\n    #[public]\n    fn expire_guardian_set(index: u32) {\n        storage.current_guardian_set_index.at(index).write(context.timestamp() + 86400);\n    }\n\n    #[public]\n    fn guardian_set_expired(index: u32) -> bool {\n        let timestamp = storage.current_guardian_set_index.at(index).read();\n        context.timestamp() > timestamp\n    }\n\n    #[public]\n    fn set_provider(provider: Provider) {\n        let updated_storage = WormholeStorage::set_provider(storage.state.read(), provider);\n        storage.state.write(updated_storage);\n    }\n\n    #[public]\n    fn get_provider() -> Provider {\n        WormholeStorage::get_provider(storage.state.read())\n    }\n\n    // ============================================================================\n    // ACCESS CONTROL\n    // ============================================================================\n    \n    #[public]\n    #[internal]\n    fn _assert_is_owner() {\n        assert(storage.owner.read().eq(context.msg_sender()), \"caller is not owner\");\n    }\n\n    // ============================================================================\n    // ADDRESS MANAGEMENT FUNCTIONS\n    // ============================================================================\n    \n    #[public]\n    fn set_receiver_address(new_receiver_address: AztecAddress) {\n        _assert_is_owner();\n        storage.receiver_address.schedule_value_change(new_receiver_address);\n    }\n\n    #[public]\n    fn set_token_address(new_token_address: AztecAddress) {\n        _assert_is_owner();\n        storage.token_address.schedule_value_change(new_token_address);\n    }\n\n    #[public]\n    fn get_receiver_address() -> AztecAddress {\n        storage.receiver_address.get_current_value()\n    }\n\n    #[public]\n    fn get_token_address() -> AztecAddress {\n        storage.token_address.get_current_value()\n    }\n\n    #[public]\n    fn get_scheduled_receiver_address() -> (AztecAddress, u64) {\n        storage.receiver_address.get_scheduled_value()\n    }\n\n    #[public]\n    fn get_scheduled_token_address() -> (AztecAddress, u64) {\n        storage.token_address.get_scheduled_value()\n    }\n\n    #[public]\n    fn get_owner() -> AztecAddress {\n        storage.owner.read()\n    }\n\n    #[public]\n    fn transfer_ownership(new_owner: AztecAddress) {\n        _assert_is_owner();\n        storage.owner.write(new_owner);\n    }\n\n}\n\nmod tests {\n    use crate::{structs::Signature, Wormhole};\n    use dep::aztec::protocol_types::{\n        address::AztecAddress,\n        traits::FromField,\n    };\n    use dep::aztec::test::helpers::test_environment::TestEnvironment;\n\n    #[test]\n    pub unconstrained fn test_signature_extraction() {\n        let signature_bytes: [u8; 66] = [\n            0x00, // Guardian index\n            // R component (32 bytes)\n            0x46, 0x82, 0xbc, 0x4d, 0x5f, 0xf2, 0xe5, 0x4d, 0xc2, 0xee, 0x5e, 0x0e, 0xb6, 0x4f,\n            0x5c, 0x6c, 0x07, 0xaa, 0x44, 0x9a, 0xc5, 0x39, 0xab, 0xc6, 0x3c, 0x2b, 0xe5, 0xc3,\n            0x06, 0xa4, 0x8f, 0x23,\n            // S component (32 bytes)\n            0x3e, 0x93, 0x00, 0x17, 0x0a, 0x82, 0xad, 0xf3, 0xc3, 0xb7, 0xf4, 0x3f, 0x23, 0x17,\n            0x6f, 0xb0, 0x79, 0x17, 0x4a, 0x58, 0xd6, 0x7d, 0x14, 0x24, 0x77, 0xf6, 0x46, 0x67,\n            0x5d, 0x86, 0xeb, 0x63,\n            // Recovery ID\n            0x01,\n        ];\n\n        let sig = Signature::from_bytes(signature_bytes);\n\n        assert(sig.guardian_index == 0, \"Guardian index should be 0\");\n        assert(sig.r[0] == 0x46, \"R component should start with 0x46\");\n        assert(sig.s[0] == 0x3e, \"S component should start with 0x3e\");\n    }\n\n    #[test]\n    pub unconstrained fn test_verify_vaa_logic() {\n        // Setup env, generate keys\n        let mut env = TestEnvironment::new();\n\n        // Deploy contract - need to specify all 3 parameters for deploy\n        let dummy_owner = AztecAddress::from_field(1);\n        let receiver_address = AztecAddress::from_field(\n            0x0d071eec273fa0c82825d9c5d2096965a40bcc33ae942714cf6c683af9632504,\n        );\n        let token_address = AztecAddress::from_field(\n            0x037e5d19d6d27e2fb7c947cfe7c36459e27d35e46dd59f5f47373a64ff491d2c,\n        );\n\n        let contract_address = env\n            .deploy(\"Wormhole\")\n            .with_public_initializer(\n                dummy_owner,\n                Wormhole::interface().init(56, 56, dummy_owner, receiver_address, token_address),\n            );\n\n        let mut vaa_bytes: [u8; 2000] = [0; 2000];\n        let actual_length = 221;\n\n        // NOTE: This is a real Wormhole VAA from Arbitrum Sepolia testnet.\n        // VAA bytes, fetched from https://wormholescan.io/#/tx/0xf93fd41efeb09ff28174824d4abf6dbc06ac408953a9975aa4a403d434051efc\n        // This VAA contains the message \"Hello Wormhole!\" and is used to test VAA verification logic.\n        let wh_vaa: [u8; 221] = [\n            0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x46, 0x82, 0xbc, 0x4d, 0x5f, 0xf2, 0xe5,\n            0x4d, 0xc2, 0xee, 0x5e, 0x0e, 0xb6, 0x4f, 0x5c, 0x6c, 0x07, 0xaa, 0x44, 0x9a, 0xc5,\n            0x39, 0xab, 0xc6, 0x3c, 0x2b, 0xe5, 0xc3, 0x06, 0xa4, 0x8f, 0x23, 0x3e, 0x93, 0x00,\n            0x17, 0x0a, 0x82, 0xad, 0xf3, 0xc3, 0xb7, 0xf4, 0x3f, 0x23, 0x17, 0x6f, 0xb0, 0x79,\n            0x17, 0x4a, 0x58, 0xd6, 0x7d, 0x14, 0x24, 0x77, 0xf6, 0x46, 0x67, 0x5d, 0x86, 0xeb,\n            0x63, 0x01, 0x68, 0x4b, 0xfa, 0xd4, 0x49, 0x96, 0x02, 0xd2, 0x27, 0x13, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x7f, 0x31, 0xe0,\n            0x74, 0xbf, 0x2c, 0x81, 0x93, 0x91, 0xd5, 0x27, 0x29, 0xf9, 0x55, 0x06, 0xe0, 0xa7,\n            0x2f, 0xfb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x57, 0x6f,\n            0x72, 0x6d, 0x68, 0x6f, 0x6c, 0x65, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ];\n\n        for i in 0..221 {\n            vaa_bytes[i] = wh_vaa[i];\n        }\n\n        env.call_private(\n            dummy_owner,\n            Wormhole::at(contract_address).verify_vaa(vaa_bytes, actual_length),\n        );\n    }\n}"
    },
    "51": {
      "path": "/Users/ngjupeng/quantum3labs/aztec/wormhole/aztec/contracts/src/structs.nr",
      "source": "use dep::aztec::{\n    protocol_types::{\n        address::AztecAddress,\n        traits::{Deserialize, Packable, Serialize},\n    },\n};\nuse std::meta::derive;\n\n#[derive(Deserialize, Packable, Serialize)]\npub struct Provider {\n    pub chain_id: u16,\n    pub evm_chain_id: u16,\n}\n\n// Keep your Guardian_PK EXACTLY as is - don't touch it\n#[derive(Deserialize, Packable, Serialize)]\npub struct Guardian_PK {\n    // Address (20 bytes)\n    pub value0: u8, pub value1: u8, pub value2: u8, pub value3: u8, pub value4: u8,\n    pub value5: u8, pub value6: u8, pub value7: u8, pub value8: u8, pub value9: u8,\n    pub value10: u8, pub value11: u8, pub value12: u8, pub value13: u8, pub value14: u8,\n    pub value15: u8, pub value16: u8, pub value17: u8, pub value18: u8, pub value19: u8,\n    \n    // Public Key X (32 bytes)\n    pub pub_key_x0: u8, pub pub_key_x1: u8, pub pub_key_x2: u8, pub pub_key_x3: u8,\n    pub pub_key_x4: u8, pub pub_key_x5: u8, pub pub_key_x6: u8, pub pub_key_x7: u8,\n    pub pub_key_x8: u8, pub pub_key_x9: u8, pub pub_key_x10: u8, pub pub_key_x11: u8,\n    pub pub_key_x12: u8, pub pub_key_x13: u8, pub pub_key_x14: u8, pub pub_key_x15: u8,\n    pub pub_key_x16: u8, pub pub_key_x17: u8, pub pub_key_x18: u8, pub pub_key_x19: u8,\n    pub pub_key_x20: u8, pub pub_key_x21: u8, pub pub_key_x22: u8, pub pub_key_x23: u8,\n    pub pub_key_x24: u8, pub pub_key_x25: u8, pub pub_key_x26: u8, pub pub_key_x27: u8,\n    pub pub_key_x28: u8, pub pub_key_x29: u8, pub pub_key_x30: u8, pub pub_key_x31: u8,\n    \n    // Public Key Y (32 bytes)\n    pub pub_key_y0: u8, pub pub_key_y1: u8, pub pub_key_y2: u8, pub pub_key_y3: u8,\n    pub pub_key_y4: u8, pub pub_key_y5: u8, pub pub_key_y6: u8, pub pub_key_y7: u8,\n    pub pub_key_y8: u8, pub pub_key_y9: u8, pub pub_key_y10: u8, pub pub_key_y11: u8,\n    pub pub_key_y12: u8, pub pub_key_y13: u8, pub pub_key_y14: u8, pub pub_key_y15: u8,\n    pub pub_key_y16: u8, pub pub_key_y17: u8, pub pub_key_y18: u8, pub pub_key_y19: u8,\n    pub pub_key_y20: u8, pub pub_key_y21: u8, pub pub_key_y22: u8, pub pub_key_y23: u8,\n    pub pub_key_y24: u8, pub pub_key_y25: u8, pub pub_key_y26: u8, pub pub_key_y27: u8,\n    pub pub_key_y28: u8, pub pub_key_y29: u8, pub pub_key_y30: u8, pub pub_key_y31: u8,\n}\n\nimpl Guardian_PK {\n    pub fn new(address: [u8; 20], pub_key_x: [u8; 32], pub_key_y: [u8; 32]) -> Self {\n        Guardian_PK { \n            // Address\n            value0: address[0], value1: address[1], value2: address[2], value3: address[3], value4: address[4],\n            value5: address[5], value6: address[6], value7: address[7], value8: address[8], value9: address[9],\n            value10: address[10], value11: address[11], value12: address[12], value13: address[13], value14: address[14],\n            value15: address[15], value16: address[16], value17: address[17], value18: address[18], value19: address[19],\n            \n            // Public Key X\n            pub_key_x0: pub_key_x[0], pub_key_x1: pub_key_x[1], pub_key_x2: pub_key_x[2], pub_key_x3: pub_key_x[3],\n            pub_key_x4: pub_key_x[4], pub_key_x5: pub_key_x[5], pub_key_x6: pub_key_x[6], pub_key_x7: pub_key_x[7],\n            pub_key_x8: pub_key_x[8], pub_key_x9: pub_key_x[9], pub_key_x10: pub_key_x[10], pub_key_x11: pub_key_x[11],\n            pub_key_x12: pub_key_x[12], pub_key_x13: pub_key_x[13], pub_key_x14: pub_key_x[14], pub_key_x15: pub_key_x[15],\n            pub_key_x16: pub_key_x[16], pub_key_x17: pub_key_x[17], pub_key_x18: pub_key_x[18], pub_key_x19: pub_key_x[19],\n            pub_key_x20: pub_key_x[20], pub_key_x21: pub_key_x[21], pub_key_x22: pub_key_x[22], pub_key_x23: pub_key_x[23],\n            pub_key_x24: pub_key_x[24], pub_key_x25: pub_key_x[25], pub_key_x26: pub_key_x[26], pub_key_x27: pub_key_x[27],\n            pub_key_x28: pub_key_x[28], pub_key_x29: pub_key_x[29], pub_key_x30: pub_key_x[30], pub_key_x31: pub_key_x[31],\n            \n            // Public Key Y\n            pub_key_y0: pub_key_y[0], pub_key_y1: pub_key_y[1], pub_key_y2: pub_key_y[2], pub_key_y3: pub_key_y[3],\n            pub_key_y4: pub_key_y[4], pub_key_y5: pub_key_y[5], pub_key_y6: pub_key_y[6], pub_key_y7: pub_key_y[7],\n            pub_key_y8: pub_key_y[8], pub_key_y9: pub_key_y[9], pub_key_y10: pub_key_y[10], pub_key_y11: pub_key_y[11],\n            pub_key_y12: pub_key_y[12], pub_key_y13: pub_key_y[13], pub_key_y14: pub_key_y[14], pub_key_y15: pub_key_y[15],\n            pub_key_y16: pub_key_y[16], pub_key_y17: pub_key_y[17], pub_key_y18: pub_key_y[18], pub_key_y19: pub_key_y[19],\n            pub_key_y20: pub_key_y[20], pub_key_y21: pub_key_y[21], pub_key_y22: pub_key_y[22], pub_key_y23: pub_key_y[23],\n            pub_key_y24: pub_key_y[24], pub_key_y25: pub_key_y[25], pub_key_y26: pub_key_y[26], pub_key_y27: pub_key_y[27],\n            pub_key_y28: pub_key_y[28], pub_key_y29: pub_key_y[29], pub_key_y30: pub_key_y[30], pub_key_y31: pub_key_y[31],\n        }\n    }\n\n    pub fn default() -> Self {\n        Guardian_PK::new([0; 20], [0; 32], [0; 32])\n    }\n\n    pub fn as_array(Guardian_PK: Guardian_PK) -> [u8; 20] {\n        [Guardian_PK.value0, Guardian_PK.value1, Guardian_PK.value2, Guardian_PK.value3, Guardian_PK.value4, \n         Guardian_PK.value5, Guardian_PK.value6, Guardian_PK.value7, Guardian_PK.value8, Guardian_PK.value9,\n         Guardian_PK.value10, Guardian_PK.value11, Guardian_PK.value12, Guardian_PK.value13, Guardian_PK.value14,\n         Guardian_PK.value15, Guardian_PK.value16, Guardian_PK.value17, Guardian_PK.value18, Guardian_PK.value19]\n    }\n\n    pub fn get_pub_key_x(self) -> [u8; 32] {\n        [self.pub_key_x0, self.pub_key_x1, self.pub_key_x2, self.pub_key_x3,\n         self.pub_key_x4, self.pub_key_x5, self.pub_key_x6, self.pub_key_x7,\n         self.pub_key_x8, self.pub_key_x9, self.pub_key_x10, self.pub_key_x11,\n         self.pub_key_x12, self.pub_key_x13, self.pub_key_x14, self.pub_key_x15,\n         self.pub_key_x16, self.pub_key_x17, self.pub_key_x18, self.pub_key_x19,\n         self.pub_key_x20, self.pub_key_x21, self.pub_key_x22, self.pub_key_x23,\n         self.pub_key_x24, self.pub_key_x25, self.pub_key_x26, self.pub_key_x27,\n         self.pub_key_x28, self.pub_key_x29, self.pub_key_x30, self.pub_key_x31]\n    }\n\n    pub fn get_pub_key_y(self) -> [u8; 32] {\n        [self.pub_key_y0, self.pub_key_y1, self.pub_key_y2, self.pub_key_y3,\n         self.pub_key_y4, self.pub_key_y5, self.pub_key_y6, self.pub_key_y7,\n         self.pub_key_y8, self.pub_key_y9, self.pub_key_y10, self.pub_key_y11,\n         self.pub_key_y12, self.pub_key_y13, self.pub_key_y14, self.pub_key_y15,\n         self.pub_key_y16, self.pub_key_y17, self.pub_key_y18, self.pub_key_y19,\n         self.pub_key_y20, self.pub_key_y21, self.pub_key_y22, self.pub_key_y23,\n         self.pub_key_y24, self.pub_key_y25, self.pub_key_y26, self.pub_key_y27,\n         self.pub_key_y28, self.pub_key_y29, self.pub_key_y30, self.pub_key_y31]\n    }\n\n    // Add ONE optimization - return Fields for ECDSA verification without breaking existing code\n    pub fn get_pub_key_x_field(self) -> Field {\n        let bytes = self.get_pub_key_x();\n        Field::from_le_bytes(bytes)\n    }\n\n    pub fn get_pub_key_y_field(self) -> Field {\n        let bytes = self.get_pub_key_y();\n        Field::from_le_bytes(bytes)\n    }\n}\n\n#[derive(Deserialize, Packable, Serialize)]\npub struct Guardian {\n    pub address: Guardian_PK,\n}\n\nimpl Guardian {\n    pub fn new(address: [u8; 20], pub_key_x: [u8; 32], pub_key_y: [u8; 32]) -> Self {\n        Guardian { address: Guardian_PK::new(address, pub_key_x, pub_key_y) }\n    }\n    \n    pub fn default() -> Self {\n        Guardian { address: Guardian_PK::default() }\n    }\n\n    pub fn get_address(g: Self) -> [u8; 20] {\n        Guardian_PK::as_array(g.address)\n    }\n\n    pub fn get_pub_key_x(self) -> [u8; 32] {\n        self.address.get_pub_key_x()\n    }\n\n    pub fn get_pub_key_y(self) -> [u8; 32] {\n        self.address.get_pub_key_y()\n    }\n\n    // Add the same optimization here\n    pub fn get_pub_key_x_field(self) -> Field {\n        self.address.get_pub_key_x_field()\n    }\n\n    pub fn get_pub_key_y_field(self) -> Field {\n        self.address.get_pub_key_y_field()\n    }\n}\n\n#[derive(Deserialize, Serialize)]\npub struct Signature {\n    pub r: [u8; 32],\n    pub s: [u8; 32],\n    pub v: u8,\n    pub guardian_index: u8\n}\n\nimpl Signature {\n    pub fn new(r: [u8; 32], s: [u8; 32], v: u8, guardian_index: u8) -> Self {\n        Signature { r, s, v, guardian_index }\n    }\n\n    pub fn default() -> Self {\n        Signature { r: [0; 32], s: [0; 32], v: 0, guardian_index: 0 }\n    }\n\n    pub fn from_bytes(bytes: [u8; 66]) -> Self {\n        // Wormhole VAA signature format:\n        // byte 0: guardian index\n        // bytes 1-32: r (32 bytes) - BIG ENDIAN\n        // bytes 33-64: s (32 bytes) - BIG ENDIAN  \n        // byte 65: recovery id (v)\n        \n        let guardian_index = bytes[0];\n        \n        // Extract r (bytes 1-32) - keep as big endian\n        let r = [bytes[1], bytes[2], bytes[3], bytes[4], bytes[5], bytes[6], bytes[7], bytes[8],\n                 bytes[9], bytes[10], bytes[11], bytes[12], bytes[13], bytes[14], bytes[15], bytes[16],\n                 bytes[17], bytes[18], bytes[19], bytes[20], bytes[21], bytes[22], bytes[23], bytes[24],\n                 bytes[25], bytes[26], bytes[27], bytes[28], bytes[29], bytes[30], bytes[31], bytes[32]];\n        \n        // Extract s (bytes 33-64) - keep as big endian\n        let s = [bytes[33], bytes[34], bytes[35], bytes[36], bytes[37], bytes[38], bytes[39], bytes[40],\n                 bytes[41], bytes[42], bytes[43], bytes[44], bytes[45], bytes[46], bytes[47], bytes[48],\n                 bytes[49], bytes[50], bytes[51], bytes[52], bytes[53], bytes[54], bytes[55], bytes[56],\n                 bytes[57], bytes[58], bytes[59], bytes[60], bytes[61], bytes[62], bytes[63], bytes[64]];\n        \n        let v = bytes[65];\n        \n        Signature { r, s, v, guardian_index }\n    }\n}\n\n#[derive(Deserialize, Serialize)]\npub struct Body {\n    pub timestamp: u32,\n    pub nonce: u32,\n    pub emitter_chain_id: u16,\n    pub emitter_address: AztecAddress,\n    pub sequence: u64,\n    pub consistency_level: u8,\n    pub payload: [u8; 1024],\n}\n\nimpl Body {\n    pub fn new(\n        timestamp: u32,\n        nonce: u32,\n        emitter_chain_id: u16,\n        emitter_address: AztecAddress,\n        sequence: u64,\n        consistency_level: u8,\n        payload: [u8; 1024],\n    ) -> Self {\n        Body {\n            timestamp,\n            nonce,\n            emitter_chain_id,\n            emitter_address,\n            sequence,\n            consistency_level,\n            payload\n        }\n    }\n    \n    pub fn default() -> Self {\n        Body {\n            timestamp: 0,\n            nonce: 0,\n            emitter_chain_id: 0,\n            emitter_address: AztecAddress::zero(),\n            sequence: 0,\n            consistency_level: 0,\n            payload: [0; 1024],\n        }\n    }\n\n    pub fn from_bytes(bytes: [u8; 1060]) -> Body {\n        let timestamp: u32 = u32_from_u8s_le([bytes[0], bytes[1], bytes[2], bytes[3]]);\n        let nonce: u32 = u32_from_u8s_le([bytes[4], bytes[5], bytes[6], bytes[7]]);\n        let emitter_chain_id: u16 = u16_from_u8s_le([bytes[8], bytes[9]]);\n\n        // Parse emitter bytes into aztec address\n        let emitter_address_bytes: [u8; 32] = [\n            bytes[10], bytes[11], bytes[12], bytes[13], bytes[14], bytes[15], bytes[16], bytes[17],\n            bytes[18], bytes[19], bytes[20], bytes[21], bytes[22], bytes[23], bytes[24], bytes[25],\n            bytes[26], bytes[27], bytes[28], bytes[29], bytes[30], bytes[31], bytes[32], bytes[33],\n            bytes[34], bytes[35], bytes[36], bytes[37], bytes[38], bytes[39], bytes[40], bytes[41],\n        ];\n\n        let emitter_address_field: Field = Field::from_le_bytes(emitter_address_bytes);\n        let emitter_address: AztecAddress = AztecAddress {\n            inner: emitter_address_field,\n        };\n        \n        let sequence: u64 = u64_from_u8s_le([bytes[42], bytes[43], bytes[44], bytes[45], bytes[46], bytes[47], bytes[48], bytes[49]]);\n        let consistency_level: u8 = bytes[50];\n        \n        // Extract payload (1024 bytes starting from index 51)\n        let mut payload = [0; 1024];\n        for i in 0..1024 {\n            payload[i] = bytes[51 + i];\n        }\n        \n        Body {\n            timestamp,\n            nonce,\n            emitter_chain_id,\n            emitter_address,\n            sequence,\n            consistency_level,\n            payload\n        }\n    }\n}\n\n#[derive(Deserialize, Serialize)]\npub struct VAA {\n    pub version: u8,\n    pub timestamp: u32,\n    pub nonce: u32,\n    pub emitter_chain_id: u16,\n    pub emitter_address: AztecAddress,\n    pub sequence: u64,\n    pub consistency_level: u8,\n    pub payload: [u8; 1024],\n    pub guardian_set_index: u32,\n    pub signatures: [Signature; 13],\n    pub hash: [u8; 32], \n}\n\nimpl VAA {\n    pub fn default() -> Self {\n        VAA {\n            version: 0,\n            timestamp: 0,\n            nonce: 0,\n            emitter_chain_id: 0,\n            emitter_address: AztecAddress::zero(),\n            sequence: 0,\n            consistency_level: 0,\n            payload: [0; 1024],\n            guardian_set_index: 0,\n            signatures: [Signature::new([0;32], [0;32], 0, 0); 13],\n            hash: [0; 32]\n        }\n    }\n\n    pub fn new(\n        version: u8,\n        timestamp: u32,\n        nonce: u32,\n        emitter_chain_id: u16,\n        emitter_address: AztecAddress,\n        sequence: u64,\n        consistency_level: u8,\n        payload: [u8; 1024],\n        guardian_set_index: u32,\n        signatures: [Signature; 13],\n        hash: [u8; 32]\n    ) -> Self {\n        VAA {\n            version,\n            timestamp,\n            nonce,\n            emitter_chain_id,\n            emitter_address,\n            sequence,\n            consistency_level,\n            payload,\n            guardian_set_index,\n            signatures,\n            hash\n        }\n    }\n\n    pub fn get_guardian_set_index(vaa: Self) -> u32{\n        vaa.guardian_set_index\n    }\n\n    pub fn get_timestamp(vaa: Self) -> u32 {\n        vaa.timestamp\n    }\n\n    pub fn get_payload(vaa: Self) -> [u8; 1024] {\n        vaa.payload\n    }\n\n    pub fn get_hash(vaa: Self) -> [u8; 32] {\n        vaa.hash\n    }\n\n    pub fn get_emitter_chain_id(vaa: Self) -> u16 {\n        vaa.emitter_chain_id\n    }\n\n    pub fn get_sequence(vaa: Self) -> u64 {\n        vaa.sequence\n    }\n\n    pub fn get_consistency_level(vaa: Self) -> u8 {\n        vaa.consistency_level\n    }\n}\n\n// Helper functions\npub fn u32_from_u8s_le(bytes: [u8; 4]) -> u32 {\n    let mut result = 0;\n    for i in 0..4 {\n        result |= (bytes[i as u32] as u32) << (i * 8);\n    }\n    result\n}\n\npub fn u16_from_u8s_le(bytes: [u8; 2]) -> u16 {\n    let mut result = 0;\n    for i in 0..2 {\n        result |= (bytes[i as u32] as u16) << (i * 8);\n    }\n    result\n}\n\npub fn u64_from_u8s_le(bytes: [u8; 8]) -> u64 {\n    let mut result = 0;\n    for i in 0..8 {\n        result |= (bytes[i as u32] as u64) << (i * 8);\n    }\n    result\n}\n\n// Governance structures\npub struct ContractUpgrade {\n    pub module: [u8; 32],\n    pub action: u8,\n    pub chain: u16,\n    pub new_contract: Field\n}\n\npub struct GuardianSetUpgrade {\n    pub module: [u8; 32],\n    pub action: u8,\n    pub chain: u16,\n    pub new_guardian_set_index: u32\n}\n\npub struct SetMessageFee {\n    pub module: [u8; 32],\n    pub action: u8,\n    pub chain: u16,\n    pub message_fee: Field\n}\n\npub struct TransferFees {\n    pub module: [u8; 32],\n    pub action: u8,\n    pub chain: u16,\n    pub amount: Field,\n    pub recipient: [u8; 32]\n}\n\npub struct RecoverChainId {\n    pub module: [u8; 32],\n    pub action: u8,\n    pub evm_chain_id: Field,\n    pub new_chain_id: u16\n}\n\n#[derive(Deserialize, Packable, Serialize)]\npub struct EmitterRegistry {\n    pub next_id: u64,\n}\n\npub struct EmitterCapability {\n    pub emitter: u64,\n    pub sequence: u64,\n}\n\nimpl EmitterRegistry {\n    pub fn new() -> Self {\n        EmitterRegistry { next_id: 0 }\n    }\n\n    pub fn get_next_id(&mut self) -> u64 {\n        let id = self.next_id;\n        self.next_id += 1;\n        id\n    }\n}\n\nimpl EmitterCapability {\n    pub fn new(registry: &mut EmitterRegistry) -> Self {\n        let emitter = registry.get_next_id();\n        registry.next_id += 1;\n        EmitterCapability { emitter, sequence: 0 }\n    }\n\n    pub fn use_sequence(&mut self) -> u64 {\n        let sequence = self.sequence;\n        self.sequence += 1;\n        sequence\n    }\n}\n\n#[derive(Deserialize, Packable, Serialize)]\npub struct WormholeStorage {\n    pub provider: Provider,\n    pub guardian_set_index: u64,\n    pub guardian_set_expiry: u64,\n    pub message_fee: u128,\n    pub emitter_registry: EmitterRegistry,\n}\n\nimpl WormholeStorage {\n    pub fn init(provider: Provider) -> Self {\n        WormholeStorage {\n            provider: provider,\n            guardian_set_index: 0,\n            guardian_set_expiry: 86400,\n            message_fee: 0,\n            emitter_registry: EmitterRegistry::new(),\n        }\n    }\n\n    // Getters\n    pub fn get_provider(state: Self) -> Provider {\n        state.provider\n    }\n\n    pub fn get_message_fee(state: Self) -> u128 {\n        state.message_fee\n    }\n\n    pub fn get_chain_id(state: Self) -> u16 {\n        state.provider.chain_id\n    }\n\n    pub fn get_guardian_set_index(state: Self) -> u64 {\n        state.guardian_set_index\n    }\n\n    pub fn get_guardian_set_expiry(state: Self) -> u64 {\n        state.guardian_set_expiry\n    }\n\n    // Setters\n    pub fn set_guardian_set_expiry(mut state: Self, guardian_set_expiry: u64) -> Self {\n        state.guardian_set_expiry = guardian_set_expiry;\n        state\n    }\n\n    pub fn set_guardian_set_index(mut state: Self, guardian_set_index: u64) -> Self {\n        state.guardian_set_index = guardian_set_index;\n        state\n    }\n\n    pub fn set_chain_id(mut state: Self, chain_id: u16) -> Self {\n        state.provider.chain_id = chain_id;\n        state\n    }\n\n    pub fn set_provider(mut state: Self, provider: Provider) -> Self {\n        state.provider = provider;\n        state\n    }\n\n    pub fn set_message_fee(mut state: Self, message_fee: u128) -> Self {\n        state.message_fee = message_fee;\n        state\n    }\n}"
    },
    "6": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0, \"cannot pop from an empty vector\");\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            let _ = vec.get(0);\n        }\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_beyond_length() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3]);\n            let _ = vec.get(3);\n        }\n\n        #[test]\n        fn get_works_within_bounds() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n            assert_eq(vec.get(0), 1);\n            assert_eq(vec.get(2), 3);\n            assert_eq(vec.get(4), 5);\n        }\n\n        #[test]\n        fn get_unchecked_works() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3]);\n            assert_eq(vec.get_unchecked(0), 1);\n            assert_eq(vec.get_unchecked(2), 3);\n        }\n\n        #[test]\n        fn get_unchecked_works_past_len() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3]);\n            assert_eq(vec.get_unchecked(4), 0);\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_setting_beyond_length() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3]);\n            vec.set(3, 4);\n        }\n\n        #[test]\n        fn set_unchecked_operations() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n            vec.push(1);\n            vec.push(2);\n\n            vec.set_unchecked(0, 10);\n            assert_eq(vec.get(0), 10);\n        }\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn set_unchecked_operations_past_len() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n            vec.push(1);\n            vec.push(2);\n\n            vec.set_unchecked(3, 40);\n            assert_eq(vec.get(3), 40);\n        }\n\n        #[test]\n        fn set_preserves_other_elements() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n\n            vec.set(2, 30);\n            assert_eq(vec.get(0), 1);\n            assert_eq(vec.get(1), 2);\n            assert_eq(vec.get(2), 30);\n            assert_eq(vec.get(3), 4);\n            assert_eq(vec.get(4), 5);\n        }\n    }\n\n    mod any {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn returns_false_if_predicate_not_satisfied() {\n            let vec: BoundedVec<bool, 4> = BoundedVec::from_array([false, false, false, false]);\n            let result = vec.any(|value| value);\n\n            assert(!result);\n        }\n\n        #[test]\n        fn returns_true_if_predicate_satisfied() {\n            let vec: BoundedVec<bool, 4> = BoundedVec::from_array([false, false, true, true]);\n            let result = vec.any(|value| value);\n\n            assert(result);\n        }\n\n        #[test]\n        fn returns_false_on_empty_boundedvec() {\n            let vec: BoundedVec<bool, 0> = BoundedVec::new();\n            let result = vec.any(|value| value);\n\n            assert(!result);\n        }\n\n        #[test]\n        fn any_with_complex_predicates() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n\n            assert(vec.any(|x| x > 3));\n            assert(!vec.any(|x| x > 10));\n            assert(vec.any(|x| x % 2 == 0)); // has a even number\n            assert(vec.any(|x| x == 3)); // has a specific value\n        }\n\n        #[test]\n        fn any_with_partial_vector() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n            vec.push(1);\n            vec.push(2);\n\n            assert(vec.any(|x| x == 1));\n            assert(vec.any(|x| x == 2));\n            assert(!vec.any(|x| x == 3));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n\n        #[test]\n        fn map_with_conditional_logic() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n\n            let result = vec.map(|x| if x % 2 == 0 { x * 2 } else { x });\n            let expected = BoundedVec::from_array([1, 4, 3, 8]);\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn map_preserves_length() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|x| x * 2);\n\n            assert_eq(result.len(), vec.len());\n            assert_eq(result.max_len(), vec.max_len());\n        }\n\n        #[test]\n        fn map_on_empty_vector() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::new();\n            let result = vec.map(|x| x * 2);\n            assert_eq(result, vec);\n            assert_eq(result.len(), 0);\n            assert_eq(result.max_len(), 5);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n\n        #[test]\n        fn mapi_with_index_branching_logic() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n\n            let result = vec.mapi(|i, x| if i % 2 == 0 { x * 2 } else { x });\n            let expected = BoundedVec::from_array([2, 2, 6, 4]);\n            assert_eq(result, expected);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n\n        #[test]\n        fn for_each_on_empty_vector() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::new();\n            let mut count = 0;\n            let count_ref = &mut count;\n            vec.for_each(|_| { *count_ref += 1; });\n            assert_eq(count, 0);\n        }\n\n        #[test]\n        fn for_each_with_side_effects() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            let mut seen = BoundedVec::<u32, 3>::new();\n            let seen_ref = &mut seen;\n            vec.for_each(|x| seen_ref.push(x));\n            assert_eq(seen, vec);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n\n        #[test]\n        fn for_eachi_on_empty_vector() {\n            let vec: BoundedVec<u32, 5> = BoundedVec::new();\n            let mut count = 0;\n            let count_ref = &mut count;\n            vec.for_eachi(|_, _| { *count_ref += 1; });\n            assert_eq(count, 0);\n        }\n\n        #[test]\n        fn for_eachi_with_index_tracking() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([10, 20, 30]);\n            let mut indices = BoundedVec::<u32, 3>::new();\n            let indices_ref = &mut indices;\n            vec.for_eachi(|i, _| indices_ref.push(i));\n\n            let expected = BoundedVec::from_array([0, 1, 2]);\n            assert_eq(indices, expected);\n        }\n\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n\n        #[test]\n        fn from_array_preserves_order() {\n            let array = [5, 3, 1, 4, 2];\n            let vec: BoundedVec<u32, 5> = BoundedVec::from_array(array);\n            for i in 0..array.len() {\n                assert_eq(vec.get(i), array[i]);\n            }\n        }\n\n        #[test]\n        fn from_array_with_different_types() {\n            let bool_array = [true, false, true];\n            let bool_vec: BoundedVec<bool, 3> = BoundedVec::from_array(bool_array);\n            assert_eq(bool_vec.len(), 3);\n            assert_eq(bool_vec.get(0), true);\n            assert_eq(bool_vec.get(1), false);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n\n    mod push_pop {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn push_and_pop_operations() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n\n            assert_eq(vec.len(), 0);\n\n            vec.push(1);\n            assert_eq(vec.len(), 1);\n            assert_eq(vec.get(0), 1);\n\n            vec.push(2);\n            assert_eq(vec.len(), 2);\n            assert_eq(vec.get(1), 2);\n\n            let popped = vec.pop();\n            assert_eq(popped, 2);\n            assert_eq(vec.len(), 1);\n\n            let popped2 = vec.pop();\n            assert_eq(popped2, 1);\n            assert_eq(vec.len(), 0);\n        }\n\n        #[test(should_fail_with = \"push out of bounds\")]\n        fn push_to_full_vector() {\n            let mut vec: BoundedVec<u32, 2> = BoundedVec::new();\n            vec.push(1);\n            vec.push(2);\n            vec.push(3); // should panic\n        }\n\n        #[test(should_fail_with = \"cannot pop from an empty vector\")]\n        fn pop_from_empty_vector() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n            let _ = vec.pop(); // should panic\n        }\n\n        #[test]\n        fn push_pop_cycle() {\n            let mut vec: BoundedVec<u32, 3> = BoundedVec::new();\n\n            // push to full\n            vec.push(1);\n            vec.push(2);\n            vec.push(3);\n            assert_eq(vec.len(), 3);\n\n            // pop all\n            assert_eq(vec.pop(), 3);\n            assert_eq(vec.pop(), 2);\n            assert_eq(vec.pop(), 1);\n            assert_eq(vec.len(), 0);\n\n            // push again\n            vec.push(4);\n            assert_eq(vec.len(), 1);\n            assert_eq(vec.get(0), 4);\n        }\n    }\n\n    mod extend {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn extend_from_array() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n            vec.push(1);\n            vec.extend_from_array([2, 3]);\n\n            assert_eq(vec.len(), 3);\n            assert_eq(vec.get(0), 1);\n            assert_eq(vec.get(1), 2);\n            assert_eq(vec.get(2), 3);\n        }\n\n        #[test]\n        fn extend_from_slice() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n            vec.push(1);\n            vec.extend_from_slice(&[2, 3]);\n\n            assert_eq(vec.len(), 3);\n            assert_eq(vec.get(0), 1);\n            assert_eq(vec.get(1), 2);\n            assert_eq(vec.get(2), 3);\n        }\n\n        #[test]\n        fn extend_from_bounded_vec() {\n            let mut vec1: BoundedVec<u32, 5> = BoundedVec::new();\n            let mut vec2: BoundedVec<u32, 3> = BoundedVec::new();\n\n            vec1.push(1);\n            vec2.push(2);\n            vec2.push(3);\n\n            vec1.extend_from_bounded_vec(vec2);\n\n            assert_eq(vec1.len(), 3);\n            assert_eq(vec1.get(0), 1);\n            assert_eq(vec1.get(1), 2);\n            assert_eq(vec1.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"extend_from_array out of bounds\")]\n        fn extend_array_beyond_max_len() {\n            let mut vec: BoundedVec<u32, 3> = BoundedVec::new();\n            vec.push(1);\n            vec.extend_from_array([2, 3, 4]); // should panic\n        }\n\n        #[test(should_fail_with = \"extend_from_slice out of bounds\")]\n        fn extend_slice_beyond_max_len() {\n            let mut vec: BoundedVec<u32, 3> = BoundedVec::new();\n            vec.push(1);\n            vec.extend_from_slice(&[2, 3, 4]); // S]should panic\n        }\n\n        #[test(should_fail_with = \"extend_from_bounded_vec out of bounds\")]\n        fn extend_bounded_vec_beyond_max_len() {\n            let mut vec: BoundedVec<u32, 3> = BoundedVec::new();\n            let other: BoundedVec<u32, 5> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n            vec.extend_from_bounded_vec(other); // should panic\n        }\n\n        #[test]\n        fn extend_with_empty_collections() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n            let original_len = vec.len();\n\n            vec.extend_from_array([]);\n            assert_eq(vec.len(), original_len);\n\n            vec.extend_from_slice(&[]);\n            assert_eq(vec.len(), original_len);\n\n            let empty: BoundedVec<u32, 3> = BoundedVec::new();\n            vec.extend_from_bounded_vec(empty);\n            assert_eq(vec.len(), original_len);\n        }\n    }\n\n    mod storage {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn storage_consistency() {\n            let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n\n            // test initial storage state\n            assert_eq(vec.storage(), [0, 0, 0, 0, 0]);\n\n            vec.push(1);\n            vec.push(2);\n\n            // test storage after modifications\n            assert_eq(vec.storage(), [1, 2, 0, 0, 0]);\n\n            // storage doesn't change length\n            assert_eq(vec.len(), 2);\n            assert_eq(vec.max_len(), 5);\n        }\n\n        #[test]\n        fn storage_after_pop() {\n            let mut vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n\n            let _ = vec.pop();\n            // after pop, the last element should be zeroed\n            assert_eq(vec.storage(), [1, 2, 0]);\n            assert_eq(vec.len(), 2);\n        }\n\n        #[test]\n        fn vector_immutable() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            let storage = vec.storage();\n\n            assert_eq(storage, [1, 2, 3]);\n\n            // Verify that the original vector is unchanged\n            assert_eq(vec.len(), 3);\n            assert_eq(vec.get(0), 1);\n            assert_eq(vec.get(1), 2);\n            assert_eq(vec.get(2), 3);\n        }\n    }\n}\n"
    },
    "61": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/capsules/mod.nr",
      "source": "use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push(self, value: T)\n    where\n        T: Serialize,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get(self, index: u32) -> T\n    where\n        T: Deserialize,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n\n    global SLOT: Field = 1230;\n\n    #[test]\n    unconstrained fn empty_array() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n            assert_eq(array.len(), 0);\n        });\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let array = CapsuleArray::at(contract_address, SLOT);\n            let _: Field = array.get(0);\n        });\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let array = CapsuleArray::at(contract_address, SLOT);\n            array.push(5);\n\n            assert_eq(array.len(), 1);\n            assert_eq(array.get(0), 5);\n        });\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let array = CapsuleArray::at(contract_address, SLOT);\n            array.push(5);\n\n            let _ = array.get(1);\n        });\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let array = CapsuleArray::at(contract_address, SLOT);\n\n            array.push(5);\n            array.remove(0);\n\n            assert_eq(array.len(), 0);\n        });\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let array = CapsuleArray::at(contract_address, SLOT);\n\n            array.push(7);\n            array.push(8);\n            array.push(9);\n\n            assert_eq(array.len(), 3);\n            assert_eq(array.get(0), 7);\n            assert_eq(array.get(1), 8);\n            assert_eq(array.get(2), 9);\n\n            array.remove(1);\n\n            assert_eq(array.len(), 2);\n            assert_eq(array.get(0), 7);\n            assert_eq(array.get(1), 9);\n        });\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n\n            let array = CapsuleArray::at(contract_address, SLOT);\n\n            array.push(7);\n            array.push(8);\n            array.push(9);\n\n            array.remove(1);\n            array.remove(1);\n            array.remove(0);\n\n            assert_eq(array.len(), 0);\n        });\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let array = CapsuleArray::at(contract_address, SLOT);\n\n            array.push(4);\n            array.push(5);\n            array.push(6);\n\n            // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n            // we do not care about the order in which each tuple was passed to the closure.\n            let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n            array.for_each(|index, value| { called_with.push((index, value)); });\n\n            assert_eq(called_with.len(), 3);\n            assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n            assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n            assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n        });\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let array = CapsuleArray::at(contract_address, SLOT);\n\n            array.push(4);\n            array.push(5);\n            array.push(6);\n\n            array.for_each(|index, _| {\n                if index == 1 {\n                    array.remove(index);\n                }\n            });\n\n            assert_eq(array.len(), 2);\n            assert_eq(array.get(0), 4);\n            assert_eq(array.get(1), 6);\n        });\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let array = CapsuleArray::at(contract_address, SLOT);\n\n            array.push(4);\n            array.push(5);\n            array.push(6);\n\n            array.for_each(|index, _| { array.remove(index); });\n\n            assert_eq(array.len(), 0);\n        });\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all_no_copy() {\n        let env = TestEnvironment::new();\n        env.private_context(|context| {\n            let contract_address = context.this_address();\n            let array = CapsuleArray::at(contract_address, SLOT);\n\n            array.push(4);\n            array.push(5);\n            array.push(6);\n\n            // We test that the utilityCopyCapsule was never called, which is the expensive operation we want to avoid.\n            let mock = std::test::OracleMock::mock(\"utilityCopyCapsule\");\n\n            array.for_each(|index, _| { array.remove(index); });\n\n            assert_eq(mock.times_called(), 0);\n        });\n    }\n}\n"
    },
    "62": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let M: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T> PrivateCallInterface<M, T>\nwhere\n    T: Deserialize,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    /// Makes the call to this private function.\n    ///\n    /// # Arguments\n    /// * `context` - The PrivateContext -- made magically available to the body\n    ///               of every #[private] function as `context`, through the\n    ///               #[private] annotation's macro.\n    ///\n    /// # Returns\n    /// * `T` - Whatever data the called function has returned.\n    ///\n    /// This enables contracts to interact with each other while maintaining\n    /// privacy. This \"composability\" of private contract functions is a key\n    /// feature of the Aztec network.\n    ///\n    /// If a user's transaction includes multiple private function calls, then\n    /// by the design of Aztec, the following information will remain private[1]:\n    /// - The function selectors and contract addresses of all private function\n    ///   calls will remain private, so an observer of the public mempool will\n    ///   not be able to look at a tx and deduce which private functions have\n    ///   been executed.\n    /// - The arguments and return values of all private function calls will\n    ///   remain private.\n    /// - The person who initiated the tx will remain private.\n    /// - The notes and nullifiers and private logs that are emitted by all\n    ///   private function calls will (if designed well) not leak any user\n    ///   secrets, nor leak which functions have been executed.\n    ///\n    /// [1] Caveats: Some of these privacy guarantees depend on how app\n    /// developers design their smart contracts. Some actions _can_ leak\n    /// information, such as:\n    /// - Calling an internal public function.\n    /// - Calling a public function and not setting msg_sender to Option::none\n    ///   (see https://github.com/AztecProtocol/aztec-packages/pull/16433)\n    /// - Calling any public function will always leak details about the nature\n    ///   of the transaction, so devs should be careful in their contract\n    ///   designs. If it can be done in a private function, then that will give\n    ///   the best privacy.\n    /// - Not padding the side-effects of a tx to some standardised, uniform\n    ///   size. The kernel circuits can take hints to pad side-effects, so a\n    ///   wallet should be able to request for a particular amount of padding.\n    ///   Wallets should ideally agree on some standard.\n    ///   - Padding should include:\n    ///     - Padding the lengths of note & nullifier arrays\n    ///     - Padding private logs with random fields, up to some standardised\n    ///       size.\n    /// See also: https://docs.aztec.network/developers/reference/considerations/privacy_considerations\n    ///\n    /// # Advanced\n    /// * The call is added to the private call stack and executed by kernel\n    ///   circuits after this function completes\n    /// * The called function can modify its own contract's private state\n    /// * Side effects from the called function are included in this transaction\n    /// * The call inherits the current transaction's context and gas limits\n    ///\n    /// # Arguments\n    /// * `context` - The PrivateContext -- made magically available to the body\n    ///               of every #[private] function as `context`, through the\n    ///               #[private] annotation's macro.\n    ///\n    /// # Returns\n    /// * `T` - Whatever data the called function has returned.\n    ///\n    pub fn call(self, context: &mut PrivateContext) -> T {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n\n        // If T is () (i.e. if the function does not return anything) then `get_preimage` will constrain that the\n        // returns hash is empty as per the protocol rules.\n        returns_hash.get_preimage()\n    }\n\n    /// Makes a _read-only_ call to this private function.\n    ///\n    /// This is similar to Solidity's `staticcall`. The called function\n    /// cannot modify state, emit L2->L1 messages, nor emit events. Any nested\n    /// calls are constrained to also be staticcalls.\n    ///\n    /// See `call` for more general info on private function calls.\n    ///\n    /// # Arguments\n    /// * `context` - The PrivateContext -- made magically available to the body\n    ///               of every #[private] function as `context`, through the\n    ///               #[private] annotation's macro.\n    ///\n    /// # Returns\n    /// * `T` - Whatever data the called function has returned.\n    ///\n    pub fn view(self, context: &mut PrivateContext) -> T {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        // If T is () (i.e. if the function does not return anything) then `get_preimage` will constrain that the\n        // returns hash is empty as per the protocol rules.\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let M: u32, T> CallInterface<M> for PrivateCallInterface<M, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let M: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T> PrivateStaticCallInterface<M, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    /// Makes a read-only call to this private function.\n    ///\n    /// This is similar to Solidity's `staticcall`. The called function\n    /// cannot modify state, emit L2->L1 messages, nor emit events. Any nested\n    /// calls are constrained to also be staticcalls.\n    ///\n    /// # Arguments\n    /// * `context` - The PrivateContext -- made magically available to the body\n    ///               of every #[private] function as `context`, through the\n    ///               #[private] annotation's macro.\n    ///\n    pub fn view(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let M: u32, T> CallInterface<M> for PrivateStaticCallInterface<M, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let M: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T> PublicCallInterface<M, T>\nwhere\n    T: Deserialize,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    /// Makes the call to this public function.\n    ///\n    /// Will revert if the called function reverts or runs out of gas.\n    ///\n    /// # Arguments\n    /// * `context` - The PublicContext -- made magically available to the body\n    ///               of every #[public] function as `context`, through the\n    ///               #[public] annotation's macro.\n    ///\n    /// # Returns\n    /// * `T` - Whatever data the called function has returned.\n    ///\n    pub unconstrained fn call(self, context: &mut PublicContext) -> T {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        // If T is () (i.e. if the function does not return anything) then `as_array` will constrain that `returns` has\n        // a length of 0 (since that is ()'s deserialization length).\n        Deserialize::deserialize(returns.as_array())\n    }\n\n    /// Makes a read-only call to this public function.\n    ///\n    /// This is similar to Solidity's `staticcall`. The called function\n    /// cannot modify state or emit events. Any nested calls are constrained to\n    /// also be staticcalls.\n    ///\n    /// Will revert if the called function reverts or runs out of gas.\n    ///\n    /// # Arguments\n    /// * `context` - The PublicContext -- made magically available to the body\n    ///               of every #[public] function as `context`, through the\n    ///               #[public] annotation's macro.\n    ///\n    /// # Returns\n    /// * `T` - Whatever data the called function has returned.\n    ///\n    pub unconstrained fn view(self, context: &mut PublicContext) -> T {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        // If T is () (i.e. if the function does not return anything) then `as_array` will constrain that `returns` has\n        // a length of 0 (since that is ()'s deserialization length).\n        Deserialize::deserialize(returns.as_array())\n    }\n\n    /// Enqueues a call to this public function, to be executed later.\n    ///\n    /// Unlike private functions which execute immediately on the user's device,\n    /// public function calls are \"enqueued\" and executed some time later by a\n    /// block proposer.\n    ///\n    /// This means a public function cannot return any values back to a private\n    /// function, because by the time the public function is being executed,\n    /// the private function which called it has already completed execution.\n    /// (In fact, the private function has been executed and proven, along with\n    /// all other private function calls of the user's tx. A single proof of the\n    /// tx has been submitted to the Aztec network, and some time later a\n    /// proposer has picked the tx up from the mempool and begun executing all\n    /// of the enqueued public functions).\n    ///\n    /// # Privacy warning\n    /// Enqueueing a public function call is an inherently leaky action.\n    /// Many interesting applications will require some interaction with public\n    /// state, but smart contract developers should try to use public function\n    /// calls sparingly, and carefully.\n    /// _Internal_ public function calls are especially leaky, because they\n    /// completely leak which private contract made the call.\n    /// See also: https://docs.aztec.network/developers/reference/considerations/privacy_considerations\n    ///\n    /// # Arguments\n    /// * `context` - The PrivateContext -- made magically available to the body\n    ///               of every #[private] function as `context`, through the\n    ///               #[private] annotation's macro.\n    ///\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    /// Enqueues a read-only call to this public function.\n    ///\n    /// This is similar to Solidity's `staticcall`. The called function\n    /// cannot modify state, emit L2->L1 messages, nor emit events. Any nested\n    /// calls are constrained to also be staticcalls.\n    ///\n    /// # Arguments\n    /// * `context` - The PrivateContext -- made magically available to the body\n    ///               of every #[private] function as `context`, through the\n    ///               #[private] annotation's macro.\n    ///\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    /// Enqueues a call to this public function, and designates it to be the\n    /// teardown function for this tx. Only one teardown function call can be\n    /// made by a tx.\n    ///\n    /// Niche function: Only wallet developers and paymaster contract developers\n    /// (aka Fee-payment contracts) will need to make use of this function.\n    ///\n    /// Aztec supports a three-phase execution model: setup, app logic, teardown.\n    /// The phases exist to enable a fee payer to take on the risk of paying\n    /// a transaction fee, safe in the knowledge that their payment (in whatever\n    /// token or method the user chooses) will succeed, regardless of whether\n    /// the app logic will succeed. The \"setup\" phase ensures the fee payer\n    /// has sufficient balance to pay the proposer their fees.\n    /// The teardown phase is primarily intended to: calculate exactly\n    /// how much the user owes, based on gas consumption, and refund the user\n    /// any change.\n    ///\n    /// Note: in some cases, the cost of refunding the user (i.e. DA costs of\n    /// tx side-effects) might exceed the refund amount. For app logic with\n    /// fairly stable and predictable gas consumption, a material refund amount\n    /// is unlikely. For app logic with unpredictable gas consumption, a\n    /// refund might be important to the user (e.g. if a hefty function reverts\n    /// very early). Wallet/FPC/Paymaster developers should be mindful of this.\n    ///\n    /// See `enqueue` for more information about enqueuing public function calls.\n    ///\n    /// # Arguments\n    /// * `context` - The PrivateContext -- made magically available to the body\n    ///               of every #[private] function as `context`, through the\n    ///               #[private] annotation's macro.\n    ///\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let M: u32, T> CallInterface<M> for PublicCallInterface<M, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let M: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let M: u32, T> PublicStaticCallInterface<M, T>\nwhere\n    T: Deserialize,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    /// Makes the read-only call to this public function.\n    ///\n    /// This is similar to Solidity's `staticcall`. The called function\n    /// cannot modify state or emit events. Any nested calls are constrained to\n    /// also be staticcalls.\n    ///\n    /// Will revert if the called function reverts or runs out of gas.\n    ///\n    /// # Arguments\n    /// * `context` - The PublicContext -- made magically available to the body\n    ///               of every #[public] function as `context`, through the\n    ///               #[public] annotation's macro.\n    ///\n    /// # Returns\n    /// * `T` - Whatever data the called function has returned.\n    ///\n    pub unconstrained fn view(self, context: &mut PublicContext) -> T {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array())\n    }\n\n    /// Enqueues a read-only call to this public function.\n    ///\n    /// This is similar to Solidity's `staticcall`. The called function\n    /// cannot modify state, emit L2->L1 messages, nor emit events. Any nested\n    /// calls are constrained to also be staticcalls.\n    ///\n    /// # Arguments\n    /// * `context` - The PrivateContext -- made magically available to the body\n    ///               of every #[private] function as `context`, through the\n    ///               #[private] annotation's macro.\n    ///\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let M: u32, T> CallInterface<M> for PublicStaticCallInterface<M, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// UtilityCallInterface\n\npub struct UtilityCallInterface<let M: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n}\n\nimpl<let M: u32, T> CallInterface<M> for UtilityCallInterface<M, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        false\n    }\n}\n\nimpl<let M: u32, T> UtilityCallInterface<M, T> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: std::mem::zeroed() }\n    }\n\n    pub fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    pub fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    pub fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    pub fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n}\n"
    },
    "69": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        logs::notify_created_contract_class_log,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        block_header::BlockHeader,\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        log_hash::LogHash,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::{PrivateLog, PrivateLogData},\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        CONTRACT_CLASS_LOG_SIZE_IN_FIELDS, MAX_CONTRACT_CLASS_LOGS_PER_CALL,\n        MAX_ENQUEUED_CALLS_PER_CALL, MAX_INCLUDE_BY_TIMESTAMP_DURATION,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    hash::poseidon2_hash,\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::{ClaimedLengthArray, trimmed_array_length_hint},\n};\n\n/// # PrivateContext\n///\n/// The **main interface** between a #[private] function and the Aztec blockchain.\n///\n/// An instance of the PrivateContext is initialized automatically at the outset\n/// of every private function, within the #[private] macro, so you'll never\n/// need to consciously instantiate this yourself.\n///\n/// The instance is always named `context`, and it is always be available within\n/// the body of every #[private] function in your smart contract.\n///\n/// > For those used to \"vanilla\" Noir, it might be jarring to have access to\n/// > `context` without seeing a declaration `let context = PrivateContext::new(...)`\n/// > within the body of your function. This is just a consequence of using\n/// > macros to tidy-up verbose boilerplate. You can use `nargo expand` to\n/// > expand all macros, if you dare.\n///\n/// Typical usage for a smart contract developer will be to call getter\n/// methods of the PrivateContext.\n///\n/// _Pushing_ data and requests to the context is mostly handled within\n/// aztec-nr's own functions, so typically a smart contract developer won't\n/// need to call any setter methods directly.\n///\n/// > Advanced users might occasionally wish to push data to the context\n/// > directly for lower-level control. If you find yourself doing this, please\n/// > open an issue on GitHub to describe your use case: it might be that\n/// > new functionality should be added to aztec-nr.\n///\n/// ## Responsibilities\n/// - Exposes contextual data to a private function:\n///   - Data relating to how this private function was called.\n///     - msg_sender\n///     - this_address - (the contract address of the private function being\n///                      executed)\n///     - See `CallContext` for more data.\n///   - Data relating to the transaction in which this private function is\n///     being executed.\n///     - chain_id\n///     - version\n///     - gas_settings\n/// - Provides state access:\n///   - Access to the \"Anchor block\" header.\n///     Recall, a private function cannot read from the \"current\" block header,\n///     but must read from some historical block header, because as soon as\n///     private function execution begins (asynchronously, on a user's device),\n///     the public state of the chain (the \"current state\") will have progressed\n///     forward. We call this reference the \"Anchor block\".\n///     See `BlockHeader`.\n///   - Enables consumption of L1->L2 messages.\n/// - Enables calls to functions of other smart contracts:\n///   - Private function calls\n///   - Enqueueing of public function call requests\n///     (Since public functions are executed at a later time, by a block\n///     proposer, we say they are \"enqueued\").\n/// - Writes data to the blockchain:\n///   - New notes\n///   - New nullifiers\n///   - Private logs (for sending encrypted note contents or encrypted events)\n///   - New L2->L1 messages.\n/// - Provides args to the private function (handled by the #[private] macro).\n/// - Returns the return values of this private function (handled by the\n///   #[private] macro).\n/// - Makes Key Validation Requests.\n///   - Private functions are not allowed to see master secret keys, because we\n///     do not trust them. They are instead given \"app-siloed\" secret keys with\n///     a claim that they relate to a master public key. They can then request\n///     validation of this claim, by making a \"key validation request\" to the\n///     protocol's kernel circuits (which _are_ allowed to see certain master\n///     secret keys).\n///\n/// ## Advanced Responsibilities\n///\n/// - Ultimately, the PrivateContext is responsible for constructing the\n///   PrivateCircuitPublicInputs of the private function being executed.\n///   All private functions on Aztec must have public inputs which adhere\n///   to the rigid layout of the PrivateCircuitPublicInputs, in order to be\n///   compatible with the protocol's kernel circuits.\n///   A well-known misnomer:\n///   - \"public inputs\" contain both inputs and outputs of this function.\n///     - By \"outputs\" we mean a lot more side-effects than just the\n///       \"return values\" of the function.\n///   - Most of the so-called \"public inputs\" are kept _private_, and never leak\n///     to the outside world, because they are 'swallowed' by the protocol's\n///     kernel circuits before the tx is sent to the network. Only the\n///     following are exposed to the outside world:\n///     - New note_hashes\n///     - New nullifiers\n///     - New private logs\n///     - New L2->L1 messages\n///     - New enqueued public function call requests\n///     All the above-listed arrays of side-effects can be padded by the\n///     user's wallet (through instructions to the kernel circuits, via the\n///     PXE) to obscure their true lengths.\n///\n/// ## Syntax Justification\n///\n/// Both user-defined functions _and_ most functions in aztec-nr need access to\n/// the PrivateContext instance to read/write data. This is why you'll see the\n/// arguably-ugly pervasiveness of the \"context\" throughout your smart contract\n/// and the aztec-nr library.\n/// For example, `&mut context` is prevalent. In some languages, you can access\n/// and mutate a global variable (such as a PrivateContext instance) from a\n/// function without polluting the function's parameters. With Noir, a function\n/// must explicitly pass control of a mutable variable to another function, by\n/// reference. Since many functions in aztec-nr need to be able to push new data\n/// to the PrivateContext, they need to be handed a mutable reference _to_ the\n/// context as a parameter.\n/// For example, `Context` is prevalent as a generic parameter, to give better\n/// type safety at compile time. Many `aztec-nr` functions don't make sense if\n/// they're called in a particular runtime (private, public or utility), and so\n/// are intentionally only implemented over certain\n/// [Private|Public|Utility]Context structs. This gives smart contract\n/// developers a much faster feedback loop if they're making a mistake, as an\n/// error will be thrown by the LSP or when they compile their contract.\n///\n#[derive(Eq)]\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub include_by_timestamp: u64,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<Counted<L2ToL1Message>, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<Counted<LogHash>, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        let max_allowed_include_by_timestamp =\n            inputs.historical_header.global_variables.timestamp + MAX_INCLUDE_BY_TIMESTAMP_DURATION;\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            include_by_timestamp: max_allowed_include_by_timestamp,\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    /// Returns the contract address that initiated this function call.\n    ///\n    /// This is similar to `msg.sender` in Solidity (hence the name).\n    ///\n    /// Important Note: Since Aztec doesn't have a concept of an EoA (\n    /// Externally-owned Account), the msg_sender is \"undefined\" for the first\n    /// function call of every transaction. A value of `-1` is returned in such\n    /// cases.\n    /// The first function call of a tx is likely to be a call to the user's\n    /// account contract, so this quirk will most often be handled by account\n    /// contract developers.\n    ///\n    /// TODO(https://github.com/AztecProtocol/aztec-packages/issues/14025) - we\n    /// are considering making msg_sender: Option<AztecAddress>, since\n    /// a returned value of `Option:none` will be clearer to developers.\n    ///\n    /// # Returns\n    /// * `AztecAddress` - The address of the smart contract that called\n    ///   this function (be it an app contract or a user's account contract).\n    ///   Returns `-1` for the first function call of the tx.\n    ///\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    /// Returns the contract address of the current function being executed.\n    ///\n    /// This is equivalent to `address(this)` in Solidity (hence the name).\n    /// Use this to identify the current contract's address, commonly needed for\n    /// access control or when interacting with other contracts.\n    ///\n    /// # Returns\n    /// * `AztecAddress` - The contract address of the current function being\n    ///                    executed.\n    ///\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    /// Returns the chain ID of the current network.\n    ///\n    /// This is similar to `block.chainid` in Solidity. Returns the unique\n    /// identifier for the blockchain network this transaction is executing on.\n    ///\n    /// Helps prevent cross-chain replay attacks. Useful if implementing\n    /// multi-chain contract logic.\n    ///\n    /// # Returns\n    /// * `Field` - The chain ID as a field element\n    ///\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    /// Returns the Aztec protocol version that this transaction is executing\n    /// under. Different versions may have different rules, opcodes, or\n    /// cryptographic primitives.\n    ///\n    /// This is similar to how Ethereum has different EVM versions.\n    ///\n    /// Useful for forward/backward compatibility checks\n    ///\n    /// Not to be confused with contract versions; this is the protocol version.\n    ///\n    /// # Returns\n    /// * `Field` - The protocol version as a field element\n    ///\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    /// Returns the gas settings for the current transaction.\n    ///\n    /// This provides information about gas limits and pricing for the\n    /// transaction, similar to `tx.gasprice` and gas limits in Ethereum.\n    /// However, Aztec has a more sophisticated gas model with separate\n    /// accounting for L2 computation and data availability (DA) costs.\n    ///\n    /// # Returns\n    /// * `GasSettings` - Struct containing gas limits and fee information\n    ///\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    /// Returns the function selector of the currently executing function.\n    ///\n    /// Low-level function: Ordinarily, smart contract developers will not need\n    /// to access this.\n    ///\n    /// This is similar to `msg.sig` in Solidity, which returns the first 4\n    /// bytes of the function signature. In Aztec, the selector uniquely\n    /// identifies which function within the contract is being called.\n    ///\n    /// # Returns\n    /// * `FunctionSelector` - The 4-byte function identifier\n    ///\n    /// # Advanced\n    /// Only #[private] functions have a function selector as a protocol-\n    /// enshrined concept. The function selectors of private functions are\n    /// baked into the preimage of the contract address, and are used by the\n    /// protocol's kernel circuits to identify each private function and ensure\n    /// the correct one is being executed.\n    ///\n    /// Used internally for function dispatch and call verification.\n    ///\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    /// Returns the hash of the arguments passed to the current function.\n    ///\n    /// Very low-level function: You shouldn't need to call this. The #[private]\n    /// macro calls this, and it makes the arguments neatly available to the\n    /// body of your private function.\n    ///\n    /// # Returns\n    /// * `Field` - Hash of the function arguments\n    ///\n    /// # Advanced\n    /// * Arguments are hashed to reduce proof size and verification time\n    /// * Enables efficient argument passing in recursive function calls\n    /// * The hash can be used to retrieve the original arguments from the PXE.\n    ///\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    /// Pushes a new note_hash to the Aztec blockchain's global Note Hash Tree\n    /// (a state tree).\n    ///\n    /// A note_hash is a commitment to a piece of private state.\n    ///\n    /// Low-level function: Ordinarily, smart contract developers will not need\n    /// to manually call this. Aztec-nr's state variables (see `../state_vars/`)\n    /// are designed to understand when to create and push new note hashes.\n    ///\n    /// # Arguments\n    /// * `note_hash` - The new note_hash.\n    ///\n    /// # Advanced\n    /// From here, the protocol's kernel circuits will take over and insert the\n    /// note_hash into the protocol's \"note hash tree\" (in the Base Rollup\n    /// circuit).\n    /// Before insertion, the protocol will:\n    /// - \"Silo\" the `note_hash` with the contract address of this function,\n    ///   to yield a `siloed_note_hash`. This prevents state collisions\n    ///   between different smart contracts.\n    /// - Ensure uniqueness of the `siloed_note_hash`, to prevent Faerie-Gold\n    ///   attacks, by hashing the `siloed_note_hash` with a unique value, to\n    ///   yield a `unique_siloed_note_hash` (see the protocol spec for more).\n    ///\n    /// In addition to calling this function, aztec-nr provides the contents\n    /// of the newly-created note to the PXE, via the `notify_created_note`\n    /// oracle.\n    ///\n    /// > Advanced users might occasionally wish to push data to the context\n    /// > directly for lower-level control. If you find yourself doing this,\n    /// > please open an issue on GitHub to describe your use case: it might be\n    /// > that new functionality should be added to aztec-nr.\n    ///\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    /// Pushes a new nullifier to the Aztec blockchain's global Nullifier Tree\n    /// (a state tree).\n    ///\n    /// See also: `push_nullifier_for_note_hash`.\n    ///\n    /// Low-level function: Ordinarily, smart contract developers will not need\n    /// to manually call this. Aztec-nr's state variables (see `../state_vars/`)\n    /// are designed to understand when to create and push new nullifiers.\n    ///\n    /// A nullifier can only be emitted once. Duplicate nullifier insertions are\n    /// rejected by the protocol.\n    ///\n    /// Generally, a nullifier is emitted to prevent an action from happening\n    /// more than once, in such a way that the action cannot be linked (by an\n    /// observer of the blockchain) to any earlier transactions.\n    ///\n    /// I.e. a nullifier is a random-looking, but deterministic record of a\n    /// private, one-time action, which does not leak what action has been\n    /// taken, and which preserves the property of \"tx unlinkability\".\n    ///\n    /// Usually, a nullifier will be emitted to \"spend\" a note (a piece of\n    /// private state), without revealing which specific note is being spent.\n    ///\n    /// (Important: in such cases, use the below `push_nullifier_for_note_hash`).\n    ///\n    /// Sometimes, a nullifier might be emitted completely unrelated to any\n    /// notes. Examples include initialization of a new contract; initialization\n    /// of a PrivateMutable, or signalling in Semaphore-like applications.\n    /// This `push_nullifier` function serves such use cases.\n    ///\n    /// # Arguments\n    /// * `nullifier`\n    ///\n    /// # Advanced\n    /// From here, the protocol's kernel circuits will take over and insert the\n    /// nullifier into the protocol's \"nullifier tree\" (in the Base Rollup\n    /// circuit).\n    /// Before insertion, the protocol will:\n    /// - \"Silo\" the `nullifier` with the contract address of this function,\n    ///   to yield a `siloed_nullifier`. This prevents state collisions\n    ///   between different smart contracts.\n    /// - Ensure the `siloed_nullifier` is unique (the nullifier tree is an\n    ///   indexed merkle tree which supports efficient non-membership proofs).\n    ///\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    /// Pushes a nullifier that corresponds to a specific note hash.\n    ///\n    /// Low-level function: Ordinarily, smart contract developers will not need\n    /// to manually call this. Aztec-nr's state variables (see `../state_vars/`)\n    /// are designed to understand when to create and push new nullifiers.\n    ///\n    /// This is a specialized version of `push_nullifier` that links a nullifier\n    /// to the specific note hash it's nullifying. This is the most common\n    /// usage pattern for nullifiers.\n    /// See `push_nullifier` for more explanation on nullifiers.\n    ///\n    /// # Arguments\n    /// * `nullifier`\n    /// * `nullified_note_hash` - The note hash of the note being nullified\n    ///\n    /// # Advanced\n    /// Important: usage of this function doesn't mean that the world will _see_\n    /// that this nullifier relates to the given nullified_note_hash (as that\n    /// would violate \"tx unlinkability\"); it simply informs the user's PXE\n    /// about the relationship (via `notify_nullified_note`). The PXE can then\n    /// use this information to feed hints to the kernel circuits for\n    /// \"squashing\" purposes: If a note is nullified during the same tx which\n    /// created it, we can \"squash\" (delete) the note and nullifier (and any\n    /// private logs associated with the note), to save on data emission costs.\n    ///\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    /// Returns the anchor block header - the historical block header that this\n    /// private function is reading from.\n    ///\n    /// A private function CANNOT read from the \"current\" block header,\n    /// but must read from some historical block header, because as soon as\n    /// private function execution begins (asynchronously, on a user's device),\n    /// the public state of the chain (the \"current state\") will have progressed\n    /// forward.\n    ///\n    /// # Returns\n    /// * `BlockHeader` - The anchor block header.\n    ///\n    /// # Advanced\n    /// * All private functions of a tx read from the same anchor block header.\n    /// * The protocol asserts that the `include_by_timestamp` of every tx\n    ///   is at most 24 hours beyond the timestamp of the tx's chosen anchor\n    ///   block header. This enables the network's nodes to safely prune old txs\n    ///   from the mempool. Therefore, the chosen block header _must_ be one\n    ///   from within the last 24 hours.\n    ///\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    /// Returns the header of any historical block at or before the anchor\n    /// block.\n    ///\n    /// This enables private contracts to access information from even older\n    /// blocks than the anchor block header.\n    ///\n    /// Useful for time-based contract logic that needs to compare against\n    /// multiple historical points.\n    ///\n    /// # Arguments\n    /// * `block_number` - The block number to retrieve (must be <= anchor\n    ///                    block number)\n    ///\n    /// # Returns\n    /// * `BlockHeader` - The header of the requested historical block\n    ///\n    /// # Advanced\n    /// This function uses an oracle to fetch block header data from the user's\n    /// PXE. Depending on how much blockchain data the user's PXE has been set\n    /// up to store, this might require a query from the PXE to another Aztec\n    /// node to get the data.\n    /// > This is generally true of all oracle getters (see `../oracle`).\n    ///\n    /// Each block header gets hashed and stored as a leaf in the protocol's\n    /// Archive Tree. In fact, the i-th block header gets stored at the i-th\n    /// leaf index of the Archive Tree. Behind the scenes, this\n    /// `get_block_header_at` function will add Archive Tree merkle-membership\n    /// constraints (~3k) to your smart contract function's circuit, to prove\n    /// existence of the block header in the Archive Tree.\n    ///\n    /// Note: we don't do any caching, so avoid making duplicate calls for the\n    /// same block header, because each call will add duplicate constraints.\n    ///\n    /// Calling this function is more expensive (constraint-wise) than getting\n    /// the anchor block header (via `get_block_header`). This is because the\n    /// anchor block's merkle membership proof is handled by Aztec's protocol\n    /// circuits, and is only performed once for the entire tx because all\n    /// private functions of a tx share a common anchor block header. Therefore,\n    /// the cost (constraint-wise) of calling `get_block_header` is effectively\n    /// free.\n    ///\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    /// Sets the hash of the return values for this private function.\n    ///\n    /// Very low-level function: this is called by the #[private] macro.\n    ///\n    /// # Arguments\n    /// * `returns_hasher` - A hasher containing the return values to hash\n    ///\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    /// Builds the PrivateCircuitPublicInputs for this private function, to\n    /// ensure compatibility with the protocol's kernel circuits.\n    ///\n    /// Very low-level function: This function is automatically called by the\n    /// #[private] macro.\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            include_by_timestamp: self.include_by_timestamp,\n            note_hash_read_requests: ClaimedLengthArray::from_bounded_vec(\n                self.note_hash_read_requests,\n            ),\n            nullifier_read_requests: ClaimedLengthArray::from_bounded_vec(\n                self.nullifier_read_requests,\n            ),\n            key_validation_requests_and_generators: ClaimedLengthArray::from_bounded_vec(\n                self.key_validation_requests_and_generators,\n            ),\n            note_hashes: ClaimedLengthArray::from_bounded_vec(self.note_hashes),\n            nullifiers: ClaimedLengthArray::from_bounded_vec(self.nullifiers),\n            private_call_requests: ClaimedLengthArray::from_bounded_vec(self.private_call_requests),\n            public_call_requests: ClaimedLengthArray::from_bounded_vec(self.public_call_requests),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: ClaimedLengthArray::from_bounded_vec(self.l2_to_l1_msgs),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: ClaimedLengthArray::from_bounded_vec(self.private_logs),\n            contract_class_logs_hashes: ClaimedLengthArray::from_bounded_vec(\n                self.contract_class_logs_hashes,\n            ),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    /// Designates this contract as the fee payer for the transaction.\n    ///\n    /// Unlike Ethereum, where the transaction sender always pays fees, Aztec\n    /// allows any contract to voluntarily pay transaction fees. This enables\n    /// patterns like sponsored transactions or fee abstraction where users\n    /// don't need to hold fee-juice themselves. (Fee juice is a fee-paying\n    /// asset for Aztec).\n    ///\n    /// Only one contract per transaction can declare itself as the fee payer,\n    /// and it must have sufficient fee-juice balance (>= the gas limits\n    /// specified in the TxContext) by the time we reach the public setup phase\n    /// of the tx.\n    ///\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    /// Declares the end of the \"setup phase\" of this tx.\n    ///\n    /// Only one function per tx can declare the end of the setup phase.\n    ///\n    /// Niche function: Only wallet developers and paymaster contract developers\n    /// (aka Fee-payment contracts) will need to make use of this function.\n    ///\n    /// Aztec supports a three-phase execution model: setup, app logic, teardown.\n    /// The phases exist to enable a fee payer to take on the risk of paying\n    /// a transaction fee, safe in the knowledge that their payment (in whatever\n    /// token or method the user chooses) will succeed, regardless of whether\n    /// the app logic will succeed. The \"setup\" phase enables such a payment to\n    /// be made, because the setup phase _cannot revert_: a reverting function\n    /// within the setup phase would result in an invalid block which cannot\n    /// be proven. Any side-effects generated during that phase are guaranteed\n    /// to be inserted into Aztec's state trees (except for squashed notes &\n    /// nullifiers, of course).\n    ///\n    /// Even though the end of the setup phase is declared within a private\n    /// function, you might have noticed that _public_ functions can also\n    /// execute within the setup phase. This is because any public function\n    /// calls which were enqueued _within the setup phase_ by a private\n    /// function are considered part of the setup phase.\n    ///\n    /// # Advanced\n    /// * Sets the minimum revertible side effect counter of this tx to be the\n    /// PrivateContext's _current_ side effect counter.\n    ///\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    /// Sets a deadline (an \"include-by timestamp\") for when this transaction\n    /// must be included in a block.\n    ///\n    /// Other functions in this tx might call this setter with differing\n    /// values for the include-by timestamp. To ensure that all functions'\n    /// deadlines are met, the _minimum_ of all these include-by timestamps will\n    /// be exposed when this tx is submitted to the network.\n    ///\n    /// If the transaction is not included in a block by its include-by\n    /// timestamp, it becomes invalid and it will never be included.\n    ///\n    /// This expiry timestamp is publicly visible. See the \"Advanced\" section\n    /// for privacy concerns.\n    ///\n    /// # Arguments\n    /// * `include_by_timestamp` - Unix timestamp (seconds) deadline for inclusion.\n    ///                            The include-by timestamp of this tx will be\n    ///                            _at most_ the timestamp specified.\n    ///\n    /// # Advanced\n    /// * If multiple functions set differing `include_by_timestamp`s, the\n    ///   kernel circuits will set it to be the _minimum_ of the two. This\n    ///   ensures the tx expiry requirements of all functions in the tx are met.\n    /// * Rollup circuits will reject expired txs.\n    /// * The protocol enforces that all transactions must be included within\n    ///   24 hours of their chosen anchor block's timestamp, to enable safe\n    ///   mempool pruning.\n    /// * The DelayedPublicMutable design makes heavy use of this functionality,\n    ///   to enable private functions to read public state.\n    /// * A sophisticated Wallet should cleverly set an include-by timestamp\n    ///   to improve the privacy of the user and the network as a whole.\n    ///   For example, if a contract interaction sets include-by to some\n    ///   publicly-known value (e.g. the time when a contract upgrades), then\n    ///   the wallet might wish to set an even lower one to avoid revealing that\n    ///   this tx is interacting with said contract.\n    ///   Ideally, all wallets should standardise on an approach in order to\n    ///   provide users with a large anonymity set -- although the exact apprach\n    ///   will need to be discussed. Wallets that deviate from a standard might\n    ///   accidentally reveal which wallet each transaction originates from.\n    ///\n    // docs:start:include-by-timestamp\n    pub fn set_include_by_timestamp(&mut self, include_by_timestamp: u64) {\n        // docs:end:include-by-timestamp\n        self.include_by_timestamp = std::cmp::min(self.include_by_timestamp, include_by_timestamp);\n    }\n\n    /// Makes a request to the protocol's kernel circuit to ensure a note_hash\n    /// actually exists.\n    ///\n    /// \"Read requests\" are used to prove that a note hash exists without\n    /// revealing which specific note was read.\n    ///\n    /// This can be used to prove existence of both settled notes (created in\n    /// prior transactions) and transient notes (created in the current\n    /// transaction).\n    /// If you need to prove existence of a settled note _at a specific block\n    /// number_, use `note_inclusion::prove_note_inclusion`.\n    ///\n    /// Low-level function. Ordinarily, smart contract developers will not need\n    /// to call this directly. Aztec-nr's state variables (see `../state_vars/`)\n    /// are designed to understand when to create and push new note_hash read\n    /// requests.\n    ///\n    /// # Arguments\n    /// * `note_hash` - The note hash to read and verify\n    ///\n    /// # Advanced\n    /// In \"traditional\" circuits for non-Aztec privacy applications, the merkle\n    /// membership proofs to check existence of a note are performed _within_\n    /// the application circuit.\n    ///\n    /// All Aztec private functions have access to the following constraint\n    /// optimisation:\n    /// In cases where the note being read was created earlier in the same tx,\n    /// the note wouldn't yet exist in the Note Hash Tree, so a hard-coded\n    /// merkle membership check which then gets ignored would be a waste of\n    /// constraints.\n    /// Instead, we can send read requests for all notes to the protocol's\n    /// kernel circuits, where we can conditionally assess which notes actually\n    /// need merkle membership proofs, and select an appropriately-sized\n    /// kernel circuit.\n    ///\n    /// For \"settled notes\" (which already existed in the Note Hash Tree of the\n    /// anchor block (i.e. before the tx began)), the kernel does a merkle\n    /// membership check.\n    ///\n    /// For \"pending notes\" (which were created earlier in _this_ tx), the\n    /// kernel will check that the note existed _before_ this read request was\n    /// made, by checking the side-effect counters of the note_hash and this\n    /// read request.\n    ///\n    /// This approach improves latency between writes and reads:\n    /// a function can read a note which was created earlier in the tx (rather\n    /// than performing the read in a later tx, after waiting for the earlier tx\n    /// to be included, to ensure the note is included in the tree).\n    ///\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    /// Requests to read a specific nullifier from the nullifier tree.\n    ///\n    /// Nullifier read requests are used to prove that a nullifier exists without\n    /// revealing which specific nullifier preimage was read.\n    ///\n    /// This can be used to prove existence of both settled nullifiers (created in\n    /// prior transactions) and transient nullifiers (created in the current\n    /// transaction).\n    /// If you need to prove existence of a settled nullifier _at a specific block\n    /// number_, use `nullifier_inclusion::prove_nullifier_inclusion`.\n    ///\n    /// Low-level function. Ordinarily, smart contract developers will not need\n    /// to call this directly. Aztec-nr's state variables (see `../state_vars/`)\n    /// are designed to understand when to create and push new nullifier read\n    /// requests.\n    ///\n    /// # Arguments\n    /// * `nullifier` - The nullifier to read and verify\n    ///\n    /// # Advanced\n    /// This approach improves latency between writes and reads:\n    /// a function can read a nullifier which was created earlier in the tx\n    /// (rather than performing the read in a later tx, after waiting for the\n    /// earlier tx to be included, to ensure the note is included in the tree).\n    ///\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    /// Requests the app-siloed nullifier secret key (nsk_app) for the given\n    /// (hashed) master nullifier public key (npk_m), from the user's PXE.\n    ///\n    /// Advanced function: Only needed if you're designing your own notes and/or\n    /// nullifiers.\n    ///\n    /// Contracts are not allowed to compute nullifiers for other contracts, as\n    /// that would let them read parts of their private state. Because of this,\n    /// a contract is only given an \"app-siloed secret key\", which is\n    /// constructed by hashing the user's master nullifier secret key with the\n    /// contract's address.\n    /// However, because contracts cannot be trusted with a user's master\n    /// nullifier secret key (because we don't know which contracts are honest\n    /// or malicious), the PXE refuses to provide any master secret keys to\n    /// any app smart contract function. This means app functions are unable to\n    /// prove that the derivation of an app-siloed nullifier secret key has been\n    /// computed correctly. Instead, an app function can request to the kernel\n    /// (via `request_nsk_app`) that it validates the siloed derivation, since\n    /// the kernel has been vetted to not leak any master secret keys.\n    ///\n    /// A common nullification scheme is to inject a nullifier secret key into\n    /// the preimage of a nullifier, to make the nullifier deterministic but\n    /// random-looking. This function enables that flow.\n    ///\n    /// # Arguments\n    /// * `npk_m_hash` - A hash of the master nullifier public key of the user\n    ///                  whose PXE is executing this function.\n    ///\n    /// # Returns\n    /// * The app-siloed nullifier secret key that corresponds to the given\n    ///   `npk_m_hash`.\n    ///\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    /// Requests the app-siloed nullifier secret key (nsk_app) for the given\n    /// (hashed) master nullifier public key (npk_m), from the user's PXE.\n    ///\n    /// See `request_nsk_app` and `request_sk_app` for more info.\n    ///\n    /// The intention of the \"outgoing\" keypair is to provide a second secret\n    /// key for all of a user's outgoing activity (i.e. for notes that a user\n    /// creates, as opposed to notes that a user receives from others). The\n    /// separation of incoming and outgoing data was a distinction made by\n    /// zcash, with the intention of enabling a user to optionally share with a\n    /// 3rd party a controlled view of only incoming or outgoing notes.\n    /// Similar functionality of sharing select data can be achieved with\n    /// offchain zero-knowledge proofs. It is up to an app developer whether\n    /// they choose to make use of a user's outgoing keypair within their\n    /// application logic, or instead simply use the same keypair (the address\n    /// keypair (which is effectively the same as the \"incooming\" keypair)) for\n    /// all incoming & outgoing messages to a user.\n    ///\n    /// Currently, all of the exposed encryption functions in aztec-nr ignore\n    /// the outgoing viewing keys, and instead encrypt all note logs and event\n    /// logs to a user's address public key.\n    ///\n    /// # Arguments\n    /// * `ovpk_m_hash` - Hash of the outgoing viewing public key master\n    ///\n    /// # Returns\n    /// * The application-specific outgoing viewing secret key\n    ///\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    /// Pushes a Key Validation Request to the kernel.\n    ///\n    /// Private functions are not allowed to see a user's master secret keys,\n    /// because we do not trust them. They are instead given \"app-siloed\" secret\n    /// keys with a claim that they relate to a master public key.\n    /// They can then request validation of this claim, by making a \"key\n    /// validation request\" to the protocol's kernel circuits (which _are_\n    /// allowed to see certain master secret keys).\n    ///\n    /// When a Key Validation Request tuple of (sk_app, Pk_m, app_address) is\n    /// submitted to the kernel, it will perform the following derivations\n    /// to validate the relationship between the claimed sk_app and the user's\n    /// Pk_m:\n    ///\n    ///       (sk_m) ----> * G ----> Pk_m\n    ///         |                     |\n    ///         v                       We use the kernel to prove this\n    ///  h(sk_m, app_address)         | sk_app-Pk_m relationship, because app\n    ///         |                       circuits must not be trusted to see sk_m.\n    ///         v                     |\n    ///      sk_app - -  - - - - - - -\n    ///\n    /// The function is named \"request_\" instead of \"get_\" to remind the user\n    /// that a Key Validation Request will be emitted to the kernel.\n    ///\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    /// Sends an \"L2 -> L1 message\" from this function (Aztec, L2) to a smart\n    /// contract on Ethereum (L1). L1 contracts which are designed to\n    /// send/receive messages to/from Aztec are called \"Portal Contracts\".\n    ///\n    /// Common use cases include withdrawals, cross-chain asset transfers, and\n    /// triggering L1 actions based on L2 state changes.\n    ///\n    /// The message will be inserted into an Aztec \"Outbox\" contract on L1,\n    /// when this transaction's block is proposed to L1.\n    /// Sending the message will not result in any immediate state changes in\n    /// the target portal contract. The message will need to be manually\n    /// consumed from the Outbox through a separate Ethereum transaction: a user\n    /// will need to call a function of the portal contract -- a function\n    /// specifically designed to make a call to the Outbox to consume the\n    /// message.\n    /// The message will only be available for consumption once the _epoch_\n    /// proof has been submitted. Given that there are multiple Aztec blocks\n    /// within an epoch, it might take some time for this epoch proof to be\n    /// submitted -- especially if the block was near the start of an epoch.\n    ///\n    /// # Arguments\n    /// * `recipient` - Ethereum address that will receive the message\n    /// * `content` - Message content (32 bytes as a Field element).\n    ///               This content has a very specific layout.\n    /// docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.l2_to_l1_msgs.push(message.count(self.next_counter()));\n    }\n\n    /// Consumes a message sent from Ethereum (L1) to Aztec (L2).\n    ///\n    /// Common use cases include token bridging, cross-chain governance, and\n    /// triggering L2 actions based on L1 events.\n    ///\n    /// Use this function if you only want the message to ever be \"referred to\"\n    /// once. Once consumed using this method, the message cannot be consumed\n    /// again, because a nullifier is emitted.\n    /// If your use case wants for the message to be read unlimited times, then\n    /// you can always read any historic message from the L1-to-L2 messages tree;\n    /// messages never technically get deleted from that tree.\n    ///\n    /// The message will first be inserted into an Aztec \"Inbox\" smart contract\n    /// on L1.\n    /// Sending the message will not result in any immediate state changes in\n    /// the target L2 contract. The message will need to be manually\n    /// consumed by the target contract through a separate Aztec transaction.\n    /// The message will not be available for consumption immediately. Messages\n    /// get copied over from the L1 Inbox to L2 by the next Proposer in batches.\n    /// So you will need to wait until the messages are copied before you can\n    /// consume them.\n    ///\n    /// # Arguments\n    /// * `content` - The message content that was sent from L1\n    /// * `secret` - Secret value used for message privacy (if needed)\n    /// * `sender` - Ethereum address that sent the message\n    /// * `leaf_index` - Index of the message in the L1-to-L2 message tree\n    ///\n    /// # Advanced\n    /// Validates message existence in the L1-to-L2 message tree and nullifies\n    /// the message to prevent double-consumption.\n    ///\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    /// Emits a private log (an array of Fields) that will be published to an\n    /// Ethereum blob.\n    ///\n    /// Private logs are intended for the broadcasting of ciphertexts: that is,\n    /// encrypted events or encrypted note contents.\n    /// Since the data in the logs is meant to be _encrypted_, private_logs are\n    /// broadcast to publicly-visible Ethereum blobs.\n    /// The intended recipients of such encrypted messages can then discover and\n    /// decrypt these encrypted logs using their viewing secret key.\n    /// (See `../messages/discovery` for more details).\n    ///\n    /// Important note: This function DOES NOT _do_ any encryption of the input\n    /// `log` fields. This function blindly publishes whatever input `log` data\n    /// is fed into it, so the caller of this function should have already\n    /// performed the encryption, and the `log` should be the result of that\n    /// encryption.\n    ///\n    /// The protocol does not dictate what encryption scheme should be used:\n    /// a smart contract developer can choose whatever encryption scheme they\n    /// like.\n    /// Aztec-nr includes some off-the-shelf encryption libraries that\n    /// developers might wish to use, for convenience. These libraries not only\n    /// encrypt a plaintext (to produce a ciphertext); they also prepend the\n    /// ciphertext with a `tag` and `ephemeral public key` for easier message\n    /// discovery. This is a very dense topic, and we will be writing more\n    /// libraries and docs soon.\n    ///\n    /// > Currently, AES128 CBC encryption is the main scheme included in\n    /// > aztec.nr.\n    /// > We are currently making significant changes to the interfaces of the\n    /// > encryption library.\n    ///\n    /// In some niche use cases, an app might be tempted to publish\n    /// _un-encrypted_ data via a private log, because _public logs_ are not\n    /// available to private functions. Be warned that emitting public data via\n    /// private logs is strongly discouraged, and is considered a \"privacy\n    /// anti-pattern\", because it reveals identifiable information about _which_\n    /// function has been executed. A tx which leaks such information does not\n    /// contribute to the privacy set of the network.\n    ///\n    /// * Unlike `emit_raw_note_log`, this log is not tied to any specific note\n    ///\n    /// # Arguments\n    /// * `log` - The log data that will be publicly broadcast (so make sure\n    ///           it's already been encrypted before you call this function).\n    ///   Private logs are bounded in size (PRIVATE_LOG_SIZE_IN_FIELDS), to\n    ///   encourage all logs from all smart contracts look identical.\n    /// * `length` - The actual length of the `log` (measured in number of\n    ///              Fields). Although the input log has a max size of\n    ///   PRIVATE_LOG_SIZE_IN_FIELDS, the latter values of the array might all\n    ///   be 0's for small logs. This `length` should reflect the trimmed length\n    ///   of the array. The protocol's kernel circuits can then append random\n    ///   fields as \"padding\" after the `length`, so that the logs of this\n    ///   smart contract look indistinguishable from (the same length as) the\n    ///   logs of all other applications. It's up to wallets how much padding\n    ///   to apply, so ideally all wallets should agree on standards for this.\n    ///\n    /// # Advanced\n    ///\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS], length: u32) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    // TODO: rename.\n    /// Emits a private log that is explicitly tied to a newly-emitted note_hash,\n    /// to convey to the kernel: \"this log relates to this note\".\n    ///\n    /// This linkage is important in case the note gets squashed (due to being\n    /// read later in this same tx), since we can then squash the log as well.\n    ///\n    /// See `emit_private_log` for more info about private log emission.\n    ///\n    /// # Arguments\n    /// * `log` - The log data as an array of Field elements\n    /// * `length` - The actual length of the `log` (measured in number of\n    ///              Fields).\n    /// * `note_hash_counter` - The side-effect counter that was assigned to the\n    ///                         new note_hash when it was pushed to this\n    //                          `PrivateContext`.\n    ///\n    /// Important: If your application logic requires the log to always be\n    /// emitted regardless of note squashing, consider using `emit_private_log`\n    /// instead, or emitting additional events.\n    ///\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        length: u32,\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_contract_class_log<let N: u32>(&mut self, log: [Field; N]) {\n        let contract_address = self.this_address();\n        let counter = self.next_counter();\n\n        let log_to_emit: [Field; CONTRACT_CLASS_LOG_SIZE_IN_FIELDS] =\n            log.concat([0; CONTRACT_CLASS_LOG_SIZE_IN_FIELDS - N]);\n        // Note: the length is not always N, it is the number of fields we want to broadcast, omitting trailing zeros to save blob space.\n        // Safety: The below length is constrained in the base rollup, which will make sure that all the fields beyond length are zero.\n        let length = unsafe { trimmed_array_length_hint(log_to_emit) };\n        // We hash the entire padded log to ensure a user cannot pass a shorter length and so emit incorrect shorter bytecode.\n        let log_hash = poseidon2_hash(log_to_emit);\n        // Safety: the below only exists to broadcast the raw log, so we can provide it to the base rollup later to be constrained.\n        unsafe {\n            notify_created_contract_class_log(contract_address, log_to_emit, length, counter);\n        }\n\n        self.contract_class_logs_hashes.push(LogHash { value: log_hash, length: length }.count(\n            counter,\n        ));\n    }\n\n    /// Calls a private function on another contract (or the same contract).\n    ///\n    /// Very low-level function.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    /// * `args` - Array of arguments to pass to the called function\n    ///\n    /// # Returns\n    /// * `ReturnsHash` - Hash of the called function's return values. Use\n    ///   `.get_preimage()` to extract the actual return values.\n    ///\n    /// This enables contracts to interact with each other while maintaining\n    /// privacy. This \"composability\" of private contract functions is a key\n    /// feature of the Aztec network.\n    ///\n    /// If a user's transaction includes multiple private function calls, then\n    /// by the design of Aztec, the following information will remain private[1]:\n    /// - The function selectors and contract addresses of all private function\n    ///   calls will remain private, so an observer of the public mempool will\n    ///   not be able to look at a tx and deduce which private functions have\n    ///   been executed.\n    /// - The arguments and return values of all private function calls will\n    ///   remain private.\n    /// - The person who initiated the tx will remain private.\n    /// - The notes and nullifiers and private logs that are emitted by all\n    ///   private function calls will (if designed well) not leak any user\n    ///   secrets, nor leak which functions have been executed.\n    ///\n    /// [1] Caveats: Some of these privacy guarantees depend on how app\n    /// developers design their smart contracts. Some actions _can_ leak\n    /// information, such as:\n    /// - Calling an internal public function.\n    /// - Calling a public function and not setting msg_sender to Option::none\n    ///   (feature not built yet - see github).\n    /// - Calling any public function will always leak details about the nature\n    ///   of the transaction, so devs should be careful in their contract\n    ///   designs. If it can be done in a private function, then that will give\n    ///   the best privacy.\n    /// - Not padding the side-effects of a tx to some standardised, uniform\n    ///   size. The kernel circuits can take hints to pad side-effects, so a\n    ///   wallet should be able to request for a particular amount of padding.\n    ///   Wallets should ideally agree on some standard.\n    ///   - Padding should include:\n    ///     - Padding the lengths of note & nullifier arrays\n    ///     - Padding private logs with random fields, up to some standardised\n    ///       size.\n    /// See also: https://docs.aztec.network/developers/reference/considerations/privacy_considerations\n    ///\n    /// # Advanced\n    /// * The call is added to the private call stack and executed by kernel\n    ///   circuits after this function completes\n    /// * The called function can modify its own contract's private state\n    /// * Side effects from the called function are included in this transaction\n    /// * The call inherits the current transaction's context and gas limits\n    ///\n    pub fn call_private_function<let ArgsCount: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ArgsCount],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    /// Makes a read-only call to a private function on another contract.\n    ///\n    /// This is similar to Solidity's `staticcall`. The called function\n    /// cannot modify state or emit events. Any nested calls are constrained to\n    /// also be staticcalls.\n    ///\n    /// See `call_private_function` for more general info on private function\n    /// calls.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract to call\n    /// * `function_selector` - 4-byte identifier of the function to call\n    /// * `args` - Array of arguments to pass to the called function\n    ///\n    /// # Returns\n    /// * `ReturnsHash` - Hash of the called function's return values. Use\n    ///   `.get_preimage()` to extract the actual return values.\n    ///\n    pub fn static_call_private_function<let ArgsCount: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ArgsCount],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    /// Calls a private function that takes no arguments.\n    ///\n    /// This is a convenience function for calling private functions that don't\n    /// require any input parameters. It's equivalent to `call_private_function`\n    /// but slightly more efficient to use when no arguments are needed.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    ///\n    /// # Returns\n    /// * `ReturnsHash` - Hash of the called function's return values. Use\n    ///   `.get_preimage()` to extract the actual return values.\n    ///\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    /// Makes a read-only call to a private function which takes no arguments.\n    ///\n    /// This combines the optimisation of `call_private_function_no_args` with\n    /// the safety of `static_call_private_function`.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    ///\n    /// # Returns\n    /// * `ReturnsHash` - Hash of the called function's return values. Use\n    ///   `.get_preimage()` to extract the actual return values.\n    ///\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    /// Low-level private function call.\n    ///\n    /// This is the underlying implementation used by all other private function\n    /// call methods. Instead of taking raw arguments, it accepts a\n    /// hash of the arguments.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    /// * `args_hash` - Pre-computed hash of the function arguments\n    /// * `is_static_call` - Whether this should be a read-only call\n    ///\n    /// # Returns\n    /// * `ReturnsHash` - Hash of the called function's return values\n    ///\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1; // TODO: call `next_counter` instead, for consistency\n        ReturnsHash::new(returns_hash)\n    }\n\n    /// Enqueues a call to a public function to be executed later.\n    ///\n    /// Unlike private functions which execute immediately on the user's device,\n    /// public function calls are \"enqueued\" and executed some time later by a\n    /// block proposer.\n    ///\n    /// This means a public function cannot return any values back to a private\n    /// function, because by the time the public function is being executed,\n    /// the private function which called it has already completed execution.\n    /// (In fact, the private function has been executed and proven, along with\n    /// all other private function calls of the user's tx. A single proof of the\n    /// tx has been submitted to the Aztec network, and some time later a\n    /// proposer has picked the tx up from the mempool and begun executing all\n    /// of the enqueued public functions).\n    ///\n    /// # Privacy warning\n    /// Enqueueing a public function call is an inherently leaky action.\n    /// Many interesting applications will require some interaction with public\n    /// state, but smart contract developers should try to use public function\n    /// calls sparingly, and carefully.\n    /// _Internal_ public function calls are especially leaky, because they\n    /// completely leak which private contract made the call.\n    /// See also: https://docs.aztec.network/developers/reference/considerations/privacy_considerations\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    /// * `args` - Array of arguments to pass to the public function\n    ///\n    pub fn call_public_function<let ArgsCount: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ArgsCount],\n    ) {\n        let calldata = [function_selector.to_field()].concat(args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    /// Enqueues a read-only call to a public function.\n    ///\n    /// This is similar to Solidity's `staticcall`. The called function\n    /// cannot modify state or emit events. Any nested calls are constrained to\n    /// also be staticcalls.\n    ///\n    /// See also `call_public_function` for more important information about\n    /// making private -> public function calls.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    /// * `args` - Array of arguments to pass to the public function\n    ///\n    pub fn static_call_public_function<let ArgsCount: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ArgsCount],\n    ) {\n        let calldata = [function_selector.to_field()].concat(args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    /// Enqueues a call to a public function that takes no arguments.\n    ///\n    /// This is an optimisation for calling public functions that don't\n    /// take any input parameters. It's otherwise equivalent to\n    /// `call_public_function`.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    ///\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    /// Enqueues a read-only call to a public function with no arguments.\n    ///\n    /// This combines the optimisation of `call_public_function_no_args` with\n    /// the safety of `static_call_public_function`.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `function_selector` - 4-byte identifier of the function to call\n    ///\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    /// Low-level public function call.\n    ///\n    /// This is the underlying implementation used by all other public function\n    /// call methods. Instead of taking raw arguments, it accepts a\n    /// hash of the arguments.\n    ///\n    /// Advanced function: Most developers should use `call_public_function`\n    /// or `static_call_public_function` instead. This function is exposed for\n    /// performance optimization and advanced use cases.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the function\n    /// * `calldata_hash` - Hash of the function calldata\n    /// * `is_static_call` - Whether this should be a read-only call\n    ///\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    /// Enqueues a public function call, and designates it to be the teardown\n    /// function for this tx. Only one teardown function call can be made by a\n    /// tx.\n    ///\n    /// Niche function: Only wallet developers and paymaster contract developers\n    /// (aka Fee-payment contracts) will need to make use of this function.\n    ///\n    /// Aztec supports a three-phase execution model: setup, app logic, teardown.\n    /// The phases exist to enable a fee payer to take on the risk of paying\n    /// a transaction fee, safe in the knowledge that their payment (in whatever\n    /// token or method the user chooses) will succeed, regardless of whether\n    /// the app logic will succeed. The \"setup\" phase ensures the fee payer\n    /// has sufficient balance to pay the proposer their fees.\n    /// The teardown phase is primarily intended to: calculate exactly\n    /// how much the user owes, based on gas consumption, and refund the user\n    /// any change.\n    ///\n    /// Note: in some cases, the cost of refunding the user (i.e. DA costs of\n    /// tx side-effects) might exceed the refund amount. For app logic with\n    /// fairly stable and predictable gas consumption, a material refund amount\n    /// is unlikely. For app logic with unpredictable gas consumption, a\n    /// refund might be important to the user (e.g. if a heft function reverts\n    /// very early). Wallet/FPC/Paymaster developers should be mindful of this.\n    ///\n    pub fn set_public_teardown_function<let ArgsCount: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ArgsCount],\n    ) {\n        let calldata = [function_selector.to_field()].concat(args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    /// Low-level function to set the public teardown function.\n    ///\n    /// This is the underlying implementation for setting the teardown function\n    /// call that will execute at the end of the transaction. Instead of taking\n    /// raw arguments, it accepts a hash of the arguments.\n    ///\n    /// Advanced function: Most developers should use\n    /// `set_public_teardown_function` instead.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract containing the teardown\n    ///                        function\n    /// * `calldata_hash` - Hash of the function calldata\n    /// * `is_static_call` - Whether this should be a read-only call\n    ///\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    /// Increments the side-effect counter.\n    ///\n    /// Very low-level function.\n    ///\n    /// # Advanced\n    ///\n    /// Every side-effect of a private function is given a \"side-effect counter\",\n    /// based on when it is created. This PrivateContext is in charge of\n    /// assigning the counters.\n    ///\n    /// The reason we have side-effect counters is complicated. Consider this\n    /// illustrative pseudocode of inter-contract function calls:\n    /// ```\n    /// contract A {\n    ///    let x = 5; // pseudocode for storage var x.\n    ///    fn a1 {\n    ///        read x; // value: 5, counter: 1.\n    ///        x = x + 1;\n    ///        write x; // value: 6, counter: 2.\n    ///\n    ///        B.b(); // start_counter: 2, end_counter: 4\n    ///\n    ///        read x; // value: 36, counter: 5.\n    ///        x = x + 1;\n    ///        write x; // value: 37, counter: 6.\n    ///    }\n    ///\n    ///    fn a2 {\n    ///        read x; // value: 6, counter: 3.\n    ///        x = x * x;\n    ///        write x; // value: 36, counter: 4.\n    ///    }\n    /// }\n    ///\n    /// contract B {\n    ///     fn b() {\n    ///         A.a2();\n    ///     }\n    /// }\n    /// ```\n    ///\n    /// Suppose a1 is the first function called. The comments show the execution\n    /// counter of each side-effect, and what the new value of `x` is.\n    ///\n    /// These (private) functions are processed by Aztec's kernel circuits in an\n    /// order that is different from execution order:\n    /// All of A.a1 is proven before B.b is proven, before A.a2 is proven.\n    /// So when we're in the 2nd execution frame of A.a1 (after the call to\n    /// B.b), the circuit needs to justify why x went from being `6` to `36`.\n    /// But the circuit doesn't know why, and given the order of proving, the\n    /// kernel hasn't _seen_ a value of 36 get written yet.\n    /// The kernel needs to track big arrays of all side-effects of all\n    /// private functions in a tx. Then, as it recurses and processes B.b(), it\n    /// will eventually see a value of 36 get written.\n    ///\n    /// Suppose side-effect counters weren't exposed:\n    /// The kernel would only see this ordering (in order of proof verification):\n    /// [ A.a1.read, A.a1.write, A.a1.read, A.a1.write, A.a2.read, A.a2.write ]\n    /// [         5,          6,        36,         37,         6,         36 ]\n    /// The kernel wouldn't know _when_ B.b() was called within A.a1(), because\n    /// it can't see what's going on within an app circuit. So the kernel\n    /// wouldn't know that the ordering of reads and writes should actually be:\n    /// [ A.a1.read, A.a1.write, A.a2.read, A.a2.write, A.a1.read, A.a1.write ]\n    /// [         5,          6,        6,         36,         36,         37 ]\n    ///\n    /// And so, we introduced side-effect counters: every private function must\n    /// assign side-effect counters alongside every side-effect that it emits,\n    /// and also expose to the kernel the counters that it started and ended\n    /// with.\n    /// This gives the kernel enough information to arrange all side-effects in\n    /// the correct order.\n    /// It can then catch (for example) if a function tries to read state\n    /// before it has been written (e.g. if A.a2() maliciously tried to read\n    /// a value of x=37) (e.g. if A.a1() maliciously tried to read x=6).\n    ///\n    /// If a malicious app contract _lies_ and does not count correctly:\n    /// - It cannot lie about its start and end counters because the kernel\n    ///   will catch this.\n    /// - It _could_ lie about its intermediate counters:\n    ///   - 1. It could not increment its side-effects correctly\n    ///   - 2. It could label its side-effects with counters outside of its\n    ///        start and end counters' range.\n    ///   The kernel will catch 2.\n    ///   The kernel will not catch 1., but this would only cause corruption\n    ///   to the private state of the malicious contract, and not any other\n    ///   contracts (because a contract can only modify its own state). If\n    ///   a \"good\" contract is given _read access_ to a maliciously-counting\n    ///   contract (via an external getter function, or by reading historic\n    ///   state from the archive tree directly), and they then make state\n    ///   changes to their _own_ state accordingly, that could be dangerous.\n    ///   Developers should be mindful not to trust the claimed innards of\n    ///   external contracts unless they have audited/vetted the contracts\n    ///   including vetting the side-effect counter incrementation.\n    ///   This is a similar paradigm to Ethereum smart contract development:\n    ///   you must vet external contracts that your contract relies upon, and\n    ///   you must not make any presumptions about their claimed behaviour.\n    ///   (Hopefully if a contract imports a version of aztec-nr, we will get\n    ///   contract verification tooling that can validate the authenticity\n    ///   of the imported aztec-nr package, and hence infer that the side-\n    ///   effect counting will be correct, without having to re-audit such logic\n    ///   for every contract).\n    ///\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            include_by_timestamp: 0,\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "70": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_U32_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\n/// # PublicContext\n///\n/// The **main interface** between a #[public] function and the Aztec blockchain.\n///\n/// An instance of the PublicContext is initialized automatically at the outset\n/// of every public function, within the #[public] macro, so you'll never\n/// need to consciously instantiate this yourself.\n///\n/// The instance is always named `context`, and it will always be available\n/// within the body of every #[public] function in your smart contract.\n///\n/// Typical usage for a smart contract developer will be to call getter\n/// methods of the PublicContext.\n///\n/// _Pushing_ data and requests to the context is mostly handled within\n/// aztec-nr's own functions, so typically a smart contract developer won't\n/// need to call any setter methods directly.\n///\n/// ## Responsibilities\n/// - Exposes contextual data to a public function:\n///   - Data relating to how this public function was called:\n///     - msg_sender, this_address\n///   - Data relating to the current blockchain state:\n///     - timestamp, block_number, chain_id, version\n///   - Gas and fee information\n/// - Provides state access:\n///   - Read/write public storage (key-value mapping)\n///   - Check existence of notes and nullifiers\n///     (Some patterns use notes & nullifiers to store public (not private)\n///     information)\n///   - Enables consumption of L1->L2 messages.\n/// - Enables calls to other public smart contract functions:\n/// - Writes data to the blockchain:\n///   - Updates to public state variables\n///   - New public logs (for events)\n///   - New L2->L1 messages\n///   - New notes & nullifiers\n///     (E.g. pushing public info to notes/nullifiers, or for completing\n///     \"partial notes\")\n///\n/// ## Key Differences from Private Execution\n///\n/// Unlike private functions -- which are executed on the user's device and which\n/// can only reference historic state -- public functions are executed by a block\n/// proposer and are executed \"live\" on the _current_ tip of the chain.\n/// This means public functions can:\n/// - Read and write _current_ public state\n/// - Immediately see the effects of earlier transactions in the same block\n///\n/// Also, public functions are executed within a zkVM (the \"AVM\"), so that they\n/// can _revert_ whilst still ensuring payment to the proposer and prover.\n/// (Private functions cannot revert: they either succeed, or they cannot be\n/// included).\n///\n/// ## Optimising Public Functions\n///\n/// Using the AVM to execute public functions means they compile down to \"AVM\n/// bytecode\" instead of the ACIR that private functions (standalone circuits)\n/// compile to. Therefore the approach to optimising a public function is\n/// fundamentally different from optimising a public function.\n///\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl Eq for PublicContext {\n    fn eq(self, other: Self) -> bool {\n        (self.args_hash == other.args_hash)\n        // Can't compare the function compute_args_hash\n    }\n}\n\nimpl PublicContext {\n    /// Creates a new PublicContext instance.\n    ///\n    /// Low-level function: This is called automatically by the #[public]\n    /// macro, so you shouldn't need to be called directly by smart contract\n    /// developers.\n    ///\n    /// # Arguments\n    /// * `compute_args_hash` - Function to compute the args_hash\n    ///\n    /// # Returns\n    /// * A new PublicContext instance\n    ///\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    /// Emits a _public_ log that will be visible onchain to everyone.\n    ///\n    /// # Arguments\n    /// * `log` - The data to log, must implement Serialize trait\n    ///\n    pub fn emit_public_log<T>(_self: &mut Self, log: T)\n    where\n        T: Serialize,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    /// Checks if a given note hash exists in the note hash tree at a particular\n    /// leaf_index.\n    ///\n    /// # Arguments\n    /// * `note_hash` - The note hash to check for existence\n    /// * `leaf_index` - The index where the note hash should be located\n    ///\n    /// # Returns\n    /// * `bool` - True if the note hash exists at the specified index\n    ///\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: u64) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    /// Checks if a specific L1-to-L2 message exists in the L1-to-L2 message\n    /// tree at a particular leaf index.\n    ///\n    /// Common use cases include token bridging, cross-chain governance, and\n    /// triggering L2 actions based on L1 events.\n    ///\n    /// This function should be called before attempting to consume an L1-to-L2\n    /// message.\n    ///\n    /// # Arguments\n    /// * `msg_hash` - Hash of the L1-to-L2 message to check\n    /// * `msg_leaf_index` - The index where the message should be located\n    ///\n    /// # Returns\n    /// * `bool` - True if the message exists at the specified index\n    ///\n    /// # Advanced\n    /// * Uses the AVM l1_to_l2_msg_exists opcode for tree lookup\n    /// * Messages are copied from L1 Inbox to L2 by block proposers\n    ///\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        // TODO(alvaro): Make l1l2msg leaf index a u64 upstream\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index as u64) } == 1\n    }\n\n    /// Checks if a specific nullifier has been emitted by a given contract.\n    ///\n    /// Whilst nullifiers are primarily intended as a _privacy-preserving_\n    /// record of a one-time action, they can also be used to efficiently\n    /// record _public_ one-time actions too. An example is to check\n    /// whether a contract has been published: we emit a nullifier that is\n    /// deterministic, but whose preimage is _not_ private. This is more\n    /// efficient than using mutable storage, and can be done directly\n    /// from a private function.\n    ///\n    /// Nullifiers can be tested for non-existence in public, which is not the\n    /// case in private. Because private functions do not have access to\n    /// the tip of the blockchain (but only the anchor block they are built\n    /// at) they can only prove nullifier non-existence in the past. But between\n    /// an anchor block and the block in which a tx is included, the nullifier\n    /// might have been inserted into the nullifier tree by some other\n    /// transaction.\n    /// Public functions _do_ have access to the tip of the state, and so\n    /// this pattern is safe.\n    ///\n    /// # Arguments\n    /// * `unsiloed_nullifier` - The raw nullifier value (before siloing with\n    ///                          the contract address that emitted it).\n    /// * `address` - The claimed contract address that emitted the nullifier\n    ///\n    /// # Returns\n    /// * `bool` - True if the nullifier has been emitted by the specified contract\n    ///\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    /// Consumes a message sent from Ethereum (L1) to Aztec (L2) -- effectively\n    /// marking it as \"read\".\n    ///\n    /// Use this function if you only want the message to ever be \"referred to\"\n    /// once. Once consumed using this method, the message cannot be consumed\n    /// again, because a nullifier is emitted.\n    /// If your use case wants for the message to be read unlimited times, then\n    /// you can always read any historic message from the L1-to-L2 messages tree,\n    /// using the `l1_to_l2_msg_exists` method. Messages never technically get\n    /// deleted from that tree.\n    ///\n    /// The message will first be inserted into an Aztec \"Inbox\" smart contract\n    /// on L1. It will not be available for consumption immediately. Messages\n    /// get copied-over from the L1 Inbox to L2 by the next Proposer in batches.\n    /// So you will need to wait until the messages are copied before you can\n    /// consume them.\n    ///\n    /// # Arguments\n    /// * `content` - The message content that was sent from L1\n    /// * `secret` - Secret value used for message privacy (if needed)\n    /// * `sender` - Ethereum address that sent the message\n    /// * `leaf_index` - Index of the message in the L1-to-L2 message tree\n    ///\n    /// # Advanced\n    /// * Validates message existence in the L1-to-L2 message tree\n    /// * Prevents double-consumption by emitting a nullifier\n    /// * Message hash is computed from all parameters + chain context\n    /// * Will revert if message doesn't exist or was already consumed\n    ///\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    /// Sends an \"L2 -> L1 message\" from this function (Aztec, L2) to a smart\n    /// contract on Ethereum (L1). L1 contracts which are designed to\n    /// send/receive messages to/from Aztec are called \"Portal Contracts\".\n    ///\n    /// Common use cases include withdrawals, cross-chain asset transfers, and\n    /// triggering L1 actions based on L2 state changes.\n    ///\n    /// The message will be inserted into an Aztec \"Outbox\" contract on L1,\n    /// when this transaction's block is proposed to L1.\n    /// Sending the message will not result in any immediate state changes in\n    /// the target portal contract. The message will need to be manually\n    /// consumed from the Outbox through a separate Ethereum transaction: a user\n    /// will need to call a function of the portal contract -- a function\n    /// specifically designed to make a call to the Outbox to consume the\n    /// message.\n    /// The message will only be available for consumption once the _epoch_\n    /// proof has been submitted. Given that there are multiple Aztec blocks\n    /// within an epoch, it might take some time for this epoch proof to be\n    /// submitted -- especially if the block was near the start of an epoch.\n    ///\n    /// # Arguments\n    /// * `recipient` - Ethereum address that will receive the message\n    /// * `content` - Message content (32 bytes as a Field element)\n    ///\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    /// Calls a public function on another contract.\n    ///\n    /// Will revert if the called function reverts or runs out of gas.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract to call\n    /// * `function_selector` - Function to call on the target contract\n    /// * `args` - Arguments to pass to the function\n    /// * `gas_opts` - An optional allocation of gas to the called function.\n    ///\n    /// # Returns\n    /// * `[Field]` - Return data from the called function\n    ///\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(\n            gas_opts.l2_gas.unwrap_or(MAX_U32_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_U32_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    /// Makes a read-only call to a public function on another contract.\n    ///\n    /// This is similar to Solidity's `staticcall`. The called function\n    /// cannot modify state or emit events. Any nested calls are constrained to\n    /// also be staticcalls.\n    ///\n    /// Useful for querying data from other contracts safely.\n    ///\n    /// Will revert if the called function reverts or runs out of gas.\n    ///\n    /// # Arguments\n    /// * `contract_address` - Address of the contract to call\n    /// * `function_selector` - Function to call on the target contract\n    /// * `args` - Array of arguments to pass to the called function\n    /// * `gas_opts` - An optional allocation of gas to the called function.\n    ///\n    /// # Returns\n    /// * `[Field]` - Return data from the called function\n    ///\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(\n            gas_opts.l2_gas.unwrap_or(MAX_U32_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_U32_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    /// Adds a new note hash to the Aztec blockchain's global Note Hash Tree.\n    ///\n    /// Notes are ordinarily constructed and emitted by _private_ functions, to\n    /// ensure that both the content of the note, and the contract that emitted\n    /// the note, stay private.\n    ///\n    /// There are however some useful patterns whereby a note needs to contain\n    /// _public_ data. The ability to push a new note_hash from a _public_\n    /// function means that notes can be injected with public data immediately\n    /// -- as soon as the public value is known. The slower alternative would\n    /// be to submit a follow-up transaction so that a private function can\n    /// inject the data. Both are possible on Aztec.\n    ///\n    /// Search \"Partial Note\" for a very common pattern which enables a note\n    /// to be \"partially\" populated with some data in a _private_ function, and\n    /// then later \"completed\" with some data in a public function.\n    ///\n    /// # Arguments\n    /// * `note_hash` - The hash of the note to add to the tree\n    ///\n    /// # Advanced\n    /// * The note hash will be siloed with the contract address by the protocol\n    ///\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n\n    /// Adds a new nullifier to the Aztec blockchain's global Nullifier Tree.\n    ///\n    /// Whilst nullifiers are primarily intended as a _privacy-preserving_\n    /// record of a one-time action, they can also be used to efficiently\n    /// record _public_ one-time actions too. Hence why you're seeing this\n    /// function within the PublicContext.\n    /// An example is to check whether a contract has been published: we emit\n    /// a nullifier that is deterministic, but whose preimage is _not_ private.\n    ///\n    /// # Arguments\n    /// * `nullifier` - A unique field element that represents the consumed\n    ///   state\n    ///\n    /// # Advanced\n    /// * Nullifier is immediately added to the global nullifier tree\n    /// * Emitted nullifiers are immediately visible to all\n    ///   subsequent transactions in the same block\n    /// * Automatically siloed with the contract address by the protocol\n    /// * Used for preventing double-spending and ensuring one-time actions\n    ///\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    /// Returns the address of the current contract being executed.\n    ///\n    /// This is equivalent to `address(this)` in Solidity (hence the name).\n    /// Use this to identify the current contract's address, commonly needed for\n    /// access control or when interacting with other contracts.\n    ///\n    /// # Returns\n    /// * `AztecAddress` - The contract address of the current function being\n    ///                    executed.\n    ///\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n\n    /// Returns the contract address that initiated this function call.\n    ///\n    /// This is similar to `msg.sender` in Solidity (hence the name).\n    ///\n    /// Important Note: Since Aztec doesn't have a concept of an EoA (\n    /// Externally-owned Account), the msg_sender is \"undefined\" for the first\n    /// function call of every transaction. A value of `-1` is returned in such\n    /// cases, and is enforced by the protocol's kernel circuits.\n    /// The first function call of a tx is likely to be a call to the user's\n    /// account contract, so this quirk will most often be handled by account\n    /// contract developers.\n    ///\n    /// # Returns\n    /// * `AztecAddress` - The address of the account or contract that called\n    ///   this function\n    ///\n    /// # Examples\n    /// ```rust\n    /// #[aztec(public)]\n    /// fn transfer(context: &mut PublicContext, to: AztecAddress, amount: u64) {\n    ///     let sender = context.msg_sender();\n    ///     // Only the sender can transfer their own tokens\n    ///     assert(sender == get_token_owner(), \"Unauthorized\");\n    /// }\n    /// ```\n    ///\n    /// # Advanced\n    /// * Value is provided by the AVM sender opcode\n    /// * In nested calls, this is the immediate caller, not the original\n    ///   transaction sender\n    /// * Globally visible unlike private execution where it's contract-local\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n\n    /// Returns the function selector of the currently-executing function.\n    ///\n    /// This is similar to `msg.sig` in Solidity, returning the first 4\n    /// bytes of the function signature.\n    ///\n    /// # Returns\n    /// * `FunctionSelector` - The 4-byte function identifier\n    ///\n    /// # Advanced\n    /// * Extracted from the first element of calldata\n    /// * Used internally for function dispatch in the AVM\n    ///\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n\n    /// Returns the hash of the arguments passed to the current function.\n    ///\n    /// Very low-level function: The #[public] macro uses this internally.\n    /// Smart contract developers typically won't need to access this\n    /// directly as arguments are automatically made available.\n    ///\n    /// # Returns\n    /// * `Field` - Hash of the function arguments\n    ///\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n\n    /// Returns the \"transaction fee\" for the current transaction.\n    /// This is the final tx fee that will be deducted from the fee_payer's\n    /// \"fee-juice\" balance (in the protocol's Base Rollup circuit).\n    ///\n    /// # Returns\n    /// * `Field` - The actual, final cost of the transaction, taking into account:\n    ///             the actual gas used during the setup and app-logic phases,\n    ///             and the fixed amount of gas that's been allocated by the user\n    ///             for the teardown phase.\n    ///             I.e. effectiveL2FeePerGas * l2GasUsed + effectiveDAFeePerGas * daGasUsed\n    ///\n    /// This will return `0` during the \"setup\" and \"app-logic\" phases of\n    /// tx execution (because the final tx fee is not known at that time).\n    /// This will only return a nonzero value during the \"teardown\" phase of\n    /// execution, where the final tx fee can actually be computed.\n    ///\n    /// Regardless of _when_ this function is called during the teardown phase,\n    /// it will always return the same final tx fee value. The teardown phase\n    /// does not consume a variable amount of gas: it always consumes a\n    /// pre-allocated amount of gas, as specified by the user when they generate\n    /// their tx.\n    ///\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    /// Returns the chain ID of the current network.\n    ///\n    /// This is similar to `block.chainid` in Solidity. Returns the unique\n    /// identifier for the blockchain network this transaction is executing on.\n    ///\n    /// Helps prevent cross-chain replay attacks. Useful if implementing\n    /// multi-chain contract logic.\n    ///\n    /// # Returns\n    /// * `Field` - The chain ID as a field element\n    ///\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n\n    /// Returns the Aztec protocol version that this transaction is executing\n    /// under. Different versions may have different rules, opcodes, or\n    /// cryptographic primitives.\n    ///\n    /// This is similar to how Ethereum has different EVM versions.\n    ///\n    /// Useful for forward/backward compatibility checks\n    ///\n    /// Not to be confused with contract versions; this is the protocol version.\n    ///\n    /// # Returns\n    /// * `Field` - The protocol version as a field element\n    ///\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    /// Returns the current block number.\n    ///\n    /// This is similar to `block.number` in Solidity.\n    ///\n    /// Note: the current block number is only available within a public function\n    /// (as opposed to a private function).\n    ///\n    /// Note: the time intervals between blocks should not be relied upon as\n    /// being consistent:\n    /// - Timestamps of blocks fall within a range, rather than at exact regular\n    ///   intervals.\n    /// - Slots can be missed.\n    /// - Protocol upgrades can completely change the intervals between blocks\n    ///   (and indeed the current roadmap plans to reduce the time between\n    ///   blocks, eventually).\n    /// Use `context.timestamp()` for more-reliable time-based logic.\n    ///\n    /// # Returns\n    /// * `u32` - The current block number\n    ///\n    pub fn block_number(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n\n    /// Returns the timestamp of the current block.\n    ///\n    /// This is similar to `block.timestamp` in Solidity.\n    ///\n    /// All functions of all transactions in a block share the exact same\n    /// timestamp (even though technically each transaction is executed\n    /// one-after-the-other).\n    ///\n    /// Important note: Timestamps of Aztec blocks are not at reliably-fixed\n    /// intervals. The proposer of the block has some flexibility to choose a\n    /// timestamp which is in a valid _range_: Obviously the timestamp of this\n    /// block must be strictly greater than that of the previous block, and must\n    /// must be less than the timestamp of whichever ethereum block the aztec\n    /// block is proposed to. Furthermore, if the timestamp is not deemed close\n    /// enough to the actual current time, the committee of validators will not\n    /// attest to the block.\n    ///\n    /// # Returns\n    /// * `u64` - Unix timestamp in seconds\n    ///\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n\n    /// Returns the fee per unit of L2 gas for this transaction (aka the \"L2 gas\n    /// price\"), as chosen by the user.\n    ///\n    /// L2 gas covers the cost of executing public functions and handling\n    /// side-effects within the AVM.\n    ///\n    /// # Returns\n    /// * `u128` - Fee per unit of L2 gas\n    ///\n    /// Wallet developers should be mindful that the choice of gas price (which\n    /// is publicly visible) can leak information about the user, e.g.:\n    /// - which wallet software the user is using;\n    /// - the amount of time which has elapsed from the time the user's wallet\n    ///   chose a gas price (at the going rate), to the time of tx submission.\n    ///   This can give clues about the proving time, and hence the nature of\n    ///   the tx.\n    /// - the urgency of the transaction (which is kind of unavoidable, if the\n    ///   tx is indeed urgent).\n    /// - the wealth of the user.\n    /// - the exact user (if the gas price is explicitly chosen by the user to\n    ///   be some unique number like 0.123456789, or their favourite number).\n    /// Wallet devs might wish to consider fuzzing the choice of gas price.\n    ///\n    pub fn base_fee_per_l2_gas(_self: Self) -> u128 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            base_fee_per_l2_gas()\n        }\n    }\n\n    /// Returns the fee per unit of DA (Data Availability) gas (aka the \"DA gas\n    /// price\").\n    ///\n    /// DA gas covers the cost of making transaction data available on L1.\n    ///\n    /// See the warning in `fee_pre_l2_gas` for how gas prices can be leaky.\n    ///\n    /// # Returns\n    /// * `u128` - Fee per unit of DA gas\n    ///\n    pub fn base_fee_per_da_gas(_self: Self) -> u128 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            base_fee_per_da_gas()\n        }\n    }\n\n    /// Returns the remaining L2 gas available for this transaction.\n    ///\n    /// Different AVM opcodes consume different amounts of gas.\n    ///\n    /// # Returns\n    /// * `u32` - Remaining L2 gas units\n    ///\n    pub fn l2_gas_left(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n\n    /// Returns the remaining DA (Data Availability) gas available for this\n    /// transaction.\n    ///\n    /// DA gas is consumed when emitting data that needs to be made available\n    /// on L1, such as public logs or state updates.\n    /// All of the side-effects from the private part of the tx also consume\n    /// DA gas before execution of any public functions even begins.\n    ///\n    /// # Returns\n    /// * `u32` - Remaining DA gas units\n    ///\n    pub fn da_gas_left(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n\n    /// Checks if the current execution is within a staticcall context, where\n    /// no state changes or logs are allowed to be emitted (by this function\n    /// or any nested function calls).\n    ///\n    /// # Returns\n    /// * `bool` - True if in staticcall context, false otherwise\n    ///\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    /// Reads raw field values from public storage.\n    /// Reads N consecutive storage slots starting from the given slot.\n    ///\n    /// Very low-level function. Users should typically use the public state\n    /// variable abstractions to perform reads: PublicMutable & PublicImmutable.\n    ///\n    /// # Arguments\n    /// * `storage_slot` - The starting storage slot to read from\n    ///\n    /// # Returns\n    /// * `[Field; N]` - Array of N field values from consecutive storage slots\n    ///\n    /// # Generic Parameters\n    /// * `N` - the number of consecutive slots to return, starting from the\n    ///         `storage_slot`.\n    ///\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    /// Reads a typed value from public storage.\n    ///\n    /// Low-level function. Users should typically use the public state\n    /// variable abstractions to perform reads: PublicMutable & PublicImmutable.\n    ///\n    /// # Arguments\n    /// * `storage_slot` - The storage slot to read from\n    ///\n    /// # Returns\n    /// * `T` - The deserialized value from storage\n    ///\n    /// # Generic Parameters\n    /// * `T` - The type that the caller expects to read from the `storage_slot`.\n    ///\n    pub fn storage_read<T>(self, storage_slot: Field) -> T\n    where\n        T: Packable,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    /// Writes raw field values to public storage.\n    /// Writes to N consecutive storage slots starting from the given slot.\n    ///\n    /// Very low-level function. Users should typically use the public state\n    /// variable abstractions to perform writes: PublicMutable & PublicImmutable.\n    ///\n    /// Public storage writes take effect immediately.\n    ///\n    /// # Arguments\n    /// * `storage_slot` - The starting storage slot to write to\n    /// * `values` - Array of N Fields to write to storage\n    ///\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    /// Writes a typed value to public storage.\n    ///\n    /// Low-level function. Users should typically use the public state\n    /// variable abstractions to perform writes: PublicMutable & PublicImmutable.\n    ///\n    /// # Arguments\n    /// * `storage_slot` - The storage slot to write to\n    /// * `value` - The typed value to write to storage\n    ///\n    /// # Generic Parameters\n    /// * `T` - The type to write to storage.\n    ///\n    pub fn storage_write<T>(self, storage_slot: Field, value: T)\n    where\n        T: Packable,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// TODO: consider putting this oracle code in its own file.\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> u32 {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn base_fee_per_l2_gas() -> u128 {\n    base_fee_per_l2_gas_opcode()\n}\nunconstrained fn base_fee_per_da_gas() -> u128 {\n    base_fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> u32 {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> u32 {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> u1 {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: u64) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: u64) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\n\nunconstrained fn call(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\nunconstrained fn call_static(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_static_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// TODO: consider putting this oracle code in its own file.\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeBaseFeePerL2Gas)]\nunconstrained fn base_fee_per_l2_gas_opcode() -> u128 {}\n\n#[oracle(avmOpcodeBaseFeePerDaGas)]\nunconstrained fn base_fee_per_da_gas_opcode() -> u128 {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> u32 {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> u32 {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> u1 {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: u64) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: u64) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "71": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr",
      "source": "use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\n/// A hash that represents a private contract function call's return value. Call `get_preimage` to get the underlying\n/// value.\n///\n/// The kernels don't process the actual return values but instead their hashes, so it is up to contracts to populate\n/// oracles with the preimages of these hashes on return to make them available to their callers.\n///\n/// Public calls don't utilize this mechanism since the AVM does process the full return values.\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    /// Fetches the underlying return value from an oracle, constraining that it corresponds to the return data hash.\n    pub fn get_preimage<T>(self) -> T\n    where\n        T: Deserialize,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it. If `T`\n        // is `()`, then `preimage` must be an array of length 0 (since that is `()`'s deserialization length).\n        // `hash_args_array` handles empty arrays following the protocol rules (i.e. an empty args array is signaled\n        // with a zero hash), correctly constraining `self.hash`.\n        let preimage = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage), \"Preimage mismatch\");\n\n        Deserialize::deserialize(preimage)\n    }\n}\n\nmod test {\n    use crate::{\n        hash::hash_args_array,\n        oracle::execution_cache,\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use super::ReturnsHash;\n    use protocol_types::traits::Serialize;\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn retrieves_preimage() {\n        let env = TestEnvironment::new();\n        env.private_context(|_| {\n            let value = MockStruct::new(4, 7);\n            let serialized = value.serialize();\n\n            let hash = hash_args_array(serialized);\n            execution_cache::store(serialized, hash);\n\n            assert_eq(ReturnsHash::new(hash).get_preimage(), value);\n        });\n    }\n\n    #[test]\n    unconstrained fn retrieves_empty_preimage() {\n        let env = TestEnvironment::new();\n        env.private_context(|_| {\n            let value = ();\n            let serialized = [];\n\n            let hash = hash_args_array(serialized);\n            execution_cache::store(serialized, hash);\n\n            assert_eq(ReturnsHash::new(hash).get_preimage(), value);\n        });\n    }\n\n    #[test(should_fail_with = \"Preimage mismatch\")]\n    unconstrained fn rejects_bad_preimage() {\n        let value = MockStruct::new(4, 7);\n        let serialized = value.serialize();\n\n        let mut bad_serialized = serialized;\n        bad_serialized[0] += 1;\n\n        let hash = hash_args_array(serialized);\n\n        let _ = OracleMock::mock(\"privateLoadFromExecutionCache\").returns(bad_serialized);\n        assert_eq(ReturnsHash::new(hash).get_preimage(), value);\n    }\n\n    // This test passes due to a Noir bug.\n    // #[test(should_fail_with=\"Preimage mismatch\")]\n    // unconstrained fn rejects_bad_empty_preimage() {\n    //     let value = ();\n    //     let serialized = [];\n\n    //     let hash = hash_args_array(serialized);\n\n    //     let _ = OracleMock::mock(\"privateLoadFromExecutionCache\").returns([1]);\n    //     assert_eq(ReturnsHash::new(hash).get_preimage(), value);\n    // }\n}\n"
    },
    "72": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/context/utility_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_timestamp, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    timestamp: u64,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let timestamp = get_timestamp();\n        let contract_address = get_contract_address();\n        let version = get_version();\n        let chain_id = get_chain_id();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let timestamp = get_timestamp();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let timestamp = get_timestamp();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn timestamp(self) -> u64 {\n        self.timestamp\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T>(self, storage_slot: Field) -> T\n    where\n        T: Packable,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "74": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/event/event_selector.nr",
      "source": "use dep::protocol_types::{\n    hash::poseidon2_hash_bytes,\n    traits::{Deserialize, Empty, FromField, Serialize, ToField},\n};\n\n#[derive(Deserialize, Eq, Serialize)]\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
    },
    "76": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_BYTECODE, GENERATOR_INDEX__PUBLIC_CALLDATA,\n        GENERATOR_INDEX__SECRET_HASH, MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS,\n    },\n    hash::{\n        poseidon2_hash_subarray, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice,\n        sha256_to_field,\n    },\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n/**\n * Computes the public bytecode commitment for a contract class.\n * The commitment is `hash([separator, ...bytecode])` where bytecode omits the length prefix present\n * in `packed_bytecode`.\n *\n * @param packed_bytecode - The packed bytecode of the contract class. 0th word is the length in bytes.\n *    packed_bytecode is mutable so that we can avoid copying the array to construct one starting with\n *    separator instead of length.\n * @returns The public bytecode commitment.\n */\npub fn compute_public_bytecode_commitment(\n    mut packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS],\n) -> Field {\n    // First field element contains the length of the bytecode\n    let bytecode_length_in_bytes: u32 = packed_public_bytecode[0] as u32;\n    let bytecode_length_in_fields: u32 =\n        (bytecode_length_in_bytes / 31) + (bytecode_length_in_bytes % 31 != 0) as u32;\n    // Don't allow empty public bytecode.\n    // AVM doesn't handle execution of contracts that exist with empty bytecode.\n    assert(bytecode_length_in_fields != 0);\n    assert(bytecode_length_in_fields < MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS);\n\n    // Packed_bytecode's 0th entry is the length. Replace it with separator before hashing.\n    let separator = GENERATOR_INDEX__PUBLIC_BYTECODE.to_field();\n    packed_public_bytecode[0] = separator;\n    // +1 to length to account for the separator\n    let nonzero_length = bytecode_length_in_fields + 1;\n\n    poseidon2_hash_subarray(packed_public_bytecode, nonzero_length)\n    // NOTE: we use poseidon2_hash_subarray here because we want to hash the bytecode only up to\n    // its nonzero length. We do NOT want to include a `1` at the end to indicate \"variable length\",\n    // and we want to enforce that all trailing elements are zero.\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "88": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/history/public_storage.nr",
      "source": "use dep::protocol_types::{\n    abis::block_header::BlockHeader, address::AztecAddress,\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\nuse protocol_types::traits::{Hash, ToField};\n\nmod test;\n\npub trait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        // Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(self.global_variables.block_number, public_data_tree_index)\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n"
    },
    "93": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n\nmod test {\n    use super::get_public_keys;\n\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use protocol_types::traits::Serialize;\n    use std::test::OracleMock;\n\n    global KEY_ORACLE_RESPONSE_LENGTH: u32 = 13; // 12 fields for the keys, one field for the partial address\n\n    #[test(should_fail_with = \"Invalid public keys hint for address\")]\n    unconstrained fn get_public_keys_fails_with_bad_hint() {\n        let mut env = TestEnvironment::new();\n        let account = env.create_light_account();\n\n        // Instead of querying for some unknown account, which would result in the oracle erroring out, we mock a bad oracle\n        // response to check that the circuit properly checks the address derivation.\n        let mut random_keys_and_partial_address = [0; KEY_ORACLE_RESPONSE_LENGTH];\n        // We use randomly generated points on the curve, and a random partial address to ensure that\n        // this combination does not derive the address and we should see the assertion fail.\n        // npk_m\n        random_keys_and_partial_address[0] =\n            0x292364b852c6c6f01472951e76a39cbcf074591fd0e063a81965e7b51ad868a5;\n        random_keys_and_partial_address[1] =\n            0x0a687b46cdc9238f1c311f126aaaa4acbd7a737bff2efd7aeabdb8d805843a27;\n        random_keys_and_partial_address[2] =\n            0x0000000000000000000000000000000000000000000000000000000000000000;\n        // ivpk_m\n        random_keys_and_partial_address[3] =\n            0x173c5229a00c5425255680dd6edc27e278c48883991f348fe6985de43b4ec25f;\n        random_keys_and_partial_address[4] =\n            0x1698608e23b5f6c2f43c49a559108bb64e2247b8fc2da842296a416817f40b7f;\n        random_keys_and_partial_address[5] =\n            0x0000000000000000000000000000000000000000000000000000000000000000;\n        // ovpk_m\n        random_keys_and_partial_address[6] =\n            0x1bad2f7d1ad960a1bd0fe4d2c8d17f5ab4a86ef8b103e0a9e7f67ec0d3b4795e;\n        random_keys_and_partial_address[7] =\n            0x206db87110abbecc9fbaef2c865189d94ef2c106202f734ee4eba9257fd28bf1;\n        random_keys_and_partial_address[8] =\n            0x0000000000000000000000000000000000000000000000000000000000000000;\n        // tpk_m\n        random_keys_and_partial_address[9] =\n            0x05e3bd9cfe6b47daa139613619cf7d7fd8bb0112b6f2908caa6d9b536ed948ed;\n        random_keys_and_partial_address[10] =\n            0x051066f877c9df47552d02e7dc32127ff4edefc8498e813bca1cbd3f5d1be429;\n        random_keys_and_partial_address[11] =\n            0x0000000000000000000000000000000000000000000000000000000000000000;\n        // partial address\n        random_keys_and_partial_address[12] =\n            0x236703e2cb00a182e024e98e9f759231b556d25ff19f98896cebb69e9e678cc9;\n\n        let _ = OracleMock::mock(\"utilityGetPublicKeysAndPartialAddress\").returns(\n            random_keys_and_partial_address.serialize(),\n        );\n        let _ = get_public_keys(account);\n    }\n}\n"
    },
    "97": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/macros/aztec.nr",
      "source": "use crate::macros::{\n    dispatch::generate_public_dispatch,\n    functions::{stub_registry, utils::check_each_fn_macroified},\n    notes::NOTES,\n    storage::STORAGE_LAYOUT_NAME,\n    utils::{get_trait_impl_method, module_has_storage},\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_private_state` utility function.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    // We generate `_compute_note_hash_and_nullifier`, `sync_private_state` and `process_message`\n    // functions only if they are not already implemented. If they are implemented we just insert empty\n    // quotes.\n    let contract_library_method_compute_note_hash_and_nullifier = if !m.functions().any(|f| {\n        f.name() == quote { _compute_note_hash_and_nullifier }\n    }) {\n        generate_contract_library_method_compute_note_hash_and_nullifier()\n    } else {\n        quote {}\n    };\n    let sync_private_state = if !m.functions().any(|f| f.name() == quote { sync_private_state }) {\n        generate_sync_private_state()\n    } else {\n        quote {}\n    };\n    let process_message = if !m.functions().any(|f| f.name() == quote { process_message }) {\n        generate_process_message()\n    } else {\n        quote {}\n    };\n    let public_dispatch = generate_public_dispatch(m);\n\n    quote {\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_private_state\n        $process_message\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    if NOTES.len() > 0 {\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..NOTES.len() {\n            let typ = NOTES.get(i);\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret its raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = <$typ as $crate::protocol_types::traits::Packable>::N;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided note nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(note_nonce).into()\n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `note_nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                note_nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_sync_private_state() -> Quoted {\n    // We obtain the `utility` function on the next line instead of directly doing\n    // `#[aztec::macros::functions::utility]` in the returned quote because the latter would result in the function\n    // attribute having the full path in the ABI. This is undesirable because we use the information in the ABI only\n    // to determine whether a function is `private`, `public`, or `utility`.\n    let utility = crate::macros::functions::utility;\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[$utility]\n        unconstrained fn sync_private_state() {\n        }\n    }\n}\n\ncomptime fn generate_process_message() -> Quoted {\n    // We obtain the `utility` function on the next line instead of directly doing\n    // `#[aztec::macros::functions::utility]` in the returned quote because the latter would result in the function\n    // attribute having the full path in the ABI. This is undesirable because we use the information in the ABI only\n    // to determine whether a function is `private`, `public`, or `utility`.\n    let utility = crate::macros::functions::utility;\n\n    // TODO(#15012): Here we use PRIVATE_LOG_CIPHERTEXT_LEN for message ciphertext length. Fix message vs log naming.\n    quote {\n        #[$utility]\n        unconstrained fn process_message(\n            message_ciphertext: BoundedVec<Field, aztec::protocol_types::constants::PRIVATE_LOG_CIPHERTEXT_LEN>,\n            message_context: aztec::messages::processing::message_context::MessageContext,\n        ) {\n            aztec::messages::discovery::process_message::do_process_message(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n                message_ciphertext,\n                message_context,\n            );\n        }\n    }\n}\n"
    },
    "98": {
      "path": "/Users/ngjupeng/nargo/github.com/AztecProtocol/aztec-packages/v2.0.3/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr",
      "source": "use super::utils::{compute_fn_selector, size_in_fields};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault, panic};\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let seen_selectors =\n        &mut UHashMap::<Field, Quoted, BuildHasherDefault<Poseidon2Hasher>>::default();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n        let fn_name = function.name();\n\n        // Since function selectors are computed as the first 4 bytes of the hash of the function signature,\n        // it's possible to have collisions. With the following check, we ensure it doesn't happen within\n        // the same contract.\n        if seen_selectors.contains_key(selector) {\n            let existing_fn = seen_selectors.get(selector).unwrap();\n            panic(\n                f\"Public function selector collision detected between functions '{fn_name}' and '{existing_fn}'\",\n            );\n        }\n        seen_selectors.insert(selector, fn_name);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index: &mut u32 = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"
    }
  }
}
